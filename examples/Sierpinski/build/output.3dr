method Canvas_Canvas_int_int_Array(){
	t0 = P - 0;
	t1 = t0 + 3;
	stack[t1] = H;
	t2 = P - 0;
	t3 = t2 + 4;
	stack[t3] = H;
	H = H + 3;
	t4 = P - 0;
	t5 = t4 + 0;
	t6 = stack[t5];
	t7 = P - 0;
	t8 = t7 + 3;
	t9 = stack[t8];
	t10 = t9 + 0;
	heap[t10] = t6;
	t11 = P - 0;
	t12 = t11 + 1;
	t13 = stack[t12];
	t14 = P - 0;
	t15 = t14 + 3;
	t16 = stack[t15];
	t17 = t16 + 1;
	heap[t17] = t13;
	t18 = P - 0;
	t19 = t18 + 2;
	t20 = stack[t19];
	t21 = P - 0;
	t22 = t21 + 3;
	t23 = stack[t22];
	t24 = t23 + 2;
	heap[t24] = t20;
	L0:

}
method Canvas_getAlto(){
	t26 = P - 0;
	t27 = t26 + 0;
	t28 = stack[t27];
	t29 = t28 + 0;
	t30 = heap[t29];
	t31 = P - 0;
	t32 = t31 + 1;
	stack[t32] = t30;
	goto L1;
	L1:

}
method Canvas_getAncho(){
	t34 = P - 0;
	t35 = t34 + 0;
	t36 = stack[t35];
	t37 = t36 + 1;
	t38 = heap[t37];
	t39 = P - 0;
	t40 = t39 + 1;
	stack[t40] = t38;
	goto L2;
	L2:

}
method Figura_Figura(){
	t41 = P - 0;
	t42 = t41 + 0;
	stack[t42] = H;
	t43 = P - 0;
	t44 = t43 + 1;
	stack[t44] = H;
	H = H + 7;
	t45 = 1;
	t46 = t45 * 3;
	t47 = H;
	H = H + t46;
	H = H + 2;
	heap[t47] = 1;
	t48 = t47 + 1;
	heap[t48] = 3;
	t50 = P - 0;
	t51 = t50 + 0;
	t52 = stack[t51];
	t53 = t52 + 6;
	heap[t53] = t47;
	t55 = P - 0;
	t56 = t55 + 0;
	t57 = stack[t56];
	t58 = t57 + 2;
	t59 = int_to_float 300;
	heap[t58] = t59;
	t61 = P - 0;
	t62 = t61 + 0;
	t63 = stack[t62];
	t64 = t63 + 4;
	t65 = int_to_float 300;
	heap[t64] = t65;
	t67 = P - 0;
	t68 = t67 + 0;
	t69 = stack[t68];
	t70 = t69 + 5;
	t71 = int_to_float 10;
	heap[t70] = t71;
	t73 = P - 0;
	t74 = t73 + 0;
	t75 = stack[t74];
	t76 = t75 + 3;
	t77 = int_to_float 300;
	heap[t76] = t77;
	t79 = P - 0;
	t80 = t79 + 0;
	t81 = stack[t80];
	t82 = t81 + 0;
	heap[t82] = 0.8660;
	t84 = P - 0;
	t85 = t84 + 0;
	t86 = stack[t85];
	t87 = t86 + 1;
	heap[t87] = 4;
	L3:

}
method Figura_paint(){
	t88 = P - 0;
	t89 = t88 + 0;
	t90 = stack[t89];
	t92 = P - 0;
	t93 = t92 + 0;
	t94 = stack[t93];
	t95 = t94 + 1;
	t96 = heap[t95];
	t98 = P - 0;
	t99 = t98 + 0;
	t100 = stack[t99];
	t101 = t100 + 2;
	t102 = heap[t101];
	t104 = P - 0;
	t105 = t104 + 0;
	t106 = stack[t105];
	t107 = t106 + 4;
	t108 = heap[t107];
	t110 = P - 0;
	t111 = t110 + 0;
	t112 = stack[t111];
	t113 = t112 + 5;
	t114 = heap[t113];
	t116 = P - 0;
	t117 = t116 + 0;
	t118 = stack[t117];
	t119 = t118 + 3;
	t120 = heap[t119];
	t121 = P + 2;
	t122 = t121 + 0;
	stack[t122] = t96;
	t123 = t121 + 1;
	stack[t123] = t102;
	t124 = t121 + 2;
	stack[t124] = t108;
	t125 = t121 + 3;
	stack[t125] = t114;
	t126 = t121 + 4;
	stack[t126] = t120;
	t127 = t121 + 5;
	stack[t127] = t90;
	P = P + 2;
	call Figura_paintRecursivo_int_float_float_float_float();
	P = P - 2;
	L4:

}
method Figura_paintRecursivo_int_float_float_float_float(){
	t128 = P - 0;
	t129 = t128 + 3;
	t130 = stack[t129];
	t131 = P - 0;
	t132 = t131 + 1;
	t133 = stack[t132];
	t134 = t130 - t133;
	t135 = t134 / 2;
	t136 = P - 0;
	t137 = t136 + 7;
	t138 = int_to_float t135;
	stack[t137] = t138;
	t139 = P - 0;
	t140 = t139 + 4;
	t141 = stack[t140];
	t142 = P - 0;
	t143 = t142 + 2;
	t144 = stack[t143];
	t145 = t141 - t144;
	t146 = t145 / 2;
	t147 = P - 0;
	t148 = t147 + 8;
	t149 = int_to_float t146;
	stack[t148] = t149;
	t150 = P - 0;
	t151 = t150 + 1;
	t152 = stack[t151];
	t153 = P - 0;
	t154 = t153 + 7;
	t155 = stack[t154];
	t156 = t152 + t155;
	t157 = P - 0;
	t158 = t157 + 8;
	t159 = stack[t158];
	t160 = 2 * t159;
	t162 = P - 0;
	t163 = t162 + 5;
	t164 = stack[t163];
	t165 = t164 + 0;
	t166 = heap[t165];
	t167 = t160 * t166;
	t168 = t156 - t167;
	t169 = P - 0;
	t170 = t169 + 9;
	stack[t170] = t168;
	t171 = P - 0;
	t172 = t171 + 2;
	t173 = stack[t172];
	t174 = P - 0;
	t175 = t174 + 8;
	t176 = stack[t175];
	t177 = t173 + t176;
	t178 = P - 0;
	t179 = t178 + 7;
	t180 = stack[t179];
	t181 = 2 * t180;
	t183 = P - 0;
	t184 = t183 + 5;
	t185 = stack[t184];
	t186 = t185 + 0;
	t187 = heap[t186];
	t188 = t181 * t187;
	t189 = t177 + t188;
	t190 = P - 0;
	t191 = t190 + 10;
	stack[t191] = t189;
	t192 = P - 0;
	t193 = t192 + 3;
	t194 = stack[t193];
	t195 = P - 0;
	t196 = t195 + 1;
	t197 = stack[t196];
	t198 = t194 + t197;
	t199 = t198 / 2;
	t200 = P - 0;
	t201 = t200 + 11;
	t202 = int_to_float t199;
	stack[t201] = t202;
	t203 = P - 0;
	t204 = t203 + 4;
	t205 = stack[t204];
	t206 = P - 0;
	t207 = t206 + 2;
	t208 = stack[t207];
	t209 = t205 + t208;
	t210 = t209 / 2;
	t211 = P - 0;
	t212 = t211 + 12;
	t213 = int_to_float t210;
	stack[t212] = t213;
	t214 = P - 0;
	t215 = t214 + 9;
	t216 = stack[t215];
	t217 = P - 0;
	t218 = t217 + 3;
	t219 = stack[t218];
	t220 = t216 + t219;
	t221 = t220 / 2;
	t222 = P - 0;
	t223 = t222 + 13;
	t224 = int_to_float t221;
	stack[t223] = t224;
	t225 = P - 0;
	t226 = t225 + 10;
	t227 = stack[t226];
	t228 = P - 0;
	t229 = t228 + 4;
	t230 = stack[t229];
	t231 = t227 + t230;
	t232 = t231 / 2;
	t233 = P - 0;
	t234 = t233 + 14;
	t235 = int_to_float t232;
	stack[t234] = t235;
	t236 = P - 0;
	t237 = t236 + 1;
	t238 = stack[t237];
	t239 = P - 0;
	t240 = t239 + 9;
	t241 = stack[t240];
	t242 = t238 + t241;
	t243 = t242 / 2;
	t244 = P - 0;
	t245 = t244 + 15;
	t246 = int_to_float t243;
	stack[t245] = t246;
	t247 = P - 0;
	t248 = t247 + 2;
	t249 = stack[t248];
	t250 = P - 0;
	t251 = t250 + 10;
	t252 = stack[t251];
	t253 = t249 + t252;
	t254 = t253 / 2;
	t255 = P - 0;
	t256 = t255 + 16;
	t257 = int_to_float t254;
	stack[t256] = t257;
	t258 = P - 0;
	t259 = t258 + 0;
	t260 = stack[t259];
	if t260 <= 0 then goto L6;
	t261 = 0;
	goto L7;
	L6:
	t261 = 1;
	L7:
	if t261 == 1 then goto L8;
	goto L9;
	L8:
	P = P + 17;
	t263 = P - 17;
	t264 = t263 + 5;
	t265 = stack[t264];
	t266 = t265 + 6;
	t267 = heap[t266];
	t268 = heap[t267];
	t269 = t268 + 1;
	t270 = t269 + t267;
	t271 = 0;
	t272 = t271 + t270;
	heap[t272] = 0;
	t274 = P - 17;
	t275 = t274 + 5;
	t276 = stack[t275];
	t277 = t276 + 6;
	t278 = heap[t277];
	t279 = heap[t278];
	t280 = t279 + 1;
	t281 = t280 + t278;
	t282 = 1;
	t283 = t282 + t281;
	heap[t283] = 255;
	t285 = P - 17;
	t286 = t285 + 5;
	t287 = stack[t286];
	t288 = t287 + 6;
	t289 = heap[t288];
	t290 = heap[t289];
	t291 = t290 + 1;
	t292 = t291 + t289;
	t293 = 2;
	t294 = t293 + t292;
	heap[t294] = 0;
	t295 = P - 17;
	t296 = t295 + 1;
	t297 = stack[t296];
	t298 = float_to_int t297;
	t299 = P - 17;
	t300 = t299 + 2;
	t301 = stack[t300];
	t302 = float_to_int t301;
	t303 = P - 17;
	t304 = t303 + 3;
	t305 = stack[t304];
	t306 = float_to_int t305;
	t307 = P - 17;
	t308 = t307 + 4;
	t309 = stack[t308];
	t310 = float_to_int t309;
	t312 = P - 17;
	t313 = t312 + 5;
	t314 = stack[t313];
	t315 = t314 + 6;
	t316 = heap[t315];
	t317 = heap[t316];
	t318 = t317 + 1;
	t319 = t318 + t316;
	t320 = 0;
	t321 = t320 + t319;
	t322 = heap[t321];
	t324 = P - 17;
	t325 = t324 + 5;
	t326 = stack[t325];
	t327 = t326 + 6;
	t328 = heap[t327];
	t329 = heap[t328];
	t330 = t329 + 1;
	t331 = t330 + t328;
	t332 = 1;
	t333 = t332 + t331;
	t334 = heap[t333];
	t336 = P - 17;
	t337 = t336 + 5;
	t338 = stack[t337];
	t339 = t338 + 6;
	t340 = heap[t339];
	t341 = heap[t340];
	t342 = t341 + 1;
	t343 = t342 + t340;
	t344 = 2;
	t345 = t344 + t343;
	t346 = heap[t345];
	t347 = P + 0;
	t348 = t347 + 0;
	stack[t348] = t298;
	t349 = t347 + 1;
	stack[t349] = t302;
	t350 = t347 + 2;
	stack[t350] = t306;
	t351 = t347 + 3;
	stack[t351] = t310;
	t352 = t347 + 4;
	stack[t352] = t322;
	t353 = t347 + 5;
	stack[t353] = t334;
	t354 = t347 + 6;
	stack[t354] = t346;
	P = P + 0;
	call Linea_int_int_int_int_int_int_int();
	P = P - 0;
	t356 = P - 17;
	t357 = t356 + 5;
	t358 = stack[t357];
	t359 = t358 + 6;
	t360 = heap[t359];
	t361 = heap[t360];
	t362 = t361 + 1;
	t363 = t362 + t360;
	t364 = 0;
	t365 = t364 + t363;
	heap[t365] = 255;
	t367 = P - 17;
	t368 = t367 + 5;
	t369 = stack[t368];
	t370 = t369 + 6;
	t371 = heap[t370];
	t372 = heap[t371];
	t373 = t372 + 1;
	t374 = t373 + t371;
	t375 = 1;
	t376 = t375 + t374;
	heap[t376] = 0;
	t378 = P - 17;
	t379 = t378 + 5;
	t380 = stack[t379];
	t381 = t380 + 6;
	t382 = heap[t381];
	t383 = heap[t382];
	t384 = t383 + 1;
	t385 = t384 + t382;
	t386 = 2;
	t387 = t386 + t385;
	heap[t387] = 0;
	t388 = P - 17;
	t389 = t388 + 3;
	t390 = stack[t389];
	t391 = float_to_int t390;
	t392 = P - 17;
	t393 = t392 + 4;
	t394 = stack[t393];
	t395 = float_to_int t394;
	t396 = P - 17;
	t397 = t396 + 9;
	t398 = stack[t397];
	t399 = float_to_int t398;
	t400 = P - 17;
	t401 = t400 + 10;
	t402 = stack[t401];
	t403 = float_to_int t402;
	t405 = P - 17;
	t406 = t405 + 5;
	t407 = stack[t406];
	t408 = t407 + 6;
	t409 = heap[t408];
	t410 = heap[t409];
	t411 = t410 + 1;
	t412 = t411 + t409;
	t413 = 0;
	t414 = t413 + t412;
	t415 = heap[t414];
	t417 = P - 17;
	t418 = t417 + 5;
	t419 = stack[t418];
	t420 = t419 + 6;
	t421 = heap[t420];
	t422 = heap[t421];
	t423 = t422 + 1;
	t424 = t423 + t421;
	t425 = 1;
	t426 = t425 + t424;
	t427 = heap[t426];
	t429 = P - 17;
	t430 = t429 + 5;
	t431 = stack[t430];
	t432 = t431 + 6;
	t433 = heap[t432];
	t434 = heap[t433];
	t435 = t434 + 1;
	t436 = t435 + t433;
	t437 = 2;
	t438 = t437 + t436;
	t439 = heap[t438];
	t440 = P + 0;
	t441 = t440 + 0;
	stack[t441] = t391;
	t442 = t440 + 1;
	stack[t442] = t395;
	t443 = t440 + 2;
	stack[t443] = t399;
	t444 = t440 + 3;
	stack[t444] = t403;
	t445 = t440 + 4;
	stack[t445] = t415;
	t446 = t440 + 5;
	stack[t446] = t427;
	t447 = t440 + 6;
	stack[t447] = t439;
	P = P + 0;
	call Linea_int_int_int_int_int_int_int();
	P = P - 0;
	t449 = P - 17;
	t450 = t449 + 5;
	t451 = stack[t450];
	t452 = t451 + 6;
	t453 = heap[t452];
	t454 = heap[t453];
	t455 = t454 + 1;
	t456 = t455 + t453;
	t457 = 0;
	t458 = t457 + t456;
	heap[t458] = 0;
	t460 = P - 17;
	t461 = t460 + 5;
	t462 = stack[t461];
	t463 = t462 + 6;
	t464 = heap[t463];
	t465 = heap[t464];
	t466 = t465 + 1;
	t467 = t466 + t464;
	t468 = 1;
	t469 = t468 + t467;
	heap[t469] = 0;
	t471 = P - 17;
	t472 = t471 + 5;
	t473 = stack[t472];
	t474 = t473 + 6;
	t475 = heap[t474];
	t476 = heap[t475];
	t477 = t476 + 1;
	t478 = t477 + t475;
	t479 = 2;
	t480 = t479 + t478;
	heap[t480] = 255;
	t481 = P - 17;
	t482 = t481 + 9;
	t483 = stack[t482];
	t484 = float_to_int t483;
	t485 = P - 17;
	t486 = t485 + 10;
	t487 = stack[t486];
	t488 = float_to_int t487;
	t489 = P - 17;
	t490 = t489 + 1;
	t491 = stack[t490];
	t492 = float_to_int t491;
	t493 = P - 17;
	t494 = t493 + 2;
	t495 = stack[t494];
	t496 = float_to_int t495;
	t498 = P - 17;
	t499 = t498 + 5;
	t500 = stack[t499];
	t501 = t500 + 6;
	t502 = heap[t501];
	t503 = heap[t502];
	t504 = t503 + 1;
	t505 = t504 + t502;
	t506 = 0;
	t507 = t506 + t505;
	t508 = heap[t507];
	t510 = P - 17;
	t511 = t510 + 5;
	t512 = stack[t511];
	t513 = t512 + 6;
	t514 = heap[t513];
	t515 = heap[t514];
	t516 = t515 + 1;
	t517 = t516 + t514;
	t518 = 1;
	t519 = t518 + t517;
	t520 = heap[t519];
	t522 = P - 17;
	t523 = t522 + 5;
	t524 = stack[t523];
	t525 = t524 + 6;
	t526 = heap[t525];
	t527 = heap[t526];
	t528 = t527 + 1;
	t529 = t528 + t526;
	t530 = 2;
	t531 = t530 + t529;
	t532 = heap[t531];
	t533 = P + 0;
	t534 = t533 + 0;
	stack[t534] = t484;
	t535 = t533 + 1;
	stack[t535] = t488;
	t536 = t533 + 2;
	stack[t536] = t492;
	t537 = t533 + 3;
	stack[t537] = t496;
	t538 = t533 + 4;
	stack[t538] = t508;
	t539 = t533 + 5;
	stack[t539] = t520;
	t540 = t533 + 6;
	stack[t540] = t532;
	P = P + 0;
	call Linea_int_int_int_int_int_int_int();
	P = P - 0;
	P = P - 17;
	goto L10;
	L9:
	P = P + 17;
	t541 = P - 17;
	t542 = t541 + 5;
	t543 = stack[t542];
	t544 = P - 17;
	t545 = t544 + 0;
	t546 = stack[t545];
	t547 = t546 - 1;
	t548 = P - 17;
	t549 = t548 + 1;
	t550 = stack[t549];
	t551 = P - 17;
	t552 = t551 + 2;
	t553 = stack[t552];
	t554 = P - 17;
	t555 = t554 + 11;
	t556 = stack[t555];
	t557 = P - 17;
	t558 = t557 + 12;
	t559 = stack[t558];
	t560 = P + 0;
	t561 = t560 + 0;
	stack[t561] = t547;
	t562 = t560 + 1;
	stack[t562] = t550;
	t563 = t560 + 2;
	stack[t563] = t553;
	t564 = t560 + 3;
	stack[t564] = t556;
	t565 = t560 + 4;
	stack[t565] = t559;
	t566 = t560 + 5;
	stack[t566] = t543;
	P = P + 0;
	call Figura_paintRecursivo_int_float_float_float_float();
	P = P - 0;
	t567 = P - 17;
	t568 = t567 + 5;
	t569 = stack[t568];
	t570 = P - 17;
	t571 = t570 + 0;
	t572 = stack[t571];
	t573 = t572 - 1;
	t574 = P - 17;
	t575 = t574 + 11;
	t576 = stack[t575];
	t577 = P - 17;
	t578 = t577 + 12;
	t579 = stack[t578];
	t580 = P - 17;
	t581 = t580 + 3;
	t582 = stack[t581];
	t583 = P - 17;
	t584 = t583 + 4;
	t585 = stack[t584];
	t586 = P + 0;
	t587 = t586 + 0;
	stack[t587] = t573;
	t588 = t586 + 1;
	stack[t588] = t576;
	t589 = t586 + 2;
	stack[t589] = t579;
	t590 = t586 + 3;
	stack[t590] = t582;
	t591 = t586 + 4;
	stack[t591] = t585;
	t592 = t586 + 5;
	stack[t592] = t569;
	P = P + 0;
	call Figura_paintRecursivo_int_float_float_float_float();
	P = P - 0;
	t593 = P - 17;
	t594 = t593 + 5;
	t595 = stack[t594];
	t596 = P - 17;
	t597 = t596 + 0;
	t598 = stack[t597];
	t599 = t598 - 1;
	t600 = P - 17;
	t601 = t600 + 15;
	t602 = stack[t601];
	t603 = P - 17;
	t604 = t603 + 16;
	t605 = stack[t604];
	t606 = P - 17;
	t607 = t606 + 13;
	t608 = stack[t607];
	t609 = P - 17;
	t610 = t609 + 14;
	t611 = stack[t610];
	t612 = P + 0;
	t613 = t612 + 0;
	stack[t613] = t599;
	t614 = t612 + 1;
	stack[t614] = t602;
	t615 = t612 + 2;
	stack[t615] = t605;
	t616 = t612 + 3;
	stack[t616] = t608;
	t617 = t612 + 4;
	stack[t617] = t611;
	t618 = t612 + 5;
	stack[t618] = t595;
	P = P + 0;
	call Figura_paintRecursivo_int_float_float_float_float();
	P = P - 0;
	P = P - 17;
	goto L10;
	L10:
	L5:

}
method Figura_paintFiguras(){
	t619 = P + 4;
	t620 = t619 + 0;
	stack[t620] = 30;
	t621 = t619 + 1;
	stack[t621] = 30;
	t622 = t619 + 2;
	stack[t622] = 100;
	t623 = t619 + 3;
	stack[t623] = 100;
	t624 = t619 + 4;
	stack[t624] = 0;
	t625 = t619 + 5;
	stack[t625] = 90;
	t626 = t619 + 6;
	stack[t626] = 0;
	t627 = t619 + 7;
	stack[t627] = 255;
	t628 = t619 + 8;
	stack[t628] = 10;
	t629 = t619 + 9;
	stack[t629] = 1;
	P = P + 4;
	call Arco_int_int_int_int_int_int_int_int_int_bool();
	P = P - 4;
	t630 = P + 4;
	t631 = t630 + 0;
	stack[t631] = 100;
	t632 = t630 + 1;
	stack[t632] = 100;
	t633 = t630 + 2;
	stack[t633] = 50;
	t634 = t630 + 3;
	stack[t634] = 50;
	t635 = t630 + 4;
	stack[t635] = 0;
	t636 = t630 + 5;
	stack[t636] = 0;
	t637 = t630 + 6;
	stack[t637] = 255;
	t638 = t630 + 7;
	stack[t638] = 1;
	P = P + 4;
	call Rectangulo_int_int_int_int_int_int_int_bool();
	P = P - 4;
	t639 = P + 4;
	t640 = t639 + 0;
	stack[t640] = 100;
	t641 = t639 + 1;
	stack[t641] = 200;
	t642 = t639 + 2;
	stack[t642] = 50;
	t643 = t639 + 3;
	stack[t643] = 50;
	t644 = t639 + 4;
	stack[t644] = 0;
	t645 = t639 + 5;
	stack[t645] = 0;
	t646 = t639 + 6;
	stack[t646] = 255;
	t647 = t639 + 7;
	stack[t647] = 1;
	P = P + 4;
	call Ovalo_int_int_int_int_int_int_int_bool();
	P = P - 4;
	t648 = P + 4;
	t649 = t648 + 0;
	stack[t649] = 50;
	t650 = t648 + 1;
	stack[t650] = 50;
	t651 = t648 + 2;
	stack[t651] = 100;
	t652 = t648 + 3;
	stack[t652] = 100;
	t653 = t648 + 4;
	stack[t653] = 0;
	t654 = t648 + 5;
	stack[t654] = 255;
	t655 = t648 + 6;
	stack[t655] = 255;
	t656 = t648 + 7;
	stack[t656] = 0;
	P = P + 4;
	call Ovalo_int_int_int_int_int_int_int_bool();
	P = P - 4;
	t657 = 1;
	t658 = t657 * 6;
	t659 = H;
	H = H + t658;
	H = H + 2;
	heap[t659] = 1;
	t660 = t659 + 1;
	heap[t660] = 6;
	t661 = P - 0;
	t662 = t661 + 2;
	stack[t662] = t659;
	t663 = P - 0;
	t664 = t663 + 2;
	t665 = stack[t664];
	t666 = heap[t665];
	t667 = t666 + 1;
	t668 = t667 + t665;
	t669 = 0;
	t670 = t669 + t668;
	heap[t670] = 20;
	t671 = P - 0;
	t672 = t671 + 2;
	t673 = stack[t672];
	t674 = heap[t673];
	t675 = t674 + 1;
	t676 = t675 + t673;
	t677 = 1;
	t678 = t677 + t676;
	heap[t678] = 40;
	t679 = P - 0;
	t680 = t679 + 2;
	t681 = stack[t680];
	t682 = heap[t681];
	t683 = t682 + 1;
	t684 = t683 + t681;
	t685 = 2;
	t686 = t685 + t684;
	heap[t686] = 50;
	t687 = P - 0;
	t688 = t687 + 2;
	t689 = stack[t688];
	t690 = heap[t689];
	t691 = t690 + 1;
	t692 = t691 + t689;
	t693 = 3;
	t694 = t693 + t692;
	heap[t694] = 20;
	t695 = P - 0;
	t696 = t695 + 2;
	t697 = stack[t696];
	t698 = heap[t697];
	t699 = t698 + 1;
	t700 = t699 + t697;
	t701 = 4;
	t702 = t701 + t700;
	heap[t702] = 20;
	t703 = P - 0;
	t704 = t703 + 2;
	t705 = stack[t704];
	t706 = heap[t705];
	t707 = t706 + 1;
	t708 = t707 + t705;
	t709 = 5;
	t710 = t709 + t708;
	heap[t710] = 15;
	t711 = 1;
	t712 = t711 * 5;
	t713 = H;
	H = H + t712;
	H = H + 2;
	heap[t713] = 1;
	t714 = t713 + 1;
	heap[t714] = 5;
	t715 = P - 0;
	t716 = t715 + 3;
	stack[t716] = t713;
	t717 = P - 0;
	t718 = t717 + 3;
	t719 = stack[t718];
	t720 = heap[t719];
	t721 = t720 + 1;
	t722 = t721 + t719;
	t723 = 0;
	t724 = t723 + t722;
	heap[t724] = 50;
	t725 = P - 0;
	t726 = t725 + 3;
	t727 = stack[t726];
	t728 = heap[t727];
	t729 = t728 + 1;
	t730 = t729 + t727;
	t731 = 1;
	t732 = t731 + t730;
	heap[t732] = 50;
	t733 = P - 0;
	t734 = t733 + 3;
	t735 = stack[t734];
	t736 = heap[t735];
	t737 = t736 + 1;
	t738 = t737 + t735;
	t739 = 2;
	t740 = t739 + t738;
	heap[t740] = 60;
	t741 = P - 0;
	t742 = t741 + 3;
	t743 = stack[t742];
	t744 = heap[t743];
	t745 = t744 + 1;
	t746 = t745 + t743;
	t747 = 3;
	t748 = t747 + t746;
	heap[t748] = 80;
	t749 = P - 0;
	t750 = t749 + 3;
	t751 = stack[t750];
	t752 = heap[t751];
	t753 = t752 + 1;
	t754 = t753 + t751;
	t755 = 4;
	t756 = t755 + t754;
	heap[t756] = 80;
	t757 = P - 0;
	t758 = t757 + 3;
	t759 = stack[t758];
	t760 = heap[t759];
	t761 = t760 + 1;
	t762 = t761 + t759;
	t763 = 5;
	t764 = t763 + t762;
	heap[t764] = 60;
	L11:

}
method Sierpinski_init(){
	t765 = H;
	H = H + 24;
	heap[t765] = 23;
	t766 = t765 + 1;
	heap[t766] = 32;
	t767 = t765 + 2;
	heap[t767] = 80;
	t768 = t765 + 3;
	heap[t768] = 114;
	t769 = t765 + 4;
	heap[t769] = 111;
	t770 = t765 + 5;
	heap[t770] = 121;
	t771 = t765 + 6;
	heap[t771] = 101;
	t772 = t765 + 7;
	heap[t772] = 99;
	t773 = t765 + 8;
	heap[t773] = 116;
	t774 = t765 + 9;
	heap[t774] = 111;
	t775 = t765 + 10;
	heap[t775] = 32;
	t776 = t765 + 11;
	heap[t776] = 67;
	t777 = t765 + 12;
	heap[t777] = 111;
	t778 = t765 + 13;
	heap[t778] = 109;
	t779 = t765 + 14;
	heap[t779] = 112;
	t780 = t765 + 15;
	heap[t780] = 105;
	t781 = t765 + 16;
	heap[t781] = 108;
	t782 = t765 + 17;
	heap[t782] = 97;
	t783 = t765 + 18;
	heap[t783] = 100;
	t784 = t765 + 19;
	heap[t784] = 111;
	t785 = t765 + 20;
	heap[t785] = 114;
	t786 = t765 + 21;
	heap[t786] = 101;
	t787 = t765 + 22;
	heap[t787] = 115;
	t788 = t765 + 23;
	heap[t788] = 32;
	t790 = P - 0;
	t791 = t790 + 0;
	t792 = stack[t791];
	t793 = t792 + 1;
	heap[t793] = t765;
	t794 = 1;
	t795 = t794 * 3;
	t796 = H;
	H = H + t795;
	H = H + 2;
	heap[t796] = 1;
	t797 = t796 + 1;
	heap[t797] = 3;
	t799 = P - 0;
	t800 = t799 + 0;
	t801 = stack[t800];
	t802 = t801 + 0;
	heap[t802] = t796;
	t804 = P - 0;
	t805 = t804 + 0;
	t806 = stack[t805];
	t807 = t806 + 0;
	t808 = heap[t807];
	t809 = heap[t808];
	t810 = t809 + 1;
	t811 = t810 + t808;
	t812 = 0;
	t813 = t812 + t811;
	heap[t813] = 255;
	t815 = P - 0;
	t816 = t815 + 0;
	t817 = stack[t816];
	t818 = t817 + 0;
	t819 = heap[t818];
	t820 = heap[t819];
	t821 = t820 + 1;
	t822 = t821 + t819;
	t823 = 1;
	t824 = t823 + t822;
	heap[t824] = 255;
	t826 = P - 0;
	t827 = t826 + 0;
	t828 = stack[t827];
	t829 = t828 + 0;
	t830 = heap[t829];
	t831 = heap[t830];
	t832 = t831 + 1;
	t833 = t832 + t830;
	t834 = 2;
	t835 = t834 + t833;
	heap[t835] = 255;
	L12:

}
method Sierpinski_main(){
	t836 = P - 0;
	t837 = t836 + 0;
	t838 = stack[t837];
	t839 = P + 7;
	t840 = t839 + 0;
	stack[t840] = t838;
	P = P + 7;
	call Sierpinski_init();
	P = P - 7;
	t842 = P - 0;
	t843 = t842 + 0;
	t844 = stack[t843];
	t845 = t844 + 0;
	t846 = heap[t845];
	t847 = P + 7;
	t848 = t847 + 0;
	stack[t848] = 400;
	t849 = t847 + 1;
	stack[t849] = 400;
	t850 = t847 + 2;
	stack[t850] = t846;
	P = P + 7;
	call Canvas_Canvas_int_int_Array();
	t851 = P + 4;
	t852 = stack[t851];
	P = P - 7;
	t853 = P - 0;
	t854 = t853 + 2;
	stack[t854] = t852;
	t855 = P - 0;
	t856 = t855 + 0;
	t857 = stack[t856];
	t858 = P - 0;
	t859 = t858 + 2;
	t860 = stack[t859];
	t861 = P + 7;
	t862 = t861 + 0;
	stack[t862] = t860;
	t863 = t861 + 1;
	stack[t863] = t857;
	P = P + 7;
	call Sierpinski_setCanvas_Canvas();
	P = P - 7;
	t865 = P - 0;
	t866 = t865 + 0;
	t867 = stack[t866];
	t868 = t867 + 1;
	t869 = heap[t868];
	t870 = P + 7;
	t871 = t870 + 0;
	stack[t871] = t869;
	t872 = t870 + 1;
	stack[t872] = 30;
	t873 = t870 + 2;
	stack[t873] = 30;
	t874 = t870 + 3;
	stack[t874] = 255;
	t875 = t870 + 4;
	stack[t875] = 255;
	t876 = t870 + 5;
	stack[t876] = 0;
	P = P + 7;
	call Texto_string_int_int_int_int_int();
	P = P - 7;
	t877 = P + 7;
	P = P + 7;
	call Figura_Figura();
	t878 = P + 1;
	t879 = stack[t878];
	P = P - 7;
	t880 = P - 0;
	t881 = t880 + 3;
	stack[t881] = t879;
	t882 = P - 0;
	t883 = t882 + 3;
	t884 = stack[t883];
	t885 = P + 7;
	t886 = t885 + 0;
	stack[t886] = t884;
	P = P + 7;
	call Figura_paint();
	P = P - 7;
	t887 = P - 0;
	t888 = t887 + 0;
	t889 = stack[t888];
	t890 = P + 7;
	t891 = t890 + 0;
	stack[t891] = t889;
	P = P + 7;
	call Sierpinski_pruebaFor();
	P = P - 7;
	t892 = P - 0;
	t893 = t892 + 4;
	stack[t893] = 6;
	t894 = P - 0;
	t895 = t894 + 0;
	t896 = stack[t895];
	t897 = P - 0;
	t898 = t897 + 4;
	t899 = stack[t898];
	t900 = P + 7;
	t901 = t900 + 0;
	stack[t901] = t899;
	t902 = t900 + 1;
	stack[t902] = t896;
	P = P + 7;
	call Sierpinski_factorial_int();
	t903 = P + 2;
	t904 = stack[t903];
	P = P - 7;
	t905 = P - 0;
	t906 = t905 + 5;
	stack[t906] = t904;
	t907 = H;
	H = H + 29;
	heap[t907] = 28;
	t908 = t907 + 1;
	heap[t908] = 83;
	t909 = t907 + 2;
	heap[t909] = 117;
	t910 = t907 + 3;
	heap[t910] = 99;
	t911 = t907 + 4;
	heap[t911] = 101;
	t912 = t907 + 5;
	heap[t912] = 99;
	t913 = t907 + 6;
	heap[t913] = 105;
	t914 = t907 + 7;
	heap[t914] = 243;
	t915 = t907 + 8;
	heap[t915] = 110;
	t916 = t907 + 9;
	heap[t916] = 32;
	t917 = t907 + 10;
	heap[t917] = 100;
	t918 = t907 + 11;
	heap[t918] = 101;
	t919 = t907 + 12;
	heap[t919] = 32;
	t920 = t907 + 13;
	heap[t920] = 102;
	t921 = t907 + 14;
	heap[t921] = 105;
	t922 = t907 + 15;
	heap[t922] = 98;
	t923 = t907 + 16;
	heap[t923] = 111;
	t924 = t907 + 17;
	heap[t924] = 110;
	t925 = t907 + 18;
	heap[t925] = 97;
	t926 = t907 + 19;
	heap[t926] = 99;
	t927 = t907 + 20;
	heap[t927] = 99;
	t928 = t907 + 21;
	heap[t928] = 105;
	t929 = t907 + 22;
	heap[t929] = 32;
	t930 = t907 + 23;
	heap[t930] = 100;
	t931 = t907 + 24;
	heap[t931] = 101;
	t932 = t907 + 25;
	heap[t932] = 32;
	t933 = t907 + 26;
	heap[t933] = 54;
	t934 = t907 + 27;
	heap[t934] = 48;
	t935 = t907 + 28;
	heap[t935] = 32;
	t936 = P - 0;
	t937 = t936 + 0;
	t938 = stack[t937];
	t939 = P + 7;
	t940 = t939 + 0;
	stack[t940] = 60;
	t941 = t939 + 1;
	stack[t941] = t938;
	P = P + 7;
	call Sierpinski_fibonacci_int();
	t942 = P + 2;
	t943 = stack[t942];
	P = P - 7;
	t944 = t907 strcat t943;
	t945 = P - 0;
	t946 = t945 + 6;
	stack[t946] = t944;
	t947 = H;
	H = H + 17;
	heap[t947] = 16;
	t948 = t947 + 1;
	heap[t948] = 69;
	t949 = t947 + 2;
	heap[t949] = 108;
	t950 = t947 + 3;
	heap[t950] = 32;
	t951 = t947 + 4;
	heap[t951] = 102;
	t952 = t947 + 5;
	heap[t952] = 97;
	t953 = t947 + 6;
	heap[t953] = 99;
	t954 = t947 + 7;
	heap[t954] = 116;
	t955 = t947 + 8;
	heap[t955] = 111;
	t956 = t947 + 9;
	heap[t956] = 114;
	t957 = t947 + 10;
	heap[t957] = 105;
	t958 = t947 + 11;
	heap[t958] = 97;
	t959 = t947 + 12;
	heap[t959] = 108;
	t960 = t947 + 13;
	heap[t960] = 32;
	t961 = t947 + 14;
	heap[t961] = 100;
	t962 = t947 + 15;
	heap[t962] = 101;
	t963 = t947 + 16;
	heap[t963] = 32;
	t964 = P - 0;
	t965 = t964 + 4;
	t966 = stack[t965];
	t967 = int_to_string t966;
	t968 = t947 strcat t967;
	t969 = H;
	H = H + 5;
	heap[t969] = 4;
	t970 = t969 + 1;
	heap[t970] = 32;
	t971 = t969 + 2;
	heap[t971] = 101;
	t972 = t969 + 3;
	heap[t972] = 115;
	t973 = t969 + 4;
	heap[t973] = 32;
	t974 = t968 strcat t969;
	t975 = P - 0;
	t976 = t975 + 5;
	t977 = stack[t976];
	t978 = int_to_string t977;
	t979 = t974 strcat t978;
	t980 = P + 7;
	t981 = t980 + 0;
	stack[t981] = t979;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t982 = H;
	H = H + 25;
	heap[t982] = 24;
	t983 = t982 + 1;
	heap[t983] = 70;
	t984 = t982 + 2;
	heap[t984] = 97;
	t985 = t982 + 3;
	heap[t985] = 99;
	t986 = t982 + 4;
	heap[t986] = 116;
	t987 = t982 + 5;
	heap[t987] = 111;
	t988 = t982 + 6;
	heap[t988] = 114;
	t989 = t982 + 7;
	heap[t989] = 105;
	t990 = t982 + 8;
	heap[t990] = 97;
	t991 = t982 + 9;
	heap[t991] = 108;
	t992 = t982 + 10;
	heap[t992] = 32;
	t993 = t982 + 11;
	heap[t993] = 114;
	t994 = t982 + 12;
	heap[t994] = 101;
	t995 = t982 + 13;
	heap[t995] = 99;
	t996 = t982 + 14;
	heap[t996] = 117;
	t997 = t982 + 15;
	heap[t997] = 114;
	t998 = t982 + 16;
	heap[t998] = 115;
	t999 = t982 + 17;
	heap[t999] = 105;
	t1000 = t982 + 18;
	heap[t1000] = 118;
	t1001 = t982 + 19;
	heap[t1001] = 111;
	t1002 = t982 + 20;
	heap[t1002] = 32;
	t1003 = t982 + 21;
	heap[t1003] = 100;
	t1004 = t982 + 22;
	heap[t1004] = 101;
	t1005 = t982 + 23;
	heap[t1005] = 44;
	t1006 = t982 + 24;
	heap[t1006] = 32;
	t1007 = P - 0;
	t1008 = t1007 + 4;
	t1009 = stack[t1008];
	t1010 = int_to_string t1009;
	t1011 = t982 strcat t1010;
	t1012 = H;
	H = H + 4;
	heap[t1012] = 3;
	t1013 = t1012 + 1;
	heap[t1013] = 32;
	t1014 = t1012 + 2;
	heap[t1014] = 61;
	t1015 = t1012 + 3;
	heap[t1015] = 32;
	t1016 = t1011 strcat t1012;
	t1017 = P - 0;
	t1018 = t1017 + 0;
	t1019 = stack[t1018];
	t1020 = P - 0;
	t1021 = t1020 + 4;
	t1022 = stack[t1021];
	t1023 = P + 7;
	t1024 = t1023 + 0;
	stack[t1024] = t1022;
	t1025 = t1023 + 1;
	stack[t1025] = t1019;
	P = P + 7;
	call Sierpinski_factorialRecursivo_int();
	t1026 = P + 2;
	t1027 = stack[t1026];
	P = P - 7;
	t1028 = int_to_string t1027;
	t1029 = t1016 strcat t1028;
	t1030 = P + 7;
	t1031 = t1030 + 0;
	stack[t1031] = t1029;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t1032 = P - 0;
	t1033 = t1032 + 6;
	t1034 = stack[t1033];
	t1035 = P + 7;
	t1036 = t1035 + 0;
	stack[t1036] = t1034;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t1037 = 2 / 3;
	t1038 = float_to_string t1037;
	t1039 = P + 7;
	t1040 = t1039 + 0;
	stack[t1040] = t1038;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t1041 = 2 / 3;
	t1042 = float_to_int t1041;
	t1043 = int_to_string t1042;
	t1044 = P + 7;
	t1045 = t1044 + 0;
	stack[t1045] = t1043;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t1046 = int_to_char 70;
	t1047 = char_to_string t1046;
	t1048 = P + 7;
	t1049 = t1048 + 0;
	stack[t1049] = t1047;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	t1050 = P - 0;
	t1051 = t1050 + 0;
	t1052 = stack[t1051];
	t1053 = P + 7;
	t1054 = t1053 + 0;
	stack[t1054] = t1052;
	P = P + 7;
	call Sierpinski_pruebaSwitch();
	P = P - 7;
	t1055 = 1 / 0;
	t1056 = float_to_string t1055;
	t1057 = P + 7;
	t1058 = t1057 + 0;
	stack[t1058] = t1056;
	P = P + 7;
	call Imprimir_string();
	P = P - 7;
	L13:

}
method Sierpinski_pruebaSwitch(){
	P = P + 2;
	t1059 = P - 0;
	t1060 = t1059 + 0;
	stack[t1060] = 0;
	L15:
	t1061 = P - 0;
	t1062 = t1061 + 0;
	t1063 = stack[t1062];
	if t1063 < 10 then goto L18;
	t1064 = 0;
	goto L19;
	L18:
	t1064 = 1;
	L19:
	if t1064 == 1 then goto L16;
	goto L17;
	L16:
	t1065 = P - 0;
	t1066 = t1065 + 0;
	t1067 = stack[t1066];
	if t1067 == 1 then goto L21;
	t1068 = 0;
	goto L22;
	L21:
	t1068 = 1;
	L22:
	if t1068 == 1 then goto L23;
	goto L24;
	L23:
	t1069 = H;
	H = H + 32;
	heap[t1069] = 31;
	t1070 = t1069 + 1;
	heap[t1070] = 80;
	t1071 = t1069 + 2;
	heap[t1071] = 114;
	t1072 = t1069 + 3;
	heap[t1072] = 117;
	t1073 = t1069 + 4;
	heap[t1073] = 101;
	t1074 = t1069 + 5;
	heap[t1074] = 98;
	t1075 = t1069 + 6;
	heap[t1075] = 97;
	t1076 = t1069 + 7;
	heap[t1076] = 32;
	t1077 = t1069 + 8;
	heap[t1077] = 115;
	t1078 = t1069 + 9;
	heap[t1078] = 119;
	t1079 = t1069 + 10;
	heap[t1079] = 105;
	t1080 = t1069 + 11;
	heap[t1080] = 116;
	t1081 = t1069 + 12;
	heap[t1081] = 99;
	t1082 = t1069 + 13;
	heap[t1082] = 104;
	t1083 = t1069 + 14;
	heap[t1083] = 32;
	t1084 = t1069 + 15;
	heap[t1084] = 45;
	t1085 = t1069 + 16;
	heap[t1085] = 32;
	t1086 = t1069 + 17;
	heap[t1086] = 69;
	t1087 = t1069 + 18;
	heap[t1087] = 110;
	t1088 = t1069 + 19;
	heap[t1088] = 116;
	t1089 = t1069 + 20;
	heap[t1089] = 114;
	t1090 = t1069 + 21;
	heap[t1090] = 97;
	t1091 = t1069 + 22;
	heap[t1091] = 32;
	t1092 = t1069 + 23;
	heap[t1092] = 101;
	t1093 = t1069 + 24;
	heap[t1093] = 110;
	t1094 = t1069 + 25;
	heap[t1094] = 32;
	t1095 = t1069 + 26;
	heap[t1095] = 99;
	t1096 = t1069 + 27;
	heap[t1096] = 97;
	t1097 = t1069 + 28;
	heap[t1097] = 115;
	t1098 = t1069 + 29;
	heap[t1098] = 101;
	t1099 = t1069 + 30;
	heap[t1099] = 32;
	t1100 = t1069 + 31;
	heap[t1100] = 49;
	t1101 = P + 1;
	t1102 = t1101 + 0;
	stack[t1102] = t1069;
	P = P + 1;
	call Imprimir_string();
	P = P - 1;
	goto L20;
	L24:
	t1103 = P - 0;
	t1104 = t1103 + 0;
	t1105 = stack[t1104];
	if t1105 == 2 then goto L25;
	t1106 = 0;
	goto L26;
	L25:
	t1106 = 1;
	L26:
	if t1106 == 1 then goto L27;
	goto L28;
	L27:
	t1107 = H;
	H = H + 32;
	heap[t1107] = 31;
	t1108 = t1107 + 1;
	heap[t1108] = 80;
	t1109 = t1107 + 2;
	heap[t1109] = 114;
	t1110 = t1107 + 3;
	heap[t1110] = 117;
	t1111 = t1107 + 4;
	heap[t1111] = 101;
	t1112 = t1107 + 5;
	heap[t1112] = 98;
	t1113 = t1107 + 6;
	heap[t1113] = 97;
	t1114 = t1107 + 7;
	heap[t1114] = 32;
	t1115 = t1107 + 8;
	heap[t1115] = 115;
	t1116 = t1107 + 9;
	heap[t1116] = 119;
	t1117 = t1107 + 10;
	heap[t1117] = 105;
	t1118 = t1107 + 11;
	heap[t1118] = 116;
	t1119 = t1107 + 12;
	heap[t1119] = 99;
	t1120 = t1107 + 13;
	heap[t1120] = 104;
	t1121 = t1107 + 14;
	heap[t1121] = 32;
	t1122 = t1107 + 15;
	heap[t1122] = 45;
	t1123 = t1107 + 16;
	heap[t1123] = 32;
	t1124 = t1107 + 17;
	heap[t1124] = 69;
	t1125 = t1107 + 18;
	heap[t1125] = 110;
	t1126 = t1107 + 19;
	heap[t1126] = 116;
	t1127 = t1107 + 20;
	heap[t1127] = 114;
	t1128 = t1107 + 21;
	heap[t1128] = 97;
	t1129 = t1107 + 22;
	heap[t1129] = 32;
	t1130 = t1107 + 23;
	heap[t1130] = 101;
	t1131 = t1107 + 24;
	heap[t1131] = 110;
	t1132 = t1107 + 25;
	heap[t1132] = 32;
	t1133 = t1107 + 26;
	heap[t1133] = 99;
	t1134 = t1107 + 27;
	heap[t1134] = 97;
	t1135 = t1107 + 28;
	heap[t1135] = 115;
	t1136 = t1107 + 29;
	heap[t1136] = 101;
	t1137 = t1107 + 30;
	heap[t1137] = 32;
	t1138 = t1107 + 31;
	heap[t1138] = 50;
	t1139 = P + 1;
	t1140 = t1139 + 0;
	stack[t1140] = t1107;
	P = P + 1;
	call Imprimir_string();
	P = P - 1;
	goto L20;
	L28:
	t1141 = H;
	H = H + 33;
	heap[t1141] = 32;
	t1142 = t1141 + 1;
	heap[t1142] = 80;
	t1143 = t1141 + 2;
	heap[t1143] = 114;
	t1144 = t1141 + 3;
	heap[t1144] = 117;
	t1145 = t1141 + 4;
	heap[t1145] = 101;
	t1146 = t1141 + 5;
	heap[t1146] = 98;
	t1147 = t1141 + 6;
	heap[t1147] = 97;
	t1148 = t1141 + 7;
	heap[t1148] = 32;
	t1149 = t1141 + 8;
	heap[t1149] = 115;
	t1150 = t1141 + 9;
	heap[t1150] = 119;
	t1151 = t1141 + 10;
	heap[t1151] = 105;
	t1152 = t1141 + 11;
	heap[t1152] = 116;
	t1153 = t1141 + 12;
	heap[t1153] = 99;
	t1154 = t1141 + 13;
	heap[t1154] = 104;
	t1155 = t1141 + 14;
	heap[t1155] = 32;
	t1156 = t1141 + 15;
	heap[t1156] = 45;
	t1157 = t1141 + 16;
	heap[t1157] = 32;
	t1158 = t1141 + 17;
	heap[t1158] = 69;
	t1159 = t1141 + 18;
	heap[t1159] = 110;
	t1160 = t1141 + 19;
	heap[t1160] = 116;
	t1161 = t1141 + 20;
	heap[t1161] = 114;
	t1162 = t1141 + 21;
	heap[t1162] = 97;
	t1163 = t1141 + 22;
	heap[t1163] = 32;
	t1164 = t1141 + 23;
	heap[t1164] = 101;
	t1165 = t1141 + 24;
	heap[t1165] = 110;
	t1166 = t1141 + 25;
	heap[t1166] = 32;
	t1167 = t1141 + 26;
	heap[t1167] = 100;
	t1168 = t1141 + 27;
	heap[t1168] = 101;
	t1169 = t1141 + 28;
	heap[t1169] = 102;
	t1170 = t1141 + 29;
	heap[t1170] = 97;
	t1171 = t1141 + 30;
	heap[t1171] = 117;
	t1172 = t1141 + 31;
	heap[t1172] = 108;
	t1173 = t1141 + 32;
	heap[t1173] = 116;
	t1174 = P + 1;
	t1175 = t1174 + 0;
	stack[t1175] = t1141;
	P = P + 1;
	call Imprimir_string();
	P = P - 1;
	goto L20;
	L20:
	t1176 = P - 0;
	t1177 = t1176 + 0;
	t1178 = stack[t1177];
	t1179 = t1178 + 1;
	t1180 = P - 0;
	t1181 = t1180 + 0;
	stack[t1181] = t1179;
	goto L15;
	L17:
	P = P - 2;
	L14:

}
method Sierpinski_setCanvas_Canvas(){
	t1182 = P - 0;
	t1183 = t1182 + 0;
	t1184 = stack[t1183];
	t1185 = P + 3;
	t1186 = t1185 + 0;
	stack[t1186] = t1184;
	P = P + 3;
	call Canvas_getAlto();
	t1187 = P + 1;
	t1188 = stack[t1187];
	P = P - 3;
	t1189 = P - 0;
	t1190 = t1189 + 0;
	t1191 = stack[t1190];
	t1192 = P + 3;
	t1193 = t1192 + 0;
	stack[t1193] = t1191;
	P = P + 3;
	call Canvas_getAncho();
	t1194 = P + 1;
	t1195 = stack[t1194];
	P = P - 3;
	t1196 = P - 0;
	t1197 = t1196 + 0;
	t1198 = stack[t1197];
	t1199 = t1198 + 2;
	t1200 = heap[t1199];
	t1201 = heap[t1200];
	t1202 = t1201 + 1;
	t1203 = t1202 + t1200;
	t1204 = 0;
	t1205 = t1204 + t1203;
	t1206 = heap[t1205];
	t1207 = P - 0;
	t1208 = t1207 + 0;
	t1209 = stack[t1208];
	t1210 = t1209 + 2;
	t1211 = heap[t1210];
	t1212 = heap[t1211];
	t1213 = t1212 + 1;
	t1214 = t1213 + t1211;
	t1215 = 1;
	t1216 = t1215 + t1214;
	t1217 = heap[t1216];
	t1218 = P - 0;
	t1219 = t1218 + 0;
	t1220 = stack[t1219];
	t1221 = t1220 + 2;
	t1222 = heap[t1221];
	t1223 = heap[t1222];
	t1224 = t1223 + 1;
	t1225 = t1224 + t1222;
	t1226 = 2;
	t1227 = t1226 + t1225;
	t1228 = heap[t1227];
	t1229 = P + 3;
	t1230 = t1229 + 0;
	stack[t1230] = t1188;
	t1231 = t1229 + 1;
	stack[t1231] = t1195;
	t1232 = t1229 + 2;
	stack[t1232] = t1206;
	t1233 = t1229 + 3;
	stack[t1233] = t1217;
	t1234 = t1229 + 4;
	stack[t1234] = t1228;
	P = P + 3;
	call Lienzo_int_int_int_int_int();
	P = P - 3;
	L29:

}
method Sierpinski_setCanvas_int_int_int_int_int(){
	t1235 = P - 0;
	t1236 = t1235 + 0;
	t1237 = stack[t1236];
	t1238 = P - 0;
	t1239 = t1238 + 1;
	t1240 = stack[t1239];
	t1241 = P - 0;
	t1242 = t1241 + 2;
	t1243 = stack[t1242];
	t1244 = P - 0;
	t1245 = t1244 + 3;
	t1246 = stack[t1245];
	t1247 = P - 0;
	t1248 = t1247 + 4;
	t1249 = stack[t1248];
	t1250 = P + 7;
	t1251 = t1250 + 0;
	stack[t1251] = t1237;
	t1252 = t1250 + 1;
	stack[t1252] = t1240;
	t1253 = t1250 + 2;
	stack[t1253] = t1243;
	t1254 = t1250 + 3;
	stack[t1254] = t1246;
	t1255 = t1250 + 4;
	stack[t1255] = t1249;
	P = P + 7;
	call Lienzo_int_int_int_int_int();
	P = P - 7;
	L30:

}
method Sierpinski_pruebaFor(){
	t1256 = H;
	H = H + 13;
	heap[t1256] = 12;
	t1257 = t1256 + 1;
	heap[t1257] = 73;
	t1258 = t1256 + 2;
	heap[t1258] = 110;
	t1259 = t1256 + 3;
	heap[t1259] = 105;
	t1260 = t1256 + 4;
	heap[t1260] = 99;
	t1261 = t1256 + 5;
	heap[t1261] = 105;
	t1262 = t1256 + 6;
	heap[t1262] = 97;
	t1263 = t1256 + 7;
	heap[t1263] = 32;
	t1264 = t1256 + 8;
	heap[t1264] = 99;
	t1265 = t1256 + 9;
	heap[t1265] = 105;
	t1266 = t1256 + 10;
	heap[t1266] = 99;
	t1267 = t1256 + 11;
	heap[t1267] = 108;
	t1268 = t1256 + 12;
	heap[t1268] = 111;
	t1269 = P + 2;
	t1270 = t1269 + 0;
	stack[t1270] = t1256;
	P = P + 2;
	call Imprimir_string();
	P = P - 2;
	P = P + 2;
	t1271 = P - 0;
	t1272 = t1271 + 0;
	stack[t1272] = 0;
	L32:
	t1273 = P - 0;
	t1274 = t1273 + 0;
	t1275 = stack[t1274];
	if t1275 < 20 then goto L35;
	t1276 = 0;
	goto L36;
	L35:
	t1276 = 1;
	L36:
	if t1276 == 1 then goto L33;
	goto L34;
	L33:
	t1277 = P - 0;
	t1278 = t1277 + 0;
	t1279 = stack[t1278];
	if t1279 > 5 then goto L37;
	t1280 = 0;
	goto L38;
	L37:
	t1280 = 1;
	L38:
	t1281 = P - 0;
	t1282 = t1281 + 0;
	t1283 = stack[t1282];
	if t1283 <= 9 then goto L39;
	t1284 = 0;
	goto L40;
	L39:
	t1284 = 1;
	L40:
	if t1280 == 1 then goto L41;
	goto L43;
	L41:
	if t1284 == 1 then goto L42;
	goto L43;
	L42:
	t1285 = 1;
	goto L44;
	L43:
	t1285 = 0;
	L44:
	if t1285 == 1 then goto L45;
	goto L46;
	L45:
	P = P + 1;
	t1286 = P - 1;
	t1287 = t1286 + 0;
	t1288 = stack[t1287];
	t1289 = int_to_string t1288;
	t1290 = H;
	H = H + 38;
	heap[t1290] = 37;
	t1291 = t1290 + 1;
	heap[t1291] = 32;
	t1292 = t1290 + 2;
	heap[t1292] = 101;
	t1293 = t1290 + 3;
	heap[t1293] = 115;
	t1294 = t1290 + 4;
	heap[t1294] = 32;
	t1295 = t1290 + 5;
	heap[t1295] = 109;
	t1296 = t1290 + 6;
	heap[t1296] = 97;
	t1297 = t1290 + 7;
	heap[t1297] = 121;
	t1298 = t1290 + 8;
	heap[t1298] = 111;
	t1299 = t1290 + 9;
	heap[t1299] = 114;
	t1300 = t1290 + 10;
	heap[t1300] = 32;
	t1301 = t1290 + 11;
	heap[t1301] = 113;
	t1302 = t1290 + 12;
	heap[t1302] = 117;
	t1303 = t1290 + 13;
	heap[t1303] = 101;
	t1304 = t1290 + 14;
	heap[t1304] = 32;
	t1305 = t1290 + 15;
	heap[t1305] = 53;
	t1306 = t1290 + 16;
	heap[t1306] = 32;
	t1307 = t1290 + 17;
	heap[t1307] = 121;
	t1308 = t1290 + 18;
	heap[t1308] = 32;
	t1309 = t1290 + 19;
	heap[t1309] = 109;
	t1310 = t1290 + 20;
	heap[t1310] = 101;
	t1311 = t1290 + 21;
	heap[t1311] = 110;
	t1312 = t1290 + 22;
	heap[t1312] = 111;
	t1313 = t1290 + 23;
	heap[t1313] = 114;
	t1314 = t1290 + 24;
	heap[t1314] = 32;
	t1315 = t1290 + 25;
	heap[t1315] = 111;
	t1316 = t1290 + 26;
	heap[t1316] = 32;
	t1317 = t1290 + 27;
	heap[t1317] = 105;
	t1318 = t1290 + 28;
	heap[t1318] = 103;
	t1319 = t1290 + 29;
	heap[t1319] = 117;
	t1320 = t1290 + 30;
	heap[t1320] = 97;
	t1321 = t1290 + 31;
	heap[t1321] = 108;
	t1322 = t1290 + 32;
	heap[t1322] = 32;
	t1323 = t1290 + 33;
	heap[t1323] = 113;
	t1324 = t1290 + 34;
	heap[t1324] = 117;
	t1325 = t1290 + 35;
	heap[t1325] = 101;
	t1326 = t1290 + 36;
	heap[t1326] = 32;
	t1327 = t1290 + 37;
	heap[t1327] = 57;
	t1328 = t1289 strcat t1290;
	t1329 = P + 0;
	t1330 = t1329 + 0;
	stack[t1330] = t1328;
	P = P + 0;
	call Imprimir_string();
	P = P - 0;
	P = P - 1;
	goto L47;
	L46:
	t1331 = P - 0;
	t1332 = t1331 + 0;
	t1333 = stack[t1332];
	if t1333 == 5 then goto L48;
	t1334 = 0;
	goto L49;
	L48:
	t1334 = 1;
	L49:
	t1335 = P - 0;
	t1336 = t1335 + 0;
	t1337 = stack[t1336];
	if t1337 < 5 then goto L50;
	t1338 = 0;
	goto L51;
	L50:
	t1338 = 1;
	L51:
	if t1334 == 1 then goto L54;
	goto L52;
	L52:
	if t1338 == 1 then goto L54;
	goto L53;
	L53:
	t1339 = 0;
	goto L55;
	L54:
	t1339 = 1;
	L55:
	if t1339 == 1 then goto L56;
	goto L57;
	L56:
	P = P + 1;
	t1340 = P - 1;
	t1341 = t1340 + 0;
	t1342 = stack[t1341];
	t1343 = int_to_string t1342;
	t1344 = H;
	H = H + 22;
	heap[t1344] = 21;
	t1345 = t1344 + 1;
	heap[t1345] = 32;
	t1346 = t1344 + 2;
	heap[t1346] = 101;
	t1347 = t1344 + 3;
	heap[t1347] = 115;
	t1348 = t1344 + 4;
	heap[t1348] = 32;
	t1349 = t1344 + 5;
	heap[t1349] = 105;
	t1350 = t1344 + 6;
	heap[t1350] = 103;
	t1351 = t1344 + 7;
	heap[t1351] = 117;
	t1352 = t1344 + 8;
	heap[t1352] = 97;
	t1353 = t1344 + 9;
	heap[t1353] = 108;
	t1354 = t1344 + 10;
	heap[t1354] = 32;
	t1355 = t1344 + 11;
	heap[t1355] = 111;
	t1356 = t1344 + 12;
	heap[t1356] = 32;
	t1357 = t1344 + 13;
	heap[t1357] = 109;
	t1358 = t1344 + 14;
	heap[t1358] = 101;
	t1359 = t1344 + 15;
	heap[t1359] = 110;
	t1360 = t1344 + 16;
	heap[t1360] = 111;
	t1361 = t1344 + 17;
	heap[t1361] = 114;
	t1362 = t1344 + 18;
	heap[t1362] = 32;
	t1363 = t1344 + 19;
	heap[t1363] = 97;
	t1364 = t1344 + 20;
	heap[t1364] = 32;
	t1365 = t1344 + 21;
	heap[t1365] = 53;
	t1366 = t1343 strcat t1344;
	t1367 = P + 0;
	t1368 = t1367 + 0;
	stack[t1368] = t1366;
	P = P + 0;
	call Imprimir_string();
	P = P - 0;
	P = P - 1;
	goto L58;
	L57:
	P = P + 1;
	t1369 = P - 1;
	t1370 = t1369 + 0;
	t1371 = stack[t1370];
	t1372 = int_to_string t1371;
	t1373 = H;
	H = H + 16;
	heap[t1373] = 15;
	t1374 = t1373 + 1;
	heap[t1374] = 32;
	t1375 = t1373 + 2;
	heap[t1375] = 101;
	t1376 = t1373 + 3;
	heap[t1376] = 115;
	t1377 = t1373 + 4;
	heap[t1377] = 32;
	t1378 = t1373 + 5;
	heap[t1378] = 109;
	t1379 = t1373 + 6;
	heap[t1379] = 97;
	t1380 = t1373 + 7;
	heap[t1380] = 121;
	t1381 = t1373 + 8;
	heap[t1381] = 111;
	t1382 = t1373 + 9;
	heap[t1382] = 114;
	t1383 = t1373 + 10;
	heap[t1383] = 32;
	t1384 = t1373 + 11;
	heap[t1384] = 113;
	t1385 = t1373 + 12;
	heap[t1385] = 117;
	t1386 = t1373 + 13;
	heap[t1386] = 101;
	t1387 = t1373 + 14;
	heap[t1387] = 32;
	t1388 = t1373 + 15;
	heap[t1388] = 57;
	t1389 = t1372 strcat t1373;
	t1390 = P + 0;
	t1391 = t1390 + 0;
	stack[t1391] = t1389;
	P = P + 0;
	call Imprimir_string();
	P = P - 0;
	P = P - 1;
	goto L58;
	L58:
	L47:
	t1392 = P - 0;
	t1393 = t1392 + 0;
	t1394 = stack[t1393];
	if t1394 == 19 then goto L59;
	t1395 = 0;
	goto L60;
	L59:
	t1395 = 1;
	L60:
	t1396 = H;
	H = H + 18;
	heap[t1396] = 17;
	t1397 = t1396 + 1;
	heap[t1397] = 83;
	t1398 = t1396 + 2;
	heap[t1398] = 101;
	t1399 = t1396 + 3;
	heap[t1399] = 32;
	t1400 = t1396 + 4;
	heap[t1400] = 97;
	t1401 = t1396 + 5;
	heap[t1401] = 99;
	t1402 = t1396 + 6;
	heap[t1402] = 97;
	t1403 = t1396 + 7;
	heap[t1403] = 98;
	t1404 = t1396 + 8;
	heap[t1404] = 111;
	t1405 = t1396 + 9;
	heap[t1405] = 32;
	t1406 = t1396 + 10;
	heap[t1406] = 101;
	t1407 = t1396 + 11;
	heap[t1407] = 108;
	t1408 = t1396 + 12;
	heap[t1408] = 32;
	t1409 = t1396 + 13;
	heap[t1409] = 99;
	t1410 = t1396 + 14;
	heap[t1410] = 105;
	t1411 = t1396 + 15;
	heap[t1411] = 99;
	t1412 = t1396 + 16;
	heap[t1412] = 108;
	t1413 = t1396 + 17;
	heap[t1413] = 111;
	t1414 = H;
	H = H + 10;
	heap[t1414] = 9;
	t1415 = t1414 + 1;
	heap[t1415] = 83;
	t1416 = t1414 + 2;
	heap[t1416] = 105;
	t1417 = t1414 + 3;
	heap[t1417] = 103;
	t1418 = t1414 + 4;
	heap[t1418] = 117;
	t1419 = t1414 + 5;
	heap[t1419] = 105;
	t1420 = t1414 + 6;
	heap[t1420] = 101;
	t1421 = t1414 + 7;
	heap[t1421] = 110;
	t1422 = t1414 + 8;
	heap[t1422] = 116;
	t1423 = t1414 + 9;
	heap[t1423] = 101;
	if t1395 == 1 then goto L61;
	goto L62;
	L61:
	t1424 = t1396;
	goto L63;
	L62:
	t1424 = t1414;
	L63:
	t1425 = P + 1;
	t1426 = t1425 + 0;
	stack[t1426] = t1424;
	P = P + 1;
	call Imprimir_string();
	P = P - 1;
	t1427 = P - 0;
	t1428 = t1427 + 0;
	t1429 = stack[t1428];
	t1430 = t1429 + 1;
	t1431 = P - 0;
	t1432 = t1431 + 0;
	stack[t1432] = t1430;
	goto L32;
	L34:
	P = P - 2;
	L31:

}
method Sierpinski_factorial_int(){
	t1433 = P - 0;
	t1434 = t1433 + 3;
	stack[t1434] = 1;
	t1435 = P - 0;
	t1436 = t1435 + 0;
	t1437 = stack[t1436];
	if t1437 > 0 then goto L65;
	t1438 = 0;
	goto L66;
	L65:
	t1438 = 1;
	L66:
	if t1438 == 1 then goto L67;
	goto L68;
	L67:
	P = P + 4;
	L70:
	t1439 = P - 4;
	t1440 = t1439 + 0;
	t1441 = stack[t1440];
	if t1441 > 0 then goto L73;
	t1442 = 0;
	goto L74;
	L73:
	t1442 = 1;
	L74:
	if t1442 == 1 then goto L71;
	goto L72;
	L71:
	P = P + 0;
	t1443 = P - 4;
	t1444 = t1443 + 3;
	t1445 = stack[t1444];
	t1446 = P - 4;
	t1447 = t1446 + 0;
	t1448 = stack[t1447];
	t1449 = t1445 * t1448;
	t1450 = P - 4;
	t1451 = t1450 + 3;
	stack[t1451] = t1449;
	t1452 = P - 4;
	t1453 = t1452 + 0;
	t1454 = stack[t1453];
	t1455 = t1454 - 1;
	t1456 = P - 4;
	t1457 = t1456 + 0;
	stack[t1457] = t1455;
	P = P - 0;
	goto L70;
	L72:
	P = P - 0;
	P = P - 4;
	goto L69;
	L68:
	L69:
	t1458 = P - 0;
	t1459 = t1458 + 3;
	t1460 = stack[t1459];
	t1461 = P - 0;
	t1462 = t1461 + 2;
	stack[t1462] = t1460;
	goto L64;
	L64:

}
method Sierpinski_factorialRecursivo_int(){
	t1463 = P - 0;
	t1464 = t1463 + 0;
	t1465 = stack[t1464];
	if t1465 < 1 then goto L76;
	t1466 = 0;
	goto L77;
	L76:
	t1466 = 1;
	L77:
	if t1466 == 1 then goto L78;
	goto L79;
	L78:
	P = P + 4;
	t1467 = P - 4;
	t1468 = t1467 + 3;
	stack[t1468] = 1;
	P = P - 4;
	goto L80;
	L79:
	P = P + 4;
	t1469 = P - 4;
	t1470 = t1469 + 1;
	t1471 = stack[t1470];
	t1472 = P - 4;
	t1473 = t1472 + 0;
	t1474 = stack[t1473];
	t1475 = t1474 - 1;
	t1476 = P + 0;
	t1477 = t1476 + 0;
	stack[t1477] = t1475;
	t1478 = t1476 + 1;
	stack[t1478] = t1471;
	P = P + 0;
	call Sierpinski_factorialRecursivo_int();
	t1479 = P + 2;
	t1480 = stack[t1479];
	P = P - 0;
	t1481 = P - 4;
	t1482 = t1481 + 0;
	t1483 = stack[t1482];
	t1484 = t1480 * t1483;
	t1485 = P - 4;
	t1486 = t1485 + 3;
	stack[t1486] = t1484;
	P = P - 4;
	goto L80;
	L80:
	t1487 = P - 0;
	t1488 = t1487 + 3;
	t1489 = stack[t1488];
	t1490 = P - 0;
	t1491 = t1490 + 2;
	stack[t1491] = t1489;
	goto L75;
	L75:

}
method Sierpinski_fibonacci_int(){
	t1492 = H;
	H = H + 7;
	heap[t1492] = 6;
	t1493 = t1492 + 1;
	heap[t1493] = 32;
	t1494 = t1492 + 2;
	heap[t1494] = 61;
	t1495 = t1492 + 3;
	heap[t1495] = 32;
	t1496 = t1492 + 4;
	heap[t1496] = 123;
	t1497 = t1492 + 5;
	heap[t1497] = 32;
	t1498 = t1492 + 6;
	heap[t1498] = 49;
	t1499 = P - 0;
	t1500 = t1499 + 3;
	stack[t1500] = t1492;
	t1501 = P - 0;
	t1502 = t1501 + 4;
	stack[t1502] = 1;
	t1503 = P - 0;
	t1504 = t1503 + 5;
	stack[t1504] = 0;
	t1505 = P - 0;
	t1506 = t1505 + 6;
	stack[t1506] = 0;
	L82:
	P = P + 7;
	t1507 = P - 7;
	t1508 = t1507 + 4;
	t1509 = stack[t1508];
	t1510 = P - 7;
	t1511 = t1510 + 6;
	t1512 = stack[t1511];
	t1513 = t1509 + t1512;
	t1514 = P - 7;
	t1515 = t1514 + 5;
	stack[t1515] = t1513;
	t1516 = P - 7;
	t1517 = t1516 + 3;
	t1518 = stack[t1517];
	t1519 = H;
	H = H + 3;
	heap[t1519] = 2;
	t1520 = t1519 + 1;
	heap[t1520] = 44;
	t1521 = t1519 + 2;
	heap[t1521] = 32;
	t1522 = t1518 strcat t1519;
	t1523 = P - 7;
	t1524 = t1523 + 5;
	t1525 = stack[t1524];
	t1526 = int_to_string t1525;
	t1527 = t1522 strcat t1526;
	t1528 = P - 7;
	t1529 = t1528 + 3;
	stack[t1529] = t1527;
	t1530 = P - 7;
	t1531 = t1530 + 4;
	t1532 = stack[t1531];
	t1533 = P - 7;
	t1534 = t1533 + 6;
	stack[t1534] = t1532;
	t1535 = P - 7;
	t1536 = t1535 + 5;
	t1537 = stack[t1536];
	t1538 = P - 7;
	t1539 = t1538 + 4;
	stack[t1539] = t1537;
	P = P - 7;
	t1540 = P - 0;
	t1541 = t1540 + 5;
	t1542 = stack[t1541];
	t1543 = P - 0;
	t1544 = t1543 + 0;
	t1545 = stack[t1544];
	if t1542 < t1545 then goto L84;
	t1546 = 0;
	goto L85;
	L84:
	t1546 = 1;
	L85:
	if t1546 == 1 then goto L82;
	goto L83;
	L83:
	t1547 = P - 0;
	t1548 = t1547 + 3;
	t1549 = stack[t1548];
	t1550 = H;
	H = H + 2;
	heap[t1550] = 1;
	t1551 = t1550 + 1;
	heap[t1551] = 125;
	t1552 = t1549 strcat t1550;
	t1553 = P - 0;
	t1554 = t1553 + 2;
	stack[t1554] = t1552;
	goto L81;
	L81:

}
