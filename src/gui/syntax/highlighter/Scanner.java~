/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/* ---==: Codigo de usuario :==---*/
package gui.syntax.highlighter;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\2\1\65\1\64\1\64\22\0\1\64\1\17\1\1"+
    "\1\3\2\0\1\20\1\11\1\3\1\3\1\15\1\22\1\24\1\23"+
    "\1\6\1\14\12\12\1\25\1\5\1\4\1\16\1\10\1\26\1\0"+
    "\1\45\1\40\1\43\1\47\1\46\1\57\1\61\1\54\1\30\1\13"+
    "\1\56\1\41\1\31\1\60\1\33\1\32\1\13\1\35\1\52\1\36"+
    "\1\37\1\44\1\53\1\62\1\50\1\63\1\3\1\0\1\3\1\25"+
    "\1\13\1\5\1\45\1\40\1\42\1\47\1\46\1\7\1\61\1\54"+
    "\1\30\1\13\1\56\1\41\1\31\1\60\1\33\1\32\1\13\1\34"+
    "\1\52\1\36\1\37\1\44\1\53\1\62\1\50\1\63\1\3\1\21"+
    "\1\3\7\0\1\65\56\0\1\5\15\0\1\5\155\0\2\27\115\0"+
    "\1\51\u1ea8\0\1\65\1\65\u0100\0\1\55\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\4\1\1"+
    "\1\6\1\5\2\4\1\3\1\4\1\1\3\4\1\1"+
    "\14\5\1\1\3\5\1\0\1\7\2\0\1\4\3\5"+
    "\2\0\1\10\1\0\1\11\2\0\1\11\13\5\1\0"+
    "\11\5\2\0\5\5\1\12\1\5\1\6\3\0\1\13"+
    "\1\5\1\13\1\5\1\0\11\5\2\0\4\5\1\0"+
    "\1\5\1\0\5\5\3\0\3\5\1\0\2\5\1\0"+
    "\1\10\2\0\2\5\1\0\1\5\1\0\5\5\2\0"+
    "\3\5\1\0\4\5\3\0\2\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\3\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\2\5\2\0\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\66\0\242\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u010e\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\66\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\154\0\66\0\u06c0\0\u06f6"+
    "\0\u06c0\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\66\0\u08a6\0\u08dc\0\u01b0\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\66\0\u0efa\0\u0804\0\u0f30\0\u0f66\0\u0f9c\0\66\0\u0fd2"+
    "\0\u01b0\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\66\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\10"+
    "\1\17\1\20\1\21\1\22\1\5\2\23\1\24\1\25"+
    "\1\13\1\26\1\27\2\30\1\31\1\13\1\32\1\33"+
    "\2\34\1\35\1\36\1\37\1\40\1\13\1\41\1\42"+
    "\1\43\1\13\1\2\1\13\1\7\1\44\3\13\1\4"+
    "\67\0\1\45\2\46\63\45\2\47\1\0\2\47\1\0"+
    "\2\50\2\0\4\47\1\51\5\47\2\0\6\47\1\50"+
    "\5\47\1\50\23\47\7\0\1\13\2\0\2\13\14\0"+
    "\3\13\1\52\5\13\1\53\3\13\1\54\3\13\1\0"+
    "\3\13\1\0\6\13\20\0\1\23\47\0\2\55\1\0"+
    "\6\55\1\0\54\55\6\0\1\56\3\0\1\12\62\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\6\13\16\0\1\57\1\60\1\5\65\0\1\5\67\0"+
    "\1\23\66\0\1\23\62\0\1\5\3\0\1\23\61\0"+
    "\1\5\4\0\1\23\51\0\1\61\21\0\1\62\25\0"+
    "\1\61\1\63\14\0\1\64\2\0\2\13\14\0\1\13"+
    "\1\65\17\13\1\0\3\13\1\0\1\13\1\64\1\66"+
    "\3\13\11\0\1\13\2\0\2\13\14\0\3\13\1\67"+
    "\2\70\1\13\1\71\11\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\14\13\1\72\4\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\16\13\1\73\2\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\4\13\2\74\10\13"+
    "\1\75\2\13\1\0\3\13\1\0\6\13\11\0\1\13"+
    "\2\0\2\13\14\0\3\13\1\76\2\77\13\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\13\0"+
    "\1\100\1\101\20\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\3\13\1\102\5\13\1\103"+
    "\3\13\1\104\3\13\1\0\2\13\1\105\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\3\13\1\106\15\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\4\13\2\107\13\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\11\13\1\104\7\13"+
    "\1\0\3\13\1\0\4\13\1\110\1\13\11\0\1\13"+
    "\2\0\2\13\14\0\3\13\1\64\12\13\1\111\2\13"+
    "\1\0\3\13\1\0\6\13\40\0\1\112\14\0\1\113"+
    "\21\0\1\13\2\0\2\13\14\0\6\13\1\114\12\13"+
    "\1\0\1\13\1\115\1\13\1\0\6\13\11\0\1\13"+
    "\2\0\2\13\14\0\21\13\1\0\2\13\1\116\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\7\13\1\117"+
    "\6\13\1\120\2\13\1\0\3\13\1\0\6\13\2\0"+
    "\2\47\1\0\2\47\1\0\2\50\2\0\12\47\2\0"+
    "\6\47\1\50\5\47\1\50\25\47\1\121\2\47\1\0"+
    "\2\50\1\121\1\0\12\47\2\0\6\47\1\50\5\47"+
    "\1\50\23\47\7\0\1\13\2\0\2\13\14\0\4\13"+
    "\2\64\13\13\1\0\3\13\1\0\6\13\11\0\1\13"+
    "\2\0\2\13\14\0\3\13\1\122\15\13\1\0\3\13"+
    "\1\0\6\13\11\0\1\13\2\0\2\13\14\0\11\13"+
    "\1\104\7\13\1\0\3\13\1\0\6\13\4\0\1\46"+
    "\6\0\1\46\66\0\1\123\53\0\2\57\1\0\63\57"+
    "\15\124\1\125\50\124\32\0\1\126\71\0\1\127\36\0"+
    "\1\13\2\0\2\13\14\0\2\13\1\130\16\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\14\0"+
    "\6\13\1\131\12\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\11\13\1\132\7\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\13\0"+
    "\1\133\1\134\20\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\10\13\1\135\10\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\14\0"+
    "\15\13\1\136\3\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\6\13\1\137\3\13\2\140"+
    "\5\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\7\13\1\141\11\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\21\13\1\0"+
    "\3\13\1\0\4\13\1\142\1\13\11\0\1\13\2\0"+
    "\2\13\14\0\3\13\1\143\15\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\16\13\1\144"+
    "\2\13\1\0\3\13\1\0\6\13\50\0\1\145\11\0"+
    "\1\146\14\0\1\13\2\0\2\13\14\0\16\13\1\147"+
    "\2\13\1\0\3\13\1\0\2\13\1\150\3\13\11\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\2\13\1\151\3\13\11\0\1\13\2\0\2\13\14\0"+
    "\15\13\1\152\3\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\153\1\141\2\13"+
    "\1\0\6\13\11\0\1\13\2\0\2\13\14\0\15\13"+
    "\1\154\3\13\1\0\3\13\1\0\6\13\11\0\1\13"+
    "\2\0\2\13\13\0\1\155\1\156\20\13\1\0\3\13"+
    "\1\0\6\13\11\0\1\13\2\0\2\13\14\0\4\13"+
    "\2\157\4\13\2\160\5\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\6\13\1\161\12\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\162\2\0\2\13"+
    "\14\0\21\13\1\0\3\13\1\0\1\13\1\162\4\13"+
    "\36\0\2\163\7\0\1\164\47\0\2\165\44\0\1\13"+
    "\2\0\2\13\14\0\4\13\2\166\7\13\1\167\3\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\13\0\1\165\1\170\20\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\13\0\1\171\1\172\20\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\11\13\1\173\7\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\21\13\1\0\1\13"+
    "\1\64\1\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\15\13\1\66\3\13\1\0\3\13\1\0\6\13"+
    "\2\0\15\124\1\174\50\124\14\0\1\175\1\125\103\0"+
    "\1\176\2\177\37\0\1\13\2\0\2\13\14\0\3\13"+
    "\1\200\2\201\13\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\13\0\1\202\1\203\20\13\1\0"+
    "\3\13\1\0\6\13\46\0\1\204\30\0\1\13\2\0"+
    "\2\13\14\0\14\13\1\205\4\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\11\13\1\206"+
    "\7\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\11\13\1\160\7\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\7\13\1\207"+
    "\11\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\6\13\1\210\12\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\16\13\1\64"+
    "\2\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\6\13\1\160\12\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\11\13\1\131"+
    "\7\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\15\13\1\211\3\13\1\0\3\13\1\0"+
    "\6\13\62\0\1\212\53\0\1\213\26\0\1\13\2\0"+
    "\2\13\14\0\21\13\1\0\3\13\1\0\2\13\1\214"+
    "\3\13\11\0\1\13\2\0\2\13\14\0\16\13\1\215"+
    "\2\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\6\13\1\216\12\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\21\13\1\217"+
    "\1\220\2\13\1\0\6\13\50\0\1\61\26\0\1\13"+
    "\2\0\2\13\14\0\4\13\2\131\13\13\1\0\3\13"+
    "\1\0\6\13\51\0\1\61\25\0\1\13\2\0\2\13"+
    "\14\0\17\13\1\64\1\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\15\13\1\221\3\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\3\13\1\64\15\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\16\13\1\222\2\13"+
    "\1\0\3\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\15\13\1\223\3\13\1\0\3\13\1\0\6\13"+
    "\31\0\2\224\73\0\1\225\65\0\1\226\36\0\1\13"+
    "\2\0\2\13\13\0\1\224\1\227\20\13\1\0\3\13"+
    "\1\0\6\13\11\0\1\13\2\0\2\13\14\0\6\13"+
    "\1\206\12\13\1\0\3\13\1\0\6\13\11\0\1\13"+
    "\2\0\2\13\14\0\6\13\1\230\12\13\1\0\3\13"+
    "\1\0\6\13\43\0\1\153\33\0\1\13\2\0\2\13"+
    "\14\0\11\13\1\141\7\13\1\0\3\13\1\0\6\13"+
    "\11\0\1\13\2\0\2\13\14\0\11\13\1\64\7\13"+
    "\1\0\3\13\1\0\6\13\2\0\14\124\1\175\1\174"+
    "\50\124\34\0\2\231\57\0\2\232\44\0\1\13\2\0"+
    "\2\13\14\0\4\13\2\233\13\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\13\0\1\232\1\234"+
    "\20\13\1\0\3\13\1\0\6\13\63\0\1\235\13\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\3\13\1\236\2\13\47\0\1\237\27\0\1\13\2\0"+
    "\2\13\14\0\15\13\1\240\3\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\13\0\1\241\1\242"+
    "\20\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\4\13\2\243\13\13\1\0\3\13\1\0"+
    "\6\13\11\0\1\13\2\0\2\13\14\0\15\13\1\244"+
    "\3\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\21\13\1\0\3\13\1\61\1\64\5\13"+
    "\65\0\1\245\47\0\1\61\27\0\1\13\2\0\2\13"+
    "\14\0\21\13\1\0\3\13\1\0\5\13\1\160\11\0"+
    "\1\13\2\0\2\13\14\0\15\13\1\64\3\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\13\0"+
    "\1\246\1\247\20\13\1\0\3\13\1\0\6\13\53\0"+
    "\2\61\22\0\1\13\2\0\2\13\14\0\21\13\1\61"+
    "\1\64\2\13\1\0\6\13\11\0\1\13\2\0\2\13"+
    "\14\0\20\13\1\64\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\2\13\1\250\3\13\11\0\1\13\2\0\2\13\14\0"+
    "\7\13\1\251\11\13\1\0\3\13\1\0\6\13\62\0"+
    "\1\252\34\0\2\241\77\0\2\253\31\0\1\13\2\0"+
    "\2\13\14\0\21\13\1\0\3\13\1\0\2\13\1\254"+
    "\3\13\11\0\1\13\2\0\2\13\14\0\12\13\2\255"+
    "\5\13\1\0\3\13\1\0\6\13\40\0\1\61\60\0"+
    "\1\256\43\0\1\13\2\0\2\13\14\0\6\13\1\64"+
    "\12\13\1\0\3\13\1\0\6\13\11\0\1\13\2\0"+
    "\2\13\14\0\1\13\1\257\17\13\1\0\3\13\1\0"+
    "\6\13\35\0\1\260\41\0\1\13\2\0\2\13\14\0"+
    "\3\13\1\261\15\13\1\0\3\13\1\0\6\13\40\0"+
    "\1\153\36\0\1\13\2\0\2\13\14\0\6\13\1\141"+
    "\12\13\1\0\3\13\1\0\6\13\44\0\2\61\31\0"+
    "\1\13\2\0\2\13\14\0\12\13\2\64\5\13\1\0"+
    "\3\13\1\0\6\13\11\0\1\13\2\0\2\13\14\0"+
    "\21\13\1\0\3\13\1\0\2\13\1\64\3\13\11\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\2\13\1\262\3\13\35\0\1\61\112\0\1\263\14\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\2\13\1\74\3\13\11\0\1\13\2\0\2\13\14\0"+
    "\17\13\1\220\1\13\1\0\3\13\1\0\6\13\11\0"+
    "\1\13\2\0\2\13\14\0\11\13\1\233\7\13\1\0"+
    "\3\13\1\0\6\13\63\0\1\127\60\0\1\61\20\0"+
    "\1\13\2\0\2\13\14\0\21\13\1\0\3\13\1\0"+
    "\3\13\1\131\2\13\11\0\1\13\2\0\2\13\14\0"+
    "\21\13\1\0\2\13\1\64\1\0\6\13\31\0\2\264"+
    "\44\0\1\13\2\0\2\13\13\0\1\264\1\52\20\13"+
    "\1\0\3\13\1\0\6\13\62\0\1\245\14\0\1\13"+
    "\2\0\2\13\14\0\21\13\1\0\3\13\1\0\2\13"+
    "\1\160\3\13\11\0\1\13\2\0\2\13\14\0\21\13"+
    "\1\0\3\13\1\0\3\13\1\265\2\13\41\0\1\153"+
    "\62\0\2\61\37\0\1\13\2\0\2\13\14\0\7\13"+
    "\1\136\11\13\1\0\3\13\1\0\6\13\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\15\1\1\11\21\1\1\0"+
    "\1\11\2\0\4\1\2\0\1\1\1\0\1\11\2\0"+
    "\14\1\1\0\11\1\2\0\5\1\1\11\2\1\3\0"+
    "\1\11\3\1\1\0\11\1\2\0\4\1\1\0\1\1"+
    "\1\0\5\1\3\0\3\1\1\0\2\1\1\0\1\11"+
    "\2\0\2\1\1\0\1\1\1\0\5\1\2\0\3\1"+
    "\1\0\4\1\3\0\2\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*Codigo de Usuario*/ 
/*hexa = "#"[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9] */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
  //errores = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(sym.ERROR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 12: break;
        case 2: 
          { return new Symbol(sym.E_BLANCO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 13: break;
        case 3: 
          { return new Symbol(sym.SIGNO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 14: break;
        case 4: 
          { return new Symbol(sym.OPERADOR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 15: break;
        case 5: 
          { return new Symbol(sym.ID,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 16: break;
        case 6: 
          { return new Symbol(sym.VALUE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 17: break;
        case 7: 
          { return new Symbol(sym.CADENA,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 18: break;
        case 8: 
          { return new Symbol(sym.COMENT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 19: break;
        case 9: 
          { return new Symbol(sym.RESERVADA,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 20: break;
        case 10: 
          { return new Symbol(sym.FILE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 21: break;
        case 11: 
          { return new Symbol(sym.TIPO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
