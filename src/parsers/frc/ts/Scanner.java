/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


package parsers.frc.ts;

import java_cup.runtime.Symbol;
import parsers.frc.managers.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\2\1\75\1\74\1\74\22\0\1\74\1\16\1\1"+
    "\1\35\2\0\1\17\1\7\1\27\1\30\1\14\1\21\1\23\1\22"+
    "\1\11\1\13\12\10\1\26\1\4\1\3\1\15\1\6\1\25\1\0"+
    "\1\54\7\12\1\73\2\12\1\64\2\12\1\70\1\71\1\12\1\67"+
    "\1\12\1\65\6\12\1\33\1\0\1\34\1\24\1\12\1\4\1\51"+
    "\1\45\1\47\1\53\1\52\1\5\1\63\1\60\1\36\1\12\1\61"+
    "\1\46\1\37\1\62\1\41\1\40\1\12\1\42\1\56\1\43\1\44"+
    "\1\50\1\57\1\66\1\55\1\72\1\31\1\20\1\32\7\0\1\75"+
    "\56\0\1\4\15\0\1\4\u1f65\0\1\75\1\75\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\23\4\1\32\1\0"+
    "\1\33\2\0\1\34\3\4\1\35\2\0\1\36\1\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\20\4\1\52\15\4\1\53\1\54"+
    "\2\4\1\55\1\56\2\0\1\4\1\57\26\4\1\60"+
    "\11\4\1\0\1\36\4\4\1\61\1\62\1\63\3\4"+
    "\1\64\1\65\1\66\1\67\3\4\1\70\4\4\1\71"+
    "\7\4\1\72\1\73\4\4\1\74\1\4\1\75\2\4"+
    "\1\76\3\4\1\77\1\4\1\100\1\101\1\4\1\102"+
    "\2\4\1\103\1\4\1\104\1\105\3\4\1\106\1\107"+
    "\1\110\1\111\3\4\1\112\1\4\1\113\1\114\3\4"+
    "\1\115\1\4\1\116\1\117\1\4\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\76\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\76\0\174\0\76\0\u08f6\0\u0934\0\u08f6\0\u0972"+
    "\0\u09b0\0\u09ee\0\76\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u022e\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u022e\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\76\0\u022e\0\u122a\0\u1268\0\76\0\u0a6a\0\u12a6\0\u12e4"+
    "\0\u1322\0\u022e\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u022e\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\76\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u022e\0\u022e\0\u022e\0\u1c18\0\u1c56\0\u1c94\0\u022e\0\u022e"+
    "\0\u022e\0\u022e\0\u1cd2\0\u1d10\0\u1d4e\0\u022e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u022e\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u022e\0\u022e\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u022e\0\u212e\0\u022e\0\u216c\0\u21aa\0\u022e\0\u21e8\0\u2226"+
    "\0\u2264\0\u022e\0\u22a2\0\u022e\0\u022e\0\u22e0\0\u022e\0\u231e"+
    "\0\u235c\0\u022e\0\u239a\0\u022e\0\u022e\0\u23d8\0\u2416\0\u2454"+
    "\0\u022e\0\u022e\0\u022e\0\u022e\0\u2492\0\u24d0\0\u250e\0\u022e"+
    "\0\u254c\0\u022e\0\u022e\0\u258a\0\u25c8\0\u2606\0\u022e\0\u2644"+
    "\0\u022e\0\u022e\0\u2682\0\u022e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\13"+
    "\1\40\1\13\1\41\1\42\1\13\1\43\1\13\1\44"+
    "\1\45\1\13\1\46\1\47\1\50\1\13\1\51\1\52"+
    "\2\13\1\53\1\13\1\54\1\55\1\13\1\56\1\57"+
    "\1\60\1\13\1\61\1\62\77\0\1\63\2\64\73\63"+
    "\2\0\1\4\71\0\1\4\1\0\2\65\1\0\1\65"+
    "\1\0\1\66\2\0\1\65\1\66\3\65\1\67\5\65"+
    "\2\0\1\65\1\0\13\65\1\66\4\65\1\66\26\65"+
    "\5\0\1\13\2\0\1\13\1\0\1\13\23\0\3\13"+
    "\1\70\4\13\1\71\2\13\1\72\22\13\17\0\1\73"+
    "\60\0\2\74\1\0\4\74\1\0\66\74\10\0\1\11"+
    "\1\75\71\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\36\13\15\0\1\76\1\77\1\100\75\0\1\101\75\0"+
    "\1\102\75\0\1\103\77\0\1\104\76\0\1\105\72\0"+
    "\1\106\3\0\1\107\71\0\1\110\4\0\1\111\60\0"+
    "\1\112\2\0\1\13\1\0\1\13\23\0\1\13\1\113"+
    "\22\13\1\114\11\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\4\13\1\115\1\13\1\116\27\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\14\13\1\117"+
    "\21\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\4\13\1\120\15\13\1\121\13\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\3\13\1\122\1\123\31\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\3\13"+
    "\1\124\4\13\1\125\2\13\1\126\6\13\1\127\13\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\3\13"+
    "\1\130\32\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\10\13\1\131\17\13\1\132\5\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\3\13\1\133\10\13"+
    "\1\134\21\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\4\13\1\135\31\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\5\13\1\136\13\13\1\137\14\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\22\13"+
    "\1\140\13\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\6\13\1\141\5\13\1\142\21\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\1\143\35\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\14\13\1\144"+
    "\21\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\14\13\1\145\21\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\12\13\1\146\23\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\3\13\1\147\32\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\1\13\1\150"+
    "\34\13\2\0\2\65\1\0\1\65\1\0\1\66\2\0"+
    "\1\65\1\66\11\65\2\0\1\65\1\0\13\65\1\66"+
    "\4\65\1\66\30\65\1\151\1\65\1\0\1\66\1\151"+
    "\1\0\1\65\1\66\11\65\2\0\1\65\1\0\13\65"+
    "\1\66\4\65\1\66\26\65\5\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\4\13\1\152\31\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\3\13\1\153\32\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\10\13"+
    "\1\154\25\13\4\0\1\155\4\0\1\155\76\0\1\156"+
    "\65\0\2\76\1\0\73\76\14\157\1\160\61\157\5\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\2\13\1\161"+
    "\33\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\5\13\1\162\30\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\1\163\35\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\7\13\1\164\26\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\5\13\1\165\30\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\6\13"+
    "\1\166\27\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\1\167\35\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\3\13\1\170\32\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\14\13\1\171\21\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\24\13\1\172"+
    "\11\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\13\13\1\173\22\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\20\13\1\174\15\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\13\13\1\175\22\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\1\176\35\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\20\13"+
    "\1\177\15\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\5\13\1\200\30\13\7\0\1\201\2\0\1\13"+
    "\1\0\1\13\23\0\36\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\4\13\1\202\4\13\1\203\24\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\4\13"+
    "\1\204\6\13\1\205\22\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\1\206\35\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\1\207\35\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\10\13\1\210\25\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\21\13"+
    "\1\211\14\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\14\13\1\212\7\13\1\213\11\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\30\13\1\214\5\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\11\13"+
    "\1\215\24\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\13\13\1\216\22\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\10\13\1\217\25\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\2\13\1\220\33\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\13\13"+
    "\1\221\22\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\20\13\1\222\15\13\2\0\14\157\1\223\61\157"+
    "\13\0\1\224\1\160\66\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\3\13\1\225\32\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\12\13\1\226\23\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\10\13\1\227"+
    "\25\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\6\13\1\230\27\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\14\13\1\231\21\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\20\13\1\232\15\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\10\13\1\233"+
    "\25\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\13\13\1\234\22\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\5\13\1\235\30\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\20\13\1\236\15\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\14\13\1\237"+
    "\21\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\4\13\1\240\31\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\15\13\1\241\20\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\14\13\1\242\21\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\14\13\1\243"+
    "\21\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\13\13\1\244\22\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\13\13\1\245\22\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\3\13\1\246\32\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\1\247\35\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\5\13"+
    "\1\250\30\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\5\13\1\251\30\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\10\13\1\252\25\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\10\13\1\253\25\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\24\13"+
    "\1\254\11\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\14\13\1\255\21\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\5\13\1\256\30\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\5\13\1\257\30\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\10\13"+
    "\1\260\25\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\1\261\35\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\4\13\1\262\31\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\5\13\1\263\30\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\14\13\1\264"+
    "\21\13\2\0\13\157\1\224\1\223\61\157\5\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\4\13\1\265\31\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\13\13"+
    "\1\266\22\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\1\267\35\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\4\13\1\270\31\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\23\13\1\271\12\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\1\272\35\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\20\13"+
    "\1\273\15\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\24\13\1\274\11\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\6\13\1\275\27\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\17\13\1\276\16\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\24\13"+
    "\1\277\11\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\1\300\35\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\11\13\1\301\24\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\14\13\1\302\21\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\34\13\1\303"+
    "\1\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\13\13\1\304\22\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\3\13\1\305\32\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\13\13\1\306\22\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\3\13\1\307"+
    "\32\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\25\13\1\310\10\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\1\311\35\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\5\13\1\312\30\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\5\13\1\313\30\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\11\13"+
    "\1\314\24\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\24\13\1\315\11\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\24\13\1\316\11\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\15\13\1\317\20\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\10\13"+
    "\1\320\25\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\25\13\1\321\10\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\11\13\1\322\24\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\22\13\1\323\13\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\3\13"+
    "\1\324\32\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\24\13\1\325\11\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\3\13\1\326\32\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\1\13\1\327\34\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\14\13"+
    "\1\330\21\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\6\13\1\331\27\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\20\13\1\332\15\13\7\0\1\13"+
    "\2\0\1\13\1\0\1\13\23\0\5\13\1\333\30\13"+
    "\7\0\1\13\2\0\1\13\1\0\1\13\23\0\25\13"+
    "\1\334\10\13\7\0\1\13\2\0\1\13\1\0\1\13"+
    "\23\0\24\13\1\335\11\13\7\0\1\13\2\0\1\13"+
    "\1\0\1\13\23\0\1\336\35\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\14\13\1\337\21\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\6\13\1\340"+
    "\27\13\7\0\1\13\2\0\1\13\1\0\1\13\23\0"+
    "\3\13\1\341\32\13\7\0\1\13\2\0\1\13\1\0"+
    "\1\13\23\0\4\13\1\342\31\13\7\0\1\13\2\0"+
    "\1\13\1\0\1\13\23\0\10\13\1\343\25\13\7\0"+
    "\1\13\2\0\1\13\1\0\1\13\23\0\3\13\1\344"+
    "\32\13\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\11\1\13\11\23\1\1\11"+
    "\1\0\1\11\2\0\4\1\1\11\2\0\1\1\1\0"+
    "\12\11\37\1\1\11\3\1\1\11\1\1\2\0\42\1"+
    "\1\0\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/*CODIGO USUARIO*/ 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { ErrorManager.add(new String(yytext()),yyline+1,yycolumn+1,Err.LEXICAL);
          }
        case 81: break;
        case 2: 
          { return new Symbol(sym.NEWLINE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 82: break;
        case 3: 
          { return new Symbol(sym.LESS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 83: break;
        case 4: 
          { return new Symbol(sym.ID,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 84: break;
        case 5: 
          { return new Symbol(sym.GREATER,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 85: break;
        case 6: 
          { return new Symbol(sym.NUM,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 86: break;
        case 7: 
          { return new Symbol(sym.DOT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 87: break;
        case 8: 
          { return new Symbol(sym.DIV,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 88: break;
        case 9: 
          { return new Symbol(sym.TIMES,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 89: break;
        case 10: 
          { return new Symbol(sym.EQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 90: break;
        case 11: 
          { return new Symbol(sym.NOT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 91: break;
        case 12: 
          { return new Symbol(sym.REF,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 92: break;
        case 13: 
          { return new Symbol(sym.PLUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 93: break;
        case 14: 
          { return new Symbol(sym.MINUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 94: break;
        case 15: 
          { return new Symbol(sym.COMA,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 95: break;
        case 16: 
          { return new Symbol(sym.POW,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 96: break;
        case 17: 
          { return new Symbol(sym.ASK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 97: break;
        case 18: 
          { return new Symbol(sym.COLON,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 98: break;
        case 19: 
          { return new Symbol(sym.LPAREN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 99: break;
        case 20: 
          { return new Symbol(sym.RPAREN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 100: break;
        case 21: 
          { return new Symbol(sym.LBRACKET,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 101: break;
        case 22: 
          { return new Symbol(sym.RBRACKET,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 102: break;
        case 23: 
          { return new Symbol(sym.LHOOK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 103: break;
        case 24: 
          { return new Symbol(sym.RHOOK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 104: break;
        case 25: 
          { return new Symbol(sym.SHARP,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 105: break;
        case 26: 
          { 
          }
        case 106: break;
        case 27: 
          { return new Symbol(sym.CAD,yycolumn+1,yyline+1,new String(yytext()).replaceAll("\"",""));
          }
        case 107: break;
        case 28: 
          { return new Symbol(sym.LEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 108: break;
        case 29: 
          { return new Symbol(sym.GEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 109: break;
        case 30: 
          { /*comentarios se ignoran*/
          }
        case 110: break;
        case 31: 
          { return new Symbol(sym.DIVEQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 111: break;
        case 32: 
          { return new Symbol(sym.TIMESEQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 112: break;
        case 33: 
          { return new Symbol(sym.EQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 113: break;
        case 34: 
          { return new Symbol(sym.NOTEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 114: break;
        case 35: 
          { return new Symbol(sym.AND,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 115: break;
        case 36: 
          { return new Symbol(sym.OR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 116: break;
        case 37: 
          { return new Symbol(sym.PLUSEQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 117: break;
        case 38: 
          { return new Symbol(sym.PLUSPLUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 118: break;
        case 39: 
          { return new Symbol(sym.MINUSEQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 119: break;
        case 40: 
          { return new Symbol(sym.MINUSMINUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 120: break;
        case 41: 
          { return new Symbol(sym.IF,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 121: break;
        case 42: 
          { return new Symbol(sym.DO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 122: break;
        case 43: 
          { return new Symbol(sym.FILE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 123: break;
        case 44: 
          { return new Symbol(sym.FOR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 124: break;
        case 45: 
          { return new Symbol(sym.CHR,yycolumn+1,yyline+1,new String(yytext()).replaceAll("'",""));
          }
        case 125: break;
        case 46: 
          { return new Symbol(sym.DEC,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 126: break;
        case 47: 
          { return new Symbol(sym.INT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 127: break;
        case 48: 
          { return new Symbol(sym.NEW,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 128: break;
        case 49: 
          { return new Symbol(sym.TRUE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 129: break;
        case 50: 
          { return new Symbol(sym.THIS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 130: break;
        case 51: 
          { return new Symbol(sym.BOOL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 131: break;
        case 52: 
          { return new Symbol(sym.CASE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 132: break;
        case 53: 
          { return new Symbol(sym.CHAR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 133: break;
        case 54: 
          { return new Symbol(sym.VOID,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 134: break;
        case 55: 
          { return new Symbol(sym.ELSE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 135: break;
        case 56: 
          { return new Symbol(sym.ARC0,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 136: break;
        case 57: 
          { return new Symbol(sym.NULL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 137: break;
        case 58: 
          { return new Symbol(sym.FLOAT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 138: break;
        case 59: 
          { return new Symbol(sym.FALSE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 139: break;
        case 60: 
          { return new Symbol(sym.BREAK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 140: break;
        case 61: 
          { return new Symbol(sym.CLASS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 141: break;
        case 62: 
          { return new Symbol(sym.ARRAY,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 142: break;
        case 63: 
          { return new Symbol(sym.WHILE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 143: break;
        case 64: 
          { return new Symbol(sym.LINEA,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 144: break;
        case 65: 
          { return new Symbol(sym.TEXTO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 145: break;
        case 66: 
          { return new Symbol(sym.OVALO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 146: break;
        case 67: 
          { return new Symbol(sym.IMPORT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 147: break;
        case 68: 
          { return new Symbol(sym.PUBLIC,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 148: break;
        case 69: 
          { return new Symbol(sym.RETURN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 149: break;
        case 70: 
          { return new Symbol(sym.STRING,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 150: break;
        case 71: 
          { return new Symbol(sym.STATIC,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 151: break;
        case 72: 
          { return new Symbol(sym.SWITCH,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 152: break;
        case 73: 
          { return new Symbol(sym.LIENZO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 153: break;
        case 74: 
          { return new Symbol(sym.PRIVATE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 154: break;
        case 75: 
          { return new Symbol(sym.EXTENDS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 155: break;
        case 76: 
          { return new Symbol(sym.DEFAULT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 156: break;
        case 77: 
          { return new Symbol(sym.CONTINUE,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 157: break;
        case 78: 
          { return new Symbol(sym.POLIGONO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 158: break;
        case 79: 
          { return new Symbol(sym.IMPRIMIR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 159: break;
        case 80: 
          { return new Symbol(sym.RECTANGULO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
