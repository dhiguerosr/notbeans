
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 23 10:12:57 CST 2014
//----------------------------------------------------

package parsers.frc.ts;

import gui.forms.ProjectManager;
import java.util.Stack;
import java_cup.runtime.Symbol;
import parsers.frc.managers.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 23 10:12:57 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\005\005\000" +
    "\002\072\002\000\002\073\002\000\002\006\014\000\002" +
    "\074\002\000\002\006\011\000\002\007\006\000\002\007" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\014\011\000\002\014\007\000\002\075\002\000" +
    "\002\014\017\000\002\014\011\000\002\014\007\000\002" +
    "\076\002\000\002\014\017\000\002\077\002\000\002\014" +
    "\017\000\002\100\002\000\002\014\016\000\002\025\003" +
    "\000\002\025\002\000\002\026\005\000\002\026\004\000" +
    "\002\026\005\000\002\022\003\000\002\022\002\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\004\000\002\024\004\000\002\061\004\000\002\061\002" +
    "\000\002\017\003\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\021\006\000\002\021\006\000\002\020" +
    "\005\000\002\020\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\004\000" +
    "\002\030\003\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\031\005" +
    "\000\002\031\004\000\002\031\004\000\002\033\004\000" +
    "\002\033\003\000\002\034\005\000\002\015\006\000\002" +
    "\015\006\000\002\015\004\000\002\015\004\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\036\007\000\002\101\002\000" +
    "\002\037\016\000\002\102\002\000\002\103\002\000\002" +
    "\040\015\000\002\051\007\000\002\051\004\000\002\041" +
    "\006\000\002\041\003\000\002\104\002\000\002\050\010" +
    "\000\002\050\004\000\002\046\003\000\002\046\002\000" +
    "\002\047\005\000\002\047\004\000\002\047\005\000\002" +
    "\105\002\000\002\071\010\000\002\042\011\000\002\042" +
    "\011\000\002\042\007\000\002\043\013\000\002\044\004" +
    "\000\002\044\003\000\002\045\007\000\002\045\006\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\053\005" +
    "\000\002\053\005\000\002\053\004\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\004\000\002\052\015\000" +
    "\002\052\011\000\002\055\004\000\002\055\007\000\002" +
    "\067\006\000\002\064\003\000\002\064\002\000\002\063" +
    "\005\000\002\063\003\000\002\060\007\000\002\060\005" +
    "\000\002\060\005\000\002\060\003\000\002\056\007\000" +
    "\002\056\005\000\002\056\005\000\002\056\003\000\002" +
    "\066\004\000\002\066\003\000\002\070\005\000\002\070" +
    "\003\000\002\065\003\000\002\065\003\000\002\057\006" +
    "\000\002\012\003\000\002\012\003\000\002\012\002\000" +
    "\002\013\003\000\002\013\002\000\002\011\003\000\002" +
    "\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\012\003\012\006\005\042\004\121\014\001" +
    "\002\000\004\005\u018f\001\002\000\004\111\024\001\002" +
    "\000\004\002\ufffd\001\002\000\004\121\022\001\002\000" +
    "\004\006\005\001\002\000\004\002\020\001\002\000\004" +
    "\121\016\001\002\000\004\002\uffff\001\002\000\010\003" +
    "\012\006\005\042\004\001\002\000\004\002\000\001\002" +
    "\000\006\003\012\042\004\001\002\000\004\006\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\010\003\012\006\ufffb\042\004\001\002\000\004\006" +
    "\ufffc\001\002\000\004\114\025\001\002\000\010\050\ufff5" +
    "\112\ufff8\121\ufff5\001\002\000\006\050\uff4c\121\034\001" +
    "\002\000\004\112\030\001\002\000\004\114\031\001\002" +
    "\000\006\050\ufff7\121\ufff7\001\002\000\006\050\uff4c\121" +
    "\034\001\002\000\004\050\035\001\002\000\102\002\uff4d" +
    "\003\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012\uff4d\014" +
    "\uff4d\016\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\025\uff4d" +
    "\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034" +
    "\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\050\uff4d" +
    "\051\uff4d\107\uff4d\110\uff4d\113\uff4d\114\uff4d\001\002\000" +
    "\036\003\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\025\uff4c" +
    "\026\uff4c\027\uff4c\030\uff4c\031\uff4c\051\uff4c\113\uff4c\114" +
    "\uff4c\121\034\001\002\000\004\002\ufff6\001\002\000\034" +
    "\003\041\006\043\007\045\010\uff50\011\uff50\025\uff50\026" +
    "\uff50\027\uff50\030\uff50\031\uff50\051\042\113\uff50\114\uff50" +
    "\001\002\000\024\010\uff4e\011\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\113\057\114\uff4e\001\002\000\004" +
    "\121\054\001\002\000\006\002\uff4c\121\034\001\002\000" +
    "\024\010\uff52\011\uff52\025\uff52\026\uff52\027\uff52\030\uff52" +
    "\031\uff52\113\uff52\114\uff52\001\002\000\004\051\051\001" +
    "\002\000\024\010\uff51\011\uff51\025\uff51\026\uff51\027\uff51" +
    "\030\uff51\031\uff51\113\uff51\114\uff51\001\002\000\004\121" +
    "\047\001\002\000\034\003\041\006\043\007\045\010\uff50" +
    "\011\uff50\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\051" +
    "\ufff0\113\uff50\114\uff50\001\002\000\004\051\ufff1\001\002" +
    "\000\006\002\uff4c\121\034\001\002\000\004\002\ufff3\001" +
    "\002\000\004\002\ufff2\001\002\000\032\003\041\006\043" +
    "\007\045\010\uff50\011\uff50\025\uff50\026\uff50\027\uff50\030" +
    "\uff50\031\uff50\113\uff50\114\uff50\001\002\000\004\051\uffef" +
    "\001\002\000\022\010\063\011\062\025\060\026\072\027" +
    "\061\030\064\031\071\114\065\001\002\000\022\010\uff4f" +
    "\011\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\114" +
    "\uff4f\001\002\000\010\044\uffd2\047\uffd2\114\uffd2\001\002" +
    "\000\010\044\uffd0\047\uffd0\114\uffd0\001\002\000\004\043" +
    "\u0187\001\002\000\004\114\u017d\001\002\000\010\044\uffcf" +
    "\047\uffcf\114\uffcf\001\002\000\006\046\u0167\114\u0166\001" +
    "\002\000\004\114\073\001\002\000\006\044\uffd3\114\uffd3" +
    "\001\002\000\006\044\uffd4\114\uffd4\001\002\000\010\044" +
    "\uffce\047\uffce\114\uffce\001\002\000\010\044\uffd1\047\uffd1" +
    "\114\uffd1\001\002\000\012\046\077\052\076\061\074\121" +
    "\uffd5\001\002\000\004\114\u011e\001\002\000\004\121\uffed" +
    "\001\002\000\034\024\223\046\211\054\221\075\206\104" +
    "\207\105\220\106\230\107\137\114\212\115\222\116\225" +
    "\117\213\120\217\001\002\000\024\011\062\025\060\026" +
    "\072\027\061\030\064\031\071\047\uffdc\060\104\114\102" +
    "\001\002\000\006\047\uffda\061\u0161\001\002\000\004\047" +
    "\uffec\001\002\000\004\114\111\001\002\000\004\047\uffdd" +
    "\001\002\000\014\025\060\026\072\027\061\030\064\031" +
    "\071\001\002\000\004\114\106\001\002\000\006\047\uffd8" +
    "\061\uffd8\001\002\000\004\114\110\001\002\000\006\047" +
    "\uffd9\061\uffd9\001\002\000\006\047\uffd7\061\uffd7\001\002" +
    "\000\004\047\113\001\002\000\006\050\uff4c\121\034\001" +
    "\002\000\004\050\115\001\002\000\070\003\uff4c\011\uff4c" +
    "\012\uff4c\014\uff4c\016\uff4c\020\uff4c\021\uff4c\022\uff4c\023" +
    "\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c" +
    "\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041" +
    "\uff4c\051\uff4c\107\uff4c\110\uff4c\114\uff4c\121\034\001\002" +
    "\000\066\003\143\011\062\012\150\014\146\016\136\020" +
    "\122\021\125\022\163\023\154\025\060\026\072\027\061" +
    "\030\064\031\071\032\161\033\157\034\155\035\152\036" +
    "\142\037\134\040\132\041\120\051\uffe1\107\137\110\141" +
    "\114\140\001\002\000\004\121\uffbb\001\002\000\004\046" +
    "\u015e\001\002\000\004\121\uffbc\001\002\000\004\121\uffb9" +
    "\001\002\000\052\043\uff5a\044\uff5a\045\uff54\047\uff5a\051" +
    "\uff5a\053\uff5a\054\uff5a\056\uff5a\057\uff5a\061\uff5a\063\uff5a" +
    "\066\uff5a\073\uff5a\074\uff5a\076\uff5a\077\uff5a\100\uff5a\101" +
    "\uff5a\103\uff5a\121\uff5a\001\002\000\004\045\u015d\001\002" +
    "\000\004\046\u0148\001\002\000\004\121\uffbe\001\002\000" +
    "\004\114\u011e\001\002\000\004\121\uffbf\001\002\000\004" +
    "\121\uffbd\001\002\000\004\046\u0142\001\002\000\020\052" +
    "\u013c\064\u013f\065\u013a\067\u0140\070\u013b\071\u0139\072\u013e" +
    "\001\002\000\004\046\u0136\001\002\000\004\121\u0134\001" +
    "\002\000\004\046\u0127\001\002\000\004\045\u0124\001\002" +
    "\000\030\045\uff58\046\313\052\uff58\062\312\064\uff58\065" +
    "\uff58\067\uff58\070\uff58\071\uff58\072\uff58\114\u011e\001\002" +
    "\000\036\024\223\046\211\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\121\uffb7\001\002\000\004\046\u011a\001\002\000" +
    "\004\121\u0118\001\002\000\004\051\u0117\001\002\000\004" +
    "\121\uffc3\001\002\000\004\121\uffba\001\002\000\070\043" +
    "\uff5e\044\uff5e\045\uff55\047\uff5e\051\uff5e\052\uff5e\053\uff5e" +
    "\054\uff5e\056\uff5e\057\uff5e\061\uff5e\063\uff5e\064\uff5e\065" +
    "\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e" +
    "\074\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\103\uff5e\121" +
    "\uff5e\001\002\000\004\046\372\001\002\000\004\045\uff56" +
    "\001\002\000\004\046\367\001\002\000\004\121\uffc0\001" +
    "\002\000\004\046\354\001\002\000\004\046\351\001\002" +
    "\000\004\121\uffc1\001\002\000\004\046\346\001\002\000" +
    "\004\121\uffc2\001\002\000\004\046\343\001\002\000\004" +
    "\051\uffe2\001\002\000\006\050\uff4c\121\034\001\002\000" +
    "\004\050\165\001\002\000\070\003\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\051" +
    "\uff9e\107\uff9e\110\uff9e\114\uff9e\121\uff9e\001\002\000\070" +
    "\003\uff4c\011\uff4c\012\uff4c\014\uff4c\016\uff4c\020\uff4c\021" +
    "\uff4c\022\uff4c\023\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c" +
    "\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037" +
    "\uff4c\040\uff4c\041\uff4c\051\uff4c\107\uff4c\110\uff4c\114\uff4c" +
    "\121\034\001\002\000\066\003\172\011\062\012\150\014" +
    "\146\016\136\020\122\021\125\022\163\023\154\025\060" +
    "\026\072\027\061\030\064\031\071\032\161\033\157\034" +
    "\155\035\152\036\142\037\134\040\132\041\120\051\uff91" +
    "\107\137\110\141\114\140\001\002\000\004\051\200\001" +
    "\002\000\004\121\176\001\002\000\004\121\174\001\002" +
    "\000\004\051\uff92\001\002\000\064\003\172\011\062\012" +
    "\150\014\146\016\136\020\122\021\125\022\163\023\154" +
    "\025\060\026\072\027\061\030\064\031\071\032\161\033" +
    "\157\034\155\035\152\036\142\037\134\040\132\041\120" +
    "\107\137\110\141\114\140\001\002\000\010\013\uff8e\015" +
    "\uff8e\051\uff8e\001\002\000\072\003\172\011\062\012\150" +
    "\013\uff8f\014\146\015\uff8f\016\136\020\122\021\125\022" +
    "\163\023\154\025\060\026\072\027\061\030\064\031\071" +
    "\032\161\033\157\034\155\035\152\036\142\037\134\040" +
    "\132\041\120\051\uff8f\107\137\110\141\114\140\001\002" +
    "\000\010\013\uff90\015\uff90\051\uff90\001\002\000\006\023" +
    "\uff4c\121\034\001\002\000\004\023\202\001\002\000\004" +
    "\046\203\001\002\000\034\024\223\046\211\054\221\075" +
    "\206\104\207\105\220\106\230\107\137\114\212\115\222" +
    "\116\225\117\213\120\217\001\002\000\050\043\uff7c\044" +
    "\uff7c\047\uff7c\051\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c" +
    "\061\uff7c\063\uff7c\066\uff7c\073\uff7c\074\uff7c\076\uff7c\077" +
    "\uff7c\100\uff7c\101\uff7c\103\uff7c\121\uff7c\001\002\000\050" +
    "\043\uff7d\044\uff7d\047\uff7d\051\uff7d\053\uff7d\054\uff7d\056" +
    "\uff7d\057\uff7d\061\uff7d\063\uff7d\066\uff7d\073\uff7d\074\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\103\uff7d\121\uff7d\001" +
    "\002\000\034\024\223\046\211\054\221\075\206\104\207" +
    "\105\220\106\230\107\137\114\212\115\222\116\225\117" +
    "\213\120\217\001\002\000\050\043\uffc5\044\uffc5\047\uffc5" +
    "\051\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\063" +
    "\uffc5\066\uffc5\073\uffc5\074\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\103\uffc5\121\uffc5\001\002\000\050\043\uff7e\044" +
    "\uff7e\047\uff7e\051\uff7e\053\uff7e\054\uff7e\056\uff7e\057\uff7e" +
    "\061\uff7e\063\uff7e\066\uff7e\073\uff7e\074\uff7e\076\uff7e\077" +
    "\uff7e\100\uff7e\101\uff7e\103\uff7e\121\uff7e\001\002\000\046" +
    "\024\223\025\060\026\072\027\061\030\064\031\071\046" +
    "\211\054\221\075\206\104\207\105\220\106\230\107\137" +
    "\114\212\115\222\116\225\117\213\120\217\001\002\000" +
    "\074\043\uff58\044\uff58\045\uff58\046\313\047\uff58\051\uff58" +
    "\052\uff58\053\uff58\054\uff58\056\uff58\057\uff58\061\uff58\062" +
    "\312\063\uff58\064\uff58\065\uff58\066\uff58\067\uff58\070\uff58" +
    "\071\uff58\072\uff58\073\uff58\074\uff58\076\uff58\077\uff58\100" +
    "\uff58\101\uff58\103\uff58\121\uff58\001\002\000\050\043\uffc9" +
    "\044\uffc9\047\uffc9\051\uffc9\053\uffc9\054\uffc9\056\uffc9\057" +
    "\uffc9\061\uffc9\063\uffc9\066\uffc9\073\uffc9\074\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\103\uffc9\121\uffc9\001\002\000" +
    "\050\043\uff83\044\uff83\047\uff83\051\uff83\053\uff83\054\uff83" +
    "\056\uff83\057\uff83\061\uff83\063\uff83\066\uff83\073\uff83\074" +
    "\uff83\076\uff83\077\uff83\100\uff83\101\uff83\103\uff83\121\uff83" +
    "\001\002\000\036\043\253\044\247\047\310\053\250\054" +
    "\243\056\251\057\255\066\246\073\244\074\257\076\256" +
    "\077\254\100\260\101\252\001\002\000\050\043\uff7f\044" +
    "\uff7f\047\uff7f\051\uff7f\053\uff7f\054\uff7f\056\uff7f\057\uff7f" +
    "\061\uff7f\063\uff7f\066\uff7f\073\uff7f\074\uff7f\076\uff7f\077" +
    "\uff7f\100\uff7f\101\uff7f\103\uff7f\121\uff7f\001\002\000\050" +
    "\043\uffc8\044\uffc8\047\uffc8\051\uffc8\053\uffc8\054\uffc8\056" +
    "\uffc8\057\uffc8\061\uffc8\063\uffc8\066\uffc8\073\uffc8\074\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\101\uffc8\103\uffc8\121\uffc8\001" +
    "\002\000\050\043\uffc4\044\uffc4\047\uffc4\051\uffc4\053\uffc4" +
    "\054\uffc4\056\uffc4\057\uffc4\061\uffc4\063\uffc4\066\uffc4\073" +
    "\uffc4\074\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\103\uffc4" +
    "\121\uffc4\001\002\000\034\024\223\046\211\054\221\075" +
    "\206\104\207\105\220\106\230\107\137\114\212\115\222" +
    "\116\225\117\213\120\217\001\002\000\050\043\uffc7\044" +
    "\uffc7\047\uffc7\051\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7" +
    "\061\uffc7\063\uffc7\066\uffc7\073\uffc7\074\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\103\uffc7\121\uffc7\001\002\000\010" +
    "\011\235\107\233\114\212\001\002\000\050\043\uff82\044" +
    "\uff82\047\uff82\051\uff82\053\uff82\054\uff82\056\uff82\057\uff82" +
    "\061\uff82\063\uff82\066\uff82\073\uff82\074\uff82\076\uff82\077" +
    "\uff82\100\uff82\101\uff82\103\uff82\121\uff82\001\002\000\050" +
    "\043\uffc6\044\uffc6\047\uffc6\051\uffc6\053\uffc6\054\uffc6\056" +
    "\uffc6\057\uffc6\061\uffc6\063\uffc6\066\uffc6\073\uffc6\074\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\101\uffc6\103\uffc6\121\uffc6\001" +
    "\002\000\050\043\uff81\044\uff81\047\uff81\051\uff81\053\uff81" +
    "\054\uff81\056\uff81\057\uff81\061\uff81\063\uff81\066\uff81\073" +
    "\uff81\074\uff81\076\uff81\077\uff81\100\uff81\101\uff81\103\uff81" +
    "\121\uff81\001\002\000\050\043\uff80\044\uff80\047\uff80\051" +
    "\uff80\053\uff80\054\uff80\056\uff80\057\uff80\061\uff80\063\uff80" +
    "\066\uff80\073\uff80\074\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\103\uff80\121\uff80\001\002\000\050\043\uff7b\044\uff7b" +
    "\047\uff7b\051\uff7b\053\uff7b\054\uff7b\056\uff7b\057\uff7b\061" +
    "\uff7b\063\uff7b\066\uff7b\073\uff7b\074\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\103\uff7b\121\uff7b\001\002\000\004\045" +
    "\305\001\002\000\050\043\uff68\044\uff68\047\uff68\051\uff68" +
    "\053\uff68\054\uff68\056\uff68\057\uff68\061\uff68\063\uff68\066" +
    "\uff68\073\uff68\074\uff68\076\uff68\077\uff68\100\uff68\101\uff68" +
    "\103\uff68\121\uff68\001\002\000\004\045\277\001\002\000" +
    "\004\045\uff55\001\002\000\004\046\236\001\002\000\036" +
    "\024\223\046\211\047\uff64\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\001\002\000\004\047\uff65\001\002\000\040\043" +
    "\253\044\247\047\uff62\053\250\054\243\056\251\057\255" +
    "\061\245\066\246\073\244\074\257\076\256\077\254\100" +
    "\260\101\252\001\002\000\004\047\242\001\002\000\050" +
    "\043\uff67\044\uff67\047\uff67\051\uff67\053\uff67\054\uff67\056" +
    "\uff67\057\uff67\061\uff67\063\uff67\066\uff67\073\uff67\074\uff67" +
    "\076\uff67\077\uff67\100\uff67\101\uff67\103\uff67\121\uff67\001" +
    "\002\000\034\024\223\046\211\054\221\075\206\104\207" +
    "\105\220\106\230\107\137\114\212\115\222\116\225\117" +
    "\213\120\217\001\002\000\034\024\223\046\211\054\221" +
    "\075\206\104\207\105\220\106\230\107\137\114\212\115" +
    "\222\116\225\117\213\120\217\001\002\000\034\024\223" +
    "\046\211\054\221\075\206\104\207\105\220\106\230\107" +
    "\137\114\212\115\222\116\225\117\213\120\217\001\002" +
    "\000\034\024\223\046\211\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\001\002\000\034\024\223\046\211\054\221\075" +
    "\206\104\207\105\220\106\230\107\137\114\212\115\222" +
    "\116\225\117\213\120\217\001\002\000\034\024\223\046" +
    "\211\054\221\075\206\104\207\105\220\106\230\107\137" +
    "\114\212\115\222\116\225\117\213\120\217\001\002\000" +
    "\034\024\223\046\211\054\221\075\206\104\207\105\220" +
    "\106\230\107\137\114\212\115\222\116\225\117\213\120" +
    "\217\001\002\000\034\024\223\046\211\054\221\075\206" +
    "\104\207\105\220\106\230\107\137\114\212\115\222\116" +
    "\225\117\213\120\217\001\002\000\034\024\223\046\211" +
    "\054\221\075\206\104\207\105\220\106\230\107\137\114" +
    "\212\115\222\116\225\117\213\120\217\001\002\000\034" +
    "\024\223\046\211\054\221\075\206\104\207\105\220\106" +
    "\230\107\137\114\212\115\222\116\225\117\213\120\217" +
    "\001\002\000\034\024\223\046\211\054\221\075\206\104" +
    "\207\105\220\106\230\107\137\114\212\115\222\116\225" +
    "\117\213\120\217\001\002\000\034\024\223\046\211\054" +
    "\221\075\206\104\207\105\220\106\230\107\137\114\212" +
    "\115\222\116\225\117\213\120\217\001\002\000\034\024" +
    "\223\046\211\054\221\075\206\104\207\105\220\106\230" +
    "\107\137\114\212\115\222\116\225\117\213\120\217\001" +
    "\002\000\034\024\223\046\211\054\221\075\206\104\207" +
    "\105\220\106\230\107\137\114\212\115\222\116\225\117" +
    "\213\120\217\001\002\000\050\043\253\044\247\047\uff75" +
    "\051\uff75\053\250\054\243\056\251\057\255\061\uff75\063" +
    "\uff75\066\246\073\uff75\074\uff75\076\uff75\077\uff75\100\uff75" +
    "\101\252\103\uff75\121\uff75\001\002\000\050\043\253\044" +
    "\247\047\uff7a\051\uff7a\053\250\054\243\056\251\057\255" +
    "\061\uff7a\063\uff7a\066\246\073\244\074\uff7a\076\256\077" +
    "\254\100\260\101\252\103\uff7a\121\uff7a\001\002\000\050" +
    "\043\253\044\247\047\uff77\051\uff77\053\250\054\243\056" +
    "\251\057\255\061\uff77\063\uff77\066\246\073\uff77\074\uff77" +
    "\076\uff77\077\254\100\260\101\252\103\uff77\121\uff77\001" +
    "\002\000\050\043\uff6f\044\uff6f\047\uff6f\051\uff6f\053\uff6f" +
    "\054\uff6f\056\uff6f\057\uff6f\061\uff6f\063\uff6f\066\246\073" +
    "\uff6f\074\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\103\uff6f" +
    "\121\uff6f\001\002\000\050\043\253\044\247\047\uff76\051" +
    "\uff76\053\250\054\243\056\251\057\255\061\uff76\063\uff76" +
    "\066\246\073\uff76\074\uff76\076\uff76\077\uff76\100\260\101" +
    "\252\103\uff76\121\uff76\001\002\000\050\043\uff72\044\uff72" +
    "\047\uff72\051\uff72\053\250\054\243\056\251\057\255\061" +
    "\uff72\063\uff72\066\246\073\uff72\074\uff72\076\uff72\077\uff72" +
    "\100\uff72\101\uff72\103\uff72\121\uff72\001\002\000\050\043" +
    "\253\044\247\047\uff73\051\uff73\053\250\054\243\056\251" +
    "\057\255\061\uff73\063\uff73\066\246\073\uff73\074\uff73\076" +
    "\uff73\077\uff73\100\uff73\101\uff73\103\uff73\121\uff73\001\002" +
    "\000\050\043\uff6e\044\uff6e\047\uff6e\051\uff6e\053\uff6e\054" +
    "\uff6e\056\uff6e\057\uff6e\061\uff6e\063\uff6e\066\246\073\uff6e" +
    "\074\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\103\uff6e\121" +
    "\uff6e\001\002\000\050\043\uff71\044\uff71\047\uff71\051\uff71" +
    "\053\uff71\054\uff71\056\251\057\255\061\uff71\063\uff71\066" +
    "\246\073\uff71\074\uff71\076\uff71\077\uff71\100\uff71\101\uff71" +
    "\103\uff71\121\uff71\001\002\000\050\043\253\044\uff74\047" +
    "\uff74\051\uff74\053\250\054\243\056\251\057\255\061\uff74" +
    "\063\uff74\066\246\073\uff74\074\uff74\076\uff74\077\uff74\100" +
    "\uff74\101\uff74\103\uff74\121\uff74\001\002\000\050\043\uff6d" +
    "\044\uff6d\047\uff6d\051\uff6d\053\uff6d\054\uff6d\056\uff6d\057" +
    "\uff6d\061\uff6d\063\uff6d\066\uff6d\073\uff6d\074\uff6d\076\uff6d" +
    "\077\uff6d\100\uff6d\101\uff6d\103\uff6d\121\uff6d\001\002\000" +
    "\004\047\uff63\001\002\000\050\043\253\044\247\047\uff79" +
    "\051\uff79\053\250\054\243\056\251\057\255\061\uff79\063" +
    "\uff79\066\246\073\uff79\074\uff79\076\256\077\254\100\260" +
    "\101\252\103\uff79\121\uff79\001\002\000\050\043\uff70\044" +
    "\uff70\047\uff70\051\uff70\053\uff70\054\uff70\056\251\057\255" +
    "\061\uff70\063\uff70\066\246\073\uff70\074\uff70\076\uff70\077" +
    "\uff70\100\uff70\101\uff70\103\uff70\121\uff70\001\002\000\004" +
    "\114\212\001\002\000\004\045\302\001\002\000\052\043" +
    "\uff5b\044\uff5b\045\uff54\047\uff5b\051\uff5b\053\uff5b\054\uff5b" +
    "\056\uff5b\057\uff5b\061\uff5b\063\uff5b\066\uff5b\073\uff5b\074" +
    "\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b\103\uff5b\121\uff5b" +
    "\001\002\000\004\114\212\001\002\000\004\045\uff57\001" +
    "\002\000\052\043\uff5d\044\uff5d\045\uff54\047\uff5d\051\uff5d" +
    "\053\uff5d\054\uff5d\056\uff5d\057\uff5d\061\uff5d\063\uff5d\066" +
    "\uff5d\073\uff5d\074\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\103\uff5d\121\uff5d\001\002\000\004\114\212\001\002\000" +
    "\052\043\uff5c\044\uff5c\045\uff54\047\uff5c\051\uff5c\053\uff5c" +
    "\054\uff5c\056\uff5c\057\uff5c\061\uff5c\063\uff5c\066\uff5c\073" +
    "\uff5c\074\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\103\uff5c" +
    "\121\uff5c\001\002\000\050\043\uff6b\044\uff6b\047\uff6b\051" +
    "\uff6b\053\uff6b\054\uff6b\056\uff6b\057\uff6b\061\uff6b\063\uff6b" +
    "\066\uff6b\073\uff6b\074\uff6b\076\uff6b\077\uff6b\100\uff6b\101" +
    "\uff6b\103\uff6b\121\uff6b\001\002\000\004\121\uff9d\001\002" +
    "\000\070\043\uff59\044\uff59\045\uff59\047\uff59\051\uff59\052" +
    "\uff59\053\uff59\054\uff59\056\uff59\057\uff59\061\uff59\063\uff59" +
    "\064\uff59\065\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072" +
    "\uff59\073\uff59\074\uff59\076\uff59\077\uff59\100\uff59\101\uff59" +
    "\103\uff59\121\uff59\001\002\000\034\024\223\046\211\054" +
    "\221\075\206\104\207\105\220\106\230\107\137\114\212" +
    "\115\222\116\225\117\213\120\217\001\002\000\036\024" +
    "\223\046\211\047\uff64\054\221\075\206\104\207\105\220" +
    "\106\230\107\137\114\212\115\222\116\225\117\213\120" +
    "\217\001\002\000\072\043\uffaa\044\uffaa\045\uffaa\047\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa\061" +
    "\uffaa\062\312\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\076\uffaa\077" +
    "\uffaa\100\uffaa\101\uffaa\103\uffaa\121\uffaa\001\002\000\070" +
    "\043\uffab\044\uffab\045\uffab\047\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\056\uffab\057\uffab\061\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\076\uffab\077\uffab\100\uffab\101\uffab\103\uffab" +
    "\121\uffab\001\002\000\004\047\317\001\002\000\052\043" +
    "\uff66\044\uff66\045\uff66\047\uff66\051\uff66\053\uff66\054\uff66" +
    "\056\uff66\057\uff66\061\uff66\063\uff66\066\uff66\073\uff66\074" +
    "\uff66\076\uff66\077\uff66\100\uff66\101\uff66\103\uff66\121\uff66" +
    "\001\002\000\036\043\253\044\247\053\250\054\243\056" +
    "\251\057\255\063\321\066\246\073\244\074\257\076\256" +
    "\077\254\100\260\101\252\001\002\000\072\043\uffa9\044" +
    "\uffa9\045\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\056\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\103\uffa9\121" +
    "\uffa9\001\002\000\004\047\340\001\002\000\036\043\253" +
    "\044\247\047\324\053\250\054\243\056\251\057\255\066" +
    "\246\073\244\074\257\076\256\077\254\100\260\101\252" +
    "\001\002\000\052\043\uff6c\044\uff6c\047\uff6c\051\uff6c\053" +
    "\uff6c\054\uff6c\056\uff6c\057\uff6c\061\uff6c\063\uff6c\066\uff6c" +
    "\073\uff6c\074\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102" +
    "\325\103\uff6c\121\uff6c\001\002\000\036\024\223\046\211" +
    "\050\326\054\221\075\206\104\207\105\220\106\230\107" +
    "\137\114\212\115\222\116\225\117\213\120\217\001\002" +
    "\000\034\024\223\046\211\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\001\002\000\036\043\253\044\247\053\250\054" +
    "\243\056\251\057\255\066\246\073\244\074\257\076\256" +
    "\077\254\100\260\101\252\103\330\001\002\000\034\024" +
    "\223\046\211\054\221\075\206\104\207\105\220\106\230" +
    "\107\137\114\212\115\222\116\225\117\213\120\217\001" +
    "\002\000\050\043\253\044\247\047\uff69\051\uff69\053\250" +
    "\054\243\056\251\057\255\061\uff69\063\uff69\066\246\073" +
    "\244\074\257\076\256\077\254\100\260\101\252\103\uff69" +
    "\121\uff69\001\002\000\036\043\253\044\247\051\333\053" +
    "\250\054\243\056\251\057\255\066\246\073\244\074\257" +
    "\076\256\077\254\100\260\101\252\001\002\000\004\103" +
    "\334\001\002\000\004\050\335\001\002\000\034\024\223" +
    "\046\211\054\221\075\206\104\207\105\220\106\230\107" +
    "\137\114\212\115\222\116\225\117\213\120\217\001\002" +
    "\000\036\043\253\044\247\051\337\053\250\054\243\056" +
    "\251\057\255\066\246\073\244\074\257\076\256\077\254" +
    "\100\260\101\252\001\002\000\050\043\uff6a\044\uff6a\047" +
    "\uff6a\051\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\061\uff6a" +
    "\063\uff6a\066\uff6a\073\uff6a\074\uff6a\076\uff6a\077\uff6a\100" +
    "\uff6a\101\uff6a\103\uff6a\121\uff6a\001\002\000\034\024\223" +
    "\046\211\054\221\075\206\104\207\105\220\106\230\107" +
    "\137\114\212\115\222\116\225\117\213\120\217\001\002" +
    "\000\050\043\253\044\247\047\uff53\051\uff53\053\250\054" +
    "\243\056\251\057\255\061\uff53\063\uff53\066\246\073\244" +
    "\074\257\076\256\077\254\100\260\101\252\103\uff53\121" +
    "\uff53\001\002\000\050\043\253\044\247\047\uff78\051\uff78" +
    "\053\250\054\243\056\251\057\255\061\uff78\063\uff78\066" +
    "\246\073\uff78\074\uff78\076\256\077\254\100\260\101\252" +
    "\103\uff78\121\uff78\001\002\000\036\024\223\046\211\047" +
    "\uff64\054\221\075\206\104\207\105\220\106\230\107\137" +
    "\114\212\115\222\116\225\117\213\120\217\001\002\000" +
    "\004\047\345\001\002\000\004\121\uffb2\001\002\000\036" +
    "\024\223\046\211\047\uff64\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\001\002\000\004\047\350\001\002\000\004\121" +
    "\uffb6\001\002\000\036\024\223\046\211\047\uff64\054\221" +
    "\075\206\104\207\105\220\106\230\107\137\114\212\115" +
    "\222\116\225\117\213\120\217\001\002\000\004\047\353" +
    "\001\002\000\004\121\uffaf\001\002\000\034\024\223\046" +
    "\211\054\221\075\206\104\207\105\220\106\230\107\137" +
    "\114\212\115\222\116\225\117\213\120\217\001\002\000" +
    "\036\043\253\044\247\047\356\053\250\054\243\056\251" +
    "\057\255\066\246\073\244\074\257\076\256\077\254\100" +
    "\260\101\252\001\002\000\052\012\uff4c\014\uff4c\016\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\050\uff4c" +
    "\107\uff4c\110\uff4c\114\uff4c\121\034\001\002\000\004\121" +
    "\uff9f\001\002\000\050\012\150\014\146\016\136\020\122" +
    "\021\125\022\163\023\154\032\161\033\157\034\155\035" +
    "\152\036\142\037\134\040\132\041\120\050\361\107\137" +
    "\110\141\114\212\001\002\000\070\003\uff95\011\uff95\012" +
    "\uff95\014\uff95\016\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\051\uff95\107\uff95\110\uff95\114\uff95\121\uff95\001\002\000" +
    "\004\121\uff93\001\002\000\070\003\uff4c\011\uff4c\012\uff4c" +
    "\014\uff4c\016\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\025" +
    "\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c" +
    "\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\051" +
    "\uff4c\107\uff4c\110\uff4c\114\uff4c\121\034\001\002\000\066" +
    "\003\172\011\062\012\150\014\146\016\136\020\122\021" +
    "\125\022\163\023\154\025\060\026\072\027\061\030\064" +
    "\031\071\032\161\033\157\034\155\035\152\036\142\037" +
    "\134\040\132\041\120\051\uff91\107\137\110\141\114\140" +
    "\001\002\000\004\051\366\001\002\000\004\121\uff94\001" +
    "\002\000\036\024\223\046\211\047\uff64\054\221\075\206" +
    "\104\207\105\220\106\230\107\137\114\212\115\222\116" +
    "\225\117\213\120\217\001\002\000\004\047\371\001\002" +
    "\000\004\121\uffb0\001\002\000\006\107\375\114\212\001" +
    "\002\000\004\047\u0106\001\002\000\004\045\u0104\001\002" +
    "\000\004\045\377\001\002\000\004\045\uff54\001\002\000" +
    "\004\114\212\001\002\000\004\045\u0102\001\002\000\070" +
    "\043\uff5f\044\uff5f\045\uff55\047\uff5f\051\uff5f\052\uff5f\053" +
    "\uff5f\054\uff5f\056\uff5f\057\uff5f\061\uff5f\063\uff5f\064\uff5f" +
    "\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073" +
    "\uff5f\074\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\103\uff5f" +
    "\121\uff5f\001\002\000\004\114\212\001\002\000\070\043" +
    "\uff61\044\uff61\045\uff55\047\uff61\051\uff61\052\uff61\053\uff61" +
    "\054\uff61\056\uff61\057\uff61\061\uff61\063\uff61\064\uff61\065" +
    "\uff61\066\uff61\067\uff61\070\uff61\071\uff61\072\uff61\073\uff61" +
    "\074\uff61\076\uff61\077\uff61\100\uff61\101\uff61\103\uff61\121" +
    "\uff61\001\002\000\004\114\212\001\002\000\070\043\uff60" +
    "\044\uff60\045\uff55\047\uff60\051\uff60\052\uff60\053\uff60\054" +
    "\uff60\056\uff60\057\uff60\061\uff60\063\uff60\064\uff60\065\uff60" +
    "\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074" +
    "\uff60\076\uff60\077\uff60\100\uff60\101\uff60\103\uff60\121\uff60" +
    "\001\002\000\006\050\uff4c\121\034\001\002\000\004\050" +
    "\u0108\001\002\000\004\121\u0109\001\002\000\006\013\u010c" +
    "\015\u010a\001\002\000\004\103\u0114\001\002\000\004\051" +
    "\u0113\001\002\000\016\104\207\105\220\115\222\116\225" +
    "\117\213\120\217\001\002\000\010\013\u010c\015\u010a\051" +
    "\uff86\001\002\000\004\051\uff87\001\002\000\004\103\u0110" +
    "\001\002\000\004\121\u0111\001\002\000\064\003\172\011" +
    "\062\012\150\014\146\016\136\020\122\021\125\022\163" +
    "\023\154\025\060\026\072\027\061\030\064\031\071\032" +
    "\161\033\157\034\155\035\152\036\142\037\134\040\132" +
    "\041\120\107\137\110\141\114\140\001\002\000\010\013" +
    "\uff85\015\uff85\051\uff85\001\002\000\004\121\uff88\001\002" +
    "\000\004\121\u0115\001\002\000\064\003\172\011\062\012" +
    "\150\014\146\016\136\020\122\021\125\022\163\023\154" +
    "\025\060\026\072\027\061\030\064\031\071\032\161\033" +
    "\157\034\155\035\152\036\142\037\134\040\132\041\120" +
    "\107\137\110\141\114\140\001\002\000\010\013\uff84\015" +
    "\uff84\051\uff84\001\002\000\004\121\uffeb\001\002\000\066" +
    "\003\143\011\062\012\150\014\146\016\136\020\122\021" +
    "\125\022\163\023\154\025\060\026\072\027\061\030\064" +
    "\031\071\032\161\033\157\034\155\035\152\036\142\037" +
    "\134\040\132\041\120\051\uffe1\107\137\110\141\114\140" +
    "\001\002\000\004\051\uffde\001\002\000\036\024\223\046" +
    "\211\047\uff64\054\221\075\206\104\207\105\220\106\230" +
    "\107\137\114\212\115\222\116\225\117\213\120\217\001" +
    "\002\000\004\047\u011c\001\002\000\004\121\uffb3\001\002" +
    "\000\036\043\253\044\247\053\250\054\243\056\251\057" +
    "\255\066\246\073\244\074\257\076\256\077\254\100\260" +
    "\101\252\121\uffb8\001\002\000\010\052\uffca\061\u0122\121" +
    "\uffca\001\002\000\006\052\u0120\121\uffa5\001\002\000\034" +
    "\024\223\046\211\054\221\075\206\104\207\105\220\106" +
    "\230\107\137\114\212\115\222\116\225\117\213\120\217" +
    "\001\002\000\036\043\253\044\247\053\250\054\243\056" +
    "\251\057\255\066\246\073\244\074\257\076\256\077\254" +
    "\100\260\101\252\121\uffa7\001\002\000\004\114\u011e\001" +
    "\002\000\006\052\uffcb\121\uffcb\001\002\000\004\114\212" +
    "\001\002\000\004\045\u0126\001\002\000\004\114\212\001" +
    "\002\000\034\024\223\046\211\054\221\075\206\104\207" +
    "\105\220\106\230\107\137\114\212\115\222\116\225\117" +
    "\213\120\217\001\002\000\036\043\253\044\247\047\u0129" +
    "\053\250\054\243\056\251\057\255\066\246\073\244\074" +
    "\257\076\256\077\254\100\260\101\252\001\002\000\006" +
    "\050\uff4c\121\034\001\002\000\004\050\u012f\001\002\000" +
    "\006\017\u012c\121\uff89\001\002\000\010\016\136\050\uff4c" +
    "\121\034\001\002\000\004\121\uff8a\001\002\000\004\121" +
    "\uff8b\001\002\000\070\003\uff8d\011\uff8d\012\uff8d\014\uff8d" +
    "\016\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\051\uff8d\107" +
    "\uff8d\110\uff8d\114\uff8d\121\uff8d\001\002\000\070\003\uff4c" +
    "\011\uff4c\012\uff4c\014\uff4c\016\uff4c\020\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c" +
    "\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040" +
    "\uff4c\041\uff4c\051\uff4c\107\uff4c\110\uff4c\114\uff4c\121\034" +
    "\001\002\000\066\003\172\011\062\012\150\014\146\016" +
    "\136\020\122\021\125\022\163\023\154\025\060\026\072" +
    "\027\061\030\064\031\071\032\161\033\157\034\155\035" +
    "\152\036\142\037\134\040\132\041\120\051\uff91\107\137" +
    "\110\141\114\140\001\002\000\004\051\u0133\001\002\000" +
    "\006\017\uff8c\121\uff8c\001\002\000\066\003\143\011\062" +
    "\012\150\014\146\016\136\020\122\021\125\022\163\023" +
    "\154\025\060\026\072\027\061\030\064\031\071\032\161" +
    "\033\157\034\155\035\152\036\142\037\134\040\132\041" +
    "\120\051\uffdf\107\137\110\141\114\140\001\002\000\004" +
    "\051\uffe0\001\002\000\036\024\223\046\211\047\uff64\054" +
    "\221\075\206\104\207\105\220\106\230\107\137\114\212" +
    "\115\222\116\225\117\213\120\217\001\002\000\004\047" +
    "\u0138\001\002\000\004\121\uffb1\001\002\000\034\024\uffa1" +
    "\046\uffa1\054\uffa1\075\uffa1\104\uffa1\105\uffa1\106\uffa1\107" +
    "\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\001\002" +
    "\000\010\047\uffac\061\uffac\121\uffac\001\002\000\034\024" +
    "\uffa2\046\uffa2\054\uffa2\075\uffa2\104\uffa2\105\uffa2\106\uffa2" +
    "\107\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\001" +
    "\002\000\034\024\uffa4\046\uffa4\054\uffa4\075\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\114\uffa4\115\uffa4\116\uffa4\117" +
    "\uffa4\120\uffa4\001\002\000\034\024\223\046\211\054\221" +
    "\075\206\104\207\105\220\106\230\107\137\114\212\115" +
    "\222\116\225\117\213\120\217\001\002\000\034\024\uffa0" +
    "\046\uffa0\054\uffa0\075\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\001\002" +
    "\000\010\047\uffad\061\uffad\121\uffad\001\002\000\034\024" +
    "\uffa3\046\uffa3\054\uffa3\075\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\001" +
    "\002\000\042\043\253\044\247\047\uffae\053\250\054\243" +
    "\056\251\057\255\061\uffae\066\246\073\244\074\257\076" +
    "\256\077\254\100\260\101\252\121\uffae\001\002\000\036" +
    "\024\223\046\211\047\uff64\054\221\075\206\104\207\105" +
    "\220\106\230\107\137\114\212\115\222\116\225\117\213" +
    "\120\217\001\002\000\004\047\u0144\001\002\000\004\121" +
    "\uffb5\001\002\000\006\052\u0146\121\uffa6\001\002\000\034" +
    "\024\223\046\211\054\221\075\206\104\207\105\220\106" +
    "\230\107\137\114\212\115\222\116\225\117\213\120\217" +
    "\001\002\000\036\043\253\044\247\053\250\054\243\056" +
    "\251\057\255\066\246\073\244\074\257\076\256\077\254" +
    "\100\260\101\252\121\uffa8\001\002\000\022\011\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\107\uff9c\114\uff9c" +
    "\001\002\000\022\011\062\025\060\026\072\027\061\030" +
    "\064\031\071\107\375\114\212\001\002\000\004\114\u015a" +
    "\001\002\000\004\061\uff9b\001\002\000\004\061\uff96\001" +
    "\002\000\004\061\u014e\001\002\000\034\024\223\046\211" +
    "\054\221\075\206\104\207\105\220\106\230\107\137\114" +
    "\212\115\222\116\225\117\213\120\217\001\002\000\036" +
    "\043\253\044\247\053\250\054\243\056\251\057\255\061" +
    "\u0150\066\246\073\244\074\257\076\256\077\254\100\260" +
    "\101\252\001\002\000\006\107\375\114\212\001\002\000" +
    "\004\047\u0152\001\002\000\052\012\uff4c\014\uff4c\016\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\050\uff4c" +
    "\107\uff4c\110\uff4c\114\uff4c\121\034\001\002\000\004\121" +
    "\uff9a\001\002\000\050\012\150\014\146\016\136\020\122" +
    "\021\125\022\163\023\154\032\161\033\157\034\155\035" +
    "\152\036\142\037\134\040\132\041\120\050\u0155\107\137" +
    "\110\141\114\212\001\002\000\070\003\uff4c\011\uff4c\012" +
    "\uff4c\014\uff4c\016\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c" +
    "\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033" +
    "\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c" +
    "\051\uff4c\107\uff4c\110\uff4c\114\uff4c\121\034\001\002\000" +
    "\004\121\uff98\001\002\000\066\003\172\011\062\012\150" +
    "\014\146\016\136\020\122\021\125\022\163\023\154\025" +
    "\060\026\072\027\061\030\064\031\071\032\161\033\157" +
    "\034\155\035\152\036\142\037\134\040\132\041\120\051" +
    "\uff91\107\137\110\141\114\140\001\002\000\004\051\u0159" +
    "\001\002\000\004\121\uff99\001\002\000\004\052\u015b\001" +
    "\002\000\034\024\223\046\211\054\221\075\206\104\207" +
    "\105\220\106\230\107\137\114\212\115\222\116\225\117" +
    "\213\120\217\001\002\000\036\043\253\044\247\053\250" +
    "\054\243\056\251\057\255\061\uff97\066\246\073\244\074" +
    "\257\076\256\077\254\100\260\101\252\001\002\000\004" +
    "\114\212\001\002\000\036\024\223\046\211\047\uff64\054" +
    "\221\075\206\104\207\105\220\106\230\107\137\114\212" +
    "\115\222\116\225\117\213\120\217\001\002\000\004\047" +
    "\u0160\001\002\000\004\121\uffb4\001\002\000\022\011\062" +
    "\025\060\026\072\027\061\030\064\031\071\060\104\114" +
    "\102\001\002\000\004\047\uffdb\001\002\000\036\043\253" +
    "\044\247\053\250\054\243\056\251\057\255\066\246\073" +
    "\244\074\257\076\256\077\254\100\260\101\252\121\uffd6" +
    "\001\002\000\006\052\076\121\uffd5\001\002\000\004\121" +
    "\uffee\001\002\000\012\046\u0172\052\076\061\u0170\121\uffd5" +
    "\001\002\000\024\011\062\025\060\026\072\027\061\030" +
    "\064\031\071\047\uffdc\060\104\114\102\001\002\000\004" +
    "\047\uffe4\001\002\000\004\047\u016a\001\002\000\006\050" +
    "\uff4c\121\034\001\002\000\004\050\u016c\001\002\000\070" +
    "\003\uff4c\011\uff4c\012\uff4c\014\uff4c\016\uff4c\020\uff4c\021" +
    "\uff4c\022\uff4c\023\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c" +
    "\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037" +
    "\uff4c\040\uff4c\041\uff4c\051\uff4c\107\uff4c\110\uff4c\114\uff4c" +
    "\121\034\001\002\000\066\003\143\011\062\012\150\014" +
    "\146\016\136\020\122\021\125\022\163\023\154\025\060" +
    "\026\072\027\061\030\064\031\071\032\161\033\157\034" +
    "\155\035\152\036\142\037\134\040\132\041\120\051\uffe1" +
    "\107\137\110\141\114\140\001\002\000\004\051\u016f\001" +
    "\002\000\004\121\uffe3\001\002\000\004\114\u011e\001\002" +
    "\000\004\121\uffe9\001\002\000\024\011\062\025\060\026" +
    "\072\027\061\030\064\031\071\047\uffdc\060\104\114\102" +
    "\001\002\000\004\047\uffe8\001\002\000\004\047\u0175\001" +
    "\002\000\006\050\uff4c\121\034\001\002\000\004\050\u0177" +
    "\001\002\000\070\003\uff4c\011\uff4c\012\uff4c\014\uff4c\016" +
    "\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\025\uff4c\026\uff4c" +
    "\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\051\uff4c\107\uff4c" +
    "\110\uff4c\114\uff4c\121\034\001\002\000\066\003\143\011" +
    "\062\012\150\014\146\016\136\020\122\021\125\022\163" +
    "\023\154\025\060\026\072\027\061\030\064\031\071\032" +
    "\161\033\157\034\155\035\152\036\142\037\134\040\132" +
    "\041\120\051\uffe1\107\137\110\141\114\140\001\002\000" +
    "\004\051\u017a\001\002\000\004\121\uffe7\001\002\000\006" +
    "\052\076\121\uffd5\001\002\000\004\121\uffea\001\002\000" +
    "\004\046\u017e\001\002\000\024\011\062\025\060\026\072" +
    "\027\061\030\064\031\071\047\uffdc\060\104\114\102\001" +
    "\002\000\004\047\uffe6\001\002\000\004\047\u0181\001\002" +
    "\000\006\050\uff4c\121\034\001\002\000\004\050\u0183\001" +
    "\002\000\070\003\uff4c\011\uff4c\012\uff4c\014\uff4c\016\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\025\uff4c\026\uff4c\027" +
    "\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c" +
    "\036\uff4c\037\uff4c\040\uff4c\041\uff4c\051\uff4c\107\uff4c\110" +
    "\uff4c\114\uff4c\121\034\001\002\000\066\003\143\011\062" +
    "\012\150\014\146\016\136\020\122\021\125\022\163\023" +
    "\154\025\060\026\072\027\061\030\064\031\071\032\161" +
    "\033\157\034\155\035\152\036\142\037\134\040\132\041" +
    "\120\051\uffe1\107\137\110\141\114\140\001\002\000\004" +
    "\051\u0186\001\002\000\004\121\uffe5\001\002\000\020\011" +
    "\062\025\060\026\072\027\061\030\064\031\071\114\u0188" +
    "\001\002\000\004\044\u018b\001\002\000\004\044\u018a\001" +
    "\002\000\006\044\uffcd\114\uffcd\001\002\000\006\044\uffcc" +
    "\114\uffcc\001\002\000\004\050\u018d\001\002\000\036\003" +
    "\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\025\uff4c\026\uff4c" +
    "\027\uff4c\030\uff4c\031\uff4c\051\uff4c\113\uff4c\114\uff4c\121" +
    "\034\001\002\000\004\002\ufff4\001\002\000\004\004\u0190" +
    "\001\002\000\004\121\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\014\002\010\003\012\004\007\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\004\007\005\006\006\005\001\001\000\002\001" +
    "\001\000\006\004\016\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\022\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\072\026\074\025\001\001\000\004\011\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\031\001\001" +
    "\000\004\011\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\035\011\036\001\001\000\002\001\001" +
    "\000\010\010\043\012\037\014\045\001\001\000\004\013" +
    "\055\001\001\000\002\001\001\000\004\011\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\047\012\037\014\045\001\001" +
    "\000\002\001\001\000\004\011\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\054\012\037\014\045" +
    "\001\001\000\002\001\001\000\010\016\067\017\065\021" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\074\001\001\000\004\020\u0163\001\001\000\002" +
    "\001\001\000\034\035\u0162\052\213\053\223\054\225\055" +
    "\226\056\203\057\207\060\204\062\215\065\150\066\146" +
    "\067\122\070\123\001\001\000\016\016\067\017\104\021" +
    "\066\022\100\023\102\024\077\001\001\000\002\001\001" +
    "\000\004\075\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\113\001\001\000\002" +
    "\001\001\000\004\011\115\001\001\000\052\015\144\016" +
    "\067\017\126\021\066\025\143\026\161\027\134\030\157" +
    "\031\155\036\152\037\127\040\125\042\130\043\120\056" +
    "\116\060\132\065\150\066\146\067\122\070\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u013c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\u011e\033\310" +
    "\034\313\001\001\000\034\035\u011c\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\065\150" +
    "\066\146\067\122\070\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\163\001\001\000\002\001\001\000\004\101\165\001" +
    "\001\000\004\011\166\001\001\000\052\015\144\016\067" +
    "\017\126\021\066\027\170\030\157\031\155\036\152\037" +
    "\127\040\125\042\130\043\120\046\167\047\172\056\116" +
    "\060\132\065\150\066\146\067\122\070\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\015\144\016\067\017\126\021\066\027" +
    "\170\030\157\031\155\036\152\037\127\040\125\042\130" +
    "\043\120\047\174\056\116\060\132\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\050\015\144" +
    "\016\067\017\126\021\066\027\170\030\157\031\155\036" +
    "\152\037\127\040\125\042\130\043\120\047\176\056\116" +
    "\060\132\065\150\066\146\067\122\070\123\001\001\000" +
    "\002\001\001\000\004\011\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\035\214\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\065\150" +
    "\066\146\067\122\070\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\035\341\052\213\053\223\054\225" +
    "\055\226\056\203\057\207\060\204\062\215\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\016\321\035\322\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\065\150" +
    "\066\146\067\122\070\123\001\001\000\006\033\310\034" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\035\306\052\213\053\223\054\225\055\226" +
    "\056\203\057\207\060\204\062\215\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\014\056\231" +
    "\065\150\066\233\067\122\070\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\035\237\052\213\053\223\054\225\055\226\056\203\057" +
    "\207\060\204\062\215\063\236\064\240\065\150\066\146" +
    "\067\122\070\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\035\275" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\065\150\066\146\067\122\070\123\001\001" +
    "\000\034\035\274\052\213\053\223\054\225\055\226\056" +
    "\203\057\207\060\204\062\215\065\150\066\146\067\122" +
    "\070\123\001\001\000\036\035\237\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\063\273" +
    "\065\150\066\146\067\122\070\123\001\001\000\034\035" +
    "\272\052\213\053\223\054\225\055\226\056\203\057\207" +
    "\060\204\062\215\065\150\066\146\067\122\070\123\001" +
    "\001\000\034\035\271\052\213\053\223\054\225\055\226" +
    "\056\203\057\207\060\204\062\215\065\150\066\146\067" +
    "\122\070\123\001\001\000\034\035\270\052\213\053\223" +
    "\054\225\055\226\056\203\057\207\060\204\062\215\065" +
    "\150\066\146\067\122\070\123\001\001\000\034\035\267" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\065\150\066\146\067\122\070\123\001\001" +
    "\000\034\035\266\052\213\053\223\054\225\055\226\056" +
    "\203\057\207\060\204\062\215\065\150\066\146\067\122" +
    "\070\123\001\001\000\034\035\265\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\065\150" +
    "\066\146\067\122\070\123\001\001\000\034\035\264\052" +
    "\213\053\223\054\225\055\226\056\203\057\207\060\204" +
    "\062\215\065\150\066\146\067\122\070\123\001\001\000" +
    "\034\035\263\052\213\053\223\054\225\055\226\056\203" +
    "\057\207\060\204\062\215\065\150\066\146\067\122\070" +
    "\123\001\001\000\034\035\262\052\213\053\223\054\225" +
    "\055\226\056\203\057\207\060\204\062\215\065\150\066" +
    "\146\067\122\070\123\001\001\000\034\035\261\052\213" +
    "\053\223\054\225\055\226\056\203\057\207\060\204\062" +
    "\215\065\150\066\146\067\122\070\123\001\001\000\034" +
    "\035\260\052\213\053\223\054\225\055\226\056\203\057" +
    "\207\060\204\062\215\065\150\066\146\067\122\070\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\065\150\066\233\067" +
    "\300\070\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\065\302\066\233\067\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\065\302\066\233\067\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\035\317\052\213\053\223" +
    "\054\225\055\226\056\203\057\207\060\204\062\215\065" +
    "\150\066\146\067\122\070\123\001\001\000\040\035\237" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\063\236\064\315\065\150\066\146\067\122" +
    "\070\123\001\001\000\006\033\314\034\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\035\326\052\213\053\223" +
    "\054\225\055\226\056\203\057\207\060\204\062\215\065" +
    "\150\066\146\067\122\070\123\001\001\000\034\035\331" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\065\150\066\146\067\122\070\123\001\001" +
    "\000\002\001\001\000\034\035\330\052\213\053\223\054" +
    "\225\055\226\056\203\057\207\060\204\062\215\065\150" +
    "\066\146\067\122\070\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\035\335\052\213\053\223\054\225\055\226\056\203\057" +
    "\207\060\204\062\215\065\150\066\146\067\122\070\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\035" +
    "\340\052\213\053\223\054\225\055\226\056\203\057\207" +
    "\060\204\062\215\065\150\066\146\067\122\070\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\035\237" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\063\236\064\343\065\150\066\146\067\122" +
    "\070\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\035\237\052\213\053\223\054\225\055\226\056\203" +
    "\057\207\060\204\062\215\063\236\064\346\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\035\237\052\213\053\223\054\225\055" +
    "\226\056\203\057\207\060\204\062\215\063\236\064\351" +
    "\065\150\066\146\067\122\070\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\035\354\052\213\053\223" +
    "\054\225\055\226\056\203\057\207\060\204\062\215\065" +
    "\150\066\146\067\122\070\123\001\001\000\002\001\001" +
    "\000\006\011\357\050\356\001\001\000\002\001\001\000" +
    "\034\030\361\031\155\036\152\037\127\040\125\042\130" +
    "\043\120\056\116\060\132\065\150\066\146\067\122\070" +
    "\123\001\001\000\004\104\362\001\001\000\002\001\001" +
    "\000\004\011\363\001\001\000\052\015\144\016\067\017" +
    "\126\021\066\027\170\030\157\031\155\036\152\037\127" +
    "\040\125\042\130\043\120\046\364\047\172\056\116\060" +
    "\132\065\150\066\146\067\122\070\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\035\237\052\213\053" +
    "\223\054\225\055\226\056\203\057\207\060\204\062\215" +
    "\063\236\064\367\065\150\066\146\067\122\070\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\060\372" +
    "\065\150\066\146\067\375\070\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\065\150\066\u0100\067\375\070\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\065\302\066\u0102" +
    "\067\375\001\001\000\002\001\001\000\010\065\302\066" +
    "\u0104\067\375\001\001\000\002\001\001\000\004\011\u0106" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u010a\045\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u010e\001\001\000\006\044\u010d\045\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\015\144\016\067\017\126\021\066\027\170\030" +
    "\157\031\155\036\152\037\127\040\125\042\130\043\120" +
    "\047\u0111\056\116\060\132\065\150\066\146\067\122\070" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\015\144\016\067\017\126\021\066\027" +
    "\170\030\157\031\155\036\152\037\127\040\125\042\130" +
    "\043\120\047\u0115\056\116\060\132\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\015\144\016\067\017\126\021\066\025\u0118\026" +
    "\161\027\134\030\157\031\155\036\152\037\127\040\125" +
    "\042\130\043\120\056\116\060\132\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\040\035\237" +
    "\052\213\053\223\054\225\055\226\056\203\057\207\060" +
    "\204\062\215\063\236\064\u011a\065\150\066\146\067\122" +
    "\070\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\035\u0120\052\213\053\223\054\225\055\226\056\203\057" +
    "\207\060\204\062\215\065\150\066\146\067\122\070\123" +
    "\001\001\000\002\001\001\000\004\020\u0122\001\001\000" +
    "\002\001\001\000\012\065\150\066\u0100\067\300\070\u0124" +
    "\001\001\000\002\001\001\000\010\065\302\066\u0102\067" +
    "\303\001\001\000\034\035\u0127\052\213\053\223\054\225" +
    "\055\226\056\203\057\207\060\204\062\215\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\006" +
    "\011\u0129\071\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\u0129\042\u012d\071\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\u012f\001\001\000" +
    "\004\011\u0130\001\001\000\052\015\144\016\067\017\126" +
    "\021\066\027\170\030\157\031\155\036\152\037\127\040" +
    "\125\042\130\043\120\046\u0131\047\172\056\116\060\132" +
    "\065\150\066\146\067\122\070\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\015\144\016\067\017\126" +
    "\021\066\026\u0134\027\134\030\157\031\155\036\152\037" +
    "\127\040\125\042\130\043\120\056\116\060\132\065\150" +
    "\066\146\067\122\070\123\001\001\000\002\001\001\000" +
    "\040\035\237\052\213\053\223\054\225\055\226\056\203" +
    "\057\207\060\204\062\215\063\236\064\u0136\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\035\u0140\052\213\053\223" +
    "\054\225\055\226\056\203\057\207\060\204\062\215\065" +
    "\150\066\146\067\122\070\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\035\237\052\213\053\223\054\225\055\226\056\203" +
    "\057\207\060\204\062\215\063\236\064\u0142\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\035\u0146\052\213\053" +
    "\223\054\225\055\226\056\203\057\207\060\204\062\215" +
    "\065\150\066\146\067\122\070\123\001\001\000\002\001" +
    "\001\000\004\102\u0148\001\001\000\026\016\067\017\u0149" +
    "\021\066\031\u014b\041\u014a\060\132\065\150\066\146\067" +
    "\375\070\373\001\001\000\002\001\001\000\004\103\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\035" +
    "\u014e\052\213\053\223\054\225\055\226\056\203\057\207" +
    "\060\204\062\215\065\150\066\146\067\122\070\123\001" +
    "\001\000\002\001\001\000\016\031\u0150\060\132\065\150" +
    "\066\146\067\375\070\373\001\001\000\002\001\001\000" +
    "\006\011\u0153\051\u0152\001\001\000\002\001\001\000\034" +
    "\030\u0155\031\155\036\152\037\127\040\125\042\130\043" +
    "\120\056\116\060\132\065\150\066\146\067\122\070\123" +
    "\001\001\000\004\011\u0156\001\001\000\002\001\001\000" +
    "\052\015\144\016\067\017\126\021\066\027\170\030\157" +
    "\031\155\036\152\037\127\040\125\042\130\043\120\046" +
    "\u0157\047\172\056\116\060\132\065\150\066\146\067\122" +
    "\070\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\035\u015b\052\213\053\223\054\225" +
    "\055\226\056\203\057\207\060\204\062\215\065\150\066" +
    "\146\067\122\070\123\001\001\000\002\001\001\000\010" +
    "\065\302\066\u0104\067\305\001\001\000\040\035\237\052" +
    "\213\053\223\054\225\055\226\056\203\057\207\060\204" +
    "\062\215\063\236\064\u015e\065\150\066\146\067\122\070" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\067\017\104\021\066\023\u0161\024\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u0164\001\001" +
    "\000\002\001\001\000\004\061\u0170\001\001\000\016\016" +
    "\067\017\104\021\066\022\u0167\023\102\024\077\001\001" +
    "\000\004\100\u0168\001\001\000\002\001\001\000\004\011" +
    "\u016a\001\001\000\002\001\001\000\004\011\u016c\001\001" +
    "\000\052\015\144\016\067\017\126\021\066\025\u016d\026" +
    "\161\027\134\030\157\031\155\036\152\037\127\040\125" +
    "\042\130\043\120\056\116\060\132\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u017a\001\001\000\002\001\001\000\016\016" +
    "\067\017\104\021\066\022\u0172\023\102\024\077\001\001" +
    "\000\004\076\u0173\001\001\000\002\001\001\000\004\011" +
    "\u0175\001\001\000\002\001\001\000\004\011\u0177\001\001" +
    "\000\052\015\144\016\067\017\126\021\066\025\u0178\026" +
    "\161\027\134\030\157\031\155\036\152\037\127\040\125" +
    "\042\130\043\120\056\116\060\132\065\150\066\146\067" +
    "\122\070\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u017b\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\067\017\104\021\066\022\u017e\023\102" +
    "\024\077\001\001\000\004\077\u017f\001\001\000\002\001" +
    "\001\000\004\011\u0181\001\001\000\002\001\001\000\004" +
    "\011\u0183\001\001\000\052\015\144\016\067\017\126\021" +
    "\066\025\u0184\026\161\027\134\030\157\031\155\036\152" +
    "\037\127\040\125\042\130\043\120\056\116\060\132\065" +
    "\150\066\146\067\122\070\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\067\017\u0188\021\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\u018d\011" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }
   


    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // new_line ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // new_line ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // is_static ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // is_static ::= STATIC 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // visibility ::= 
            {
              Integer RESULT =null;
		RESULT = Sym.PRIVATE_ACCESS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // visibility ::= PRIVATE 
            {
              Integer RESULT =null;
		RESULT = Sym.PRIVATE_ACCESS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // visibility ::= PUBLIC 
            {
              Integer RESULT =null;
		RESULT = Sym.PUBLIC_ACCESS;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cast_value ::= LPAREN prim_type RPAREN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_value",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // simple_call ::= simple_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // simple_call ::= simple_var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // call_list ::= simple_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // call_list ::= call_list DOT simple_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // simple_var_call ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // simple_var_call ::= ID list_dim_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // method_call ::= simple_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // method_call ::= THIS DOT simple_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // method_call ::= call_list DOT simple_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // method_call ::= THIS DOT call_list DOT simple_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // var_call ::= simple_var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // var_call ::= THIS DOT simple_var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // var_call ::= call_list DOT simple_var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // var_call ::= THIS DOT call_list DOT simple_var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // args ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // args ::= expression COMA args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arg_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arg_list ::= args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // simple_method_call ::= ID LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_method_call",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instance ::= NEW ARRAY LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instance ::= NEW method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // op_ternario ::= LPAREN expression RPAREN ASK expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // op_ternario ::= LPAREN expression RPAREN ASK LBRACKET expression RBRACKET COLON LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arit_expression ::= MINUS expression 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arit_expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arit_expression ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arit_expression ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arit_expression ::= expression TIMES expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arit_expression ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arit_expression ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // logic_expression ::= expression LESS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // logic_expression ::= expression LEQL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // logic_expression ::= expression GREATER expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // logic_expression ::= expression GEQL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logic_expression ::= expression NOTEQL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logic_expression ::= expression EQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // logic_expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logic_expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logic_expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= var_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= cast_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= instance 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= arit_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= logic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= op_ternario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_sentence ::= DEFAULT COLON NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_sentence ::= CASE value COLON NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // list_case ::= case_sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // list_case ::= case_sentence list_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_statement ::= SWITCH LPAREN var_call RPAREN new_line LBRACKET NEWLINE list_case RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_statement ::= IF LPAREN expression RPAREN if_instructions 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_instructions 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_statement 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // if_instructions ::= new_line LBRACKET NT$11 new_line loop_inst RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		SymbolTableManager.closeBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_instructions",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$11 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // loop_inst_list ::= error NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // loop_inst_list ::= instruction NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // loop_inst_list ::= instruction NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // loop_inst ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // loop_inst ::= loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // loop_instructions ::= new_line non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // loop_instructions ::= new_line LBRACKET NT$10 new_line loop_inst RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		SymbolTableManager.closeBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$10 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_init ::= assign 
            {
              Sym RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_init ::= var_type ID EQL expression 
            {
              Sym RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		if(type!=null){
			Sym s = new Sym(id, idright,idleft);
			s.setType(type);
			RESULT = s; 
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_instructions ::= new_line non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_instructions ::= new_line LBRACKET new_line loop_inst RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= FOR LPAREN NT$8 for_init NT$9 COMA expression COMA assign RPAREN for_instructions 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sym s = (Sym)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		SymbolTableManager.closeBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sym s = (Sym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(s!=null && SymbolTableManager.getCurrentContext().getParent()!=null){
			if(!SymbolTableManager.addSymbol(s)){
				ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
			}
		}
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$8 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // do_while_statement ::= DO new_line LBRACKET NT$7 new_line loop_inst RBRACKET new_line WHILE LPAREN expression RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		SymbolTableManager.closeBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$7 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openBloque();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // while_statement ::= WHILE LPAREN expression RPAREN loop_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assign_op ::= DIVEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assign_op ::= TIMESEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assign_op ::= MINUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assign_op ::= PLUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assign_op ::= EQL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var_dec ::= ID var_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(SymbolTableManager.getCurrentContext().getParent()!=null){
				if(SymbolTableManager.typeExist(type)){
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(SymbolTableManager.getType(type));
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}else{
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_dec ::= var_type var_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(SymbolTableManager.getCurrentContext().getParent()!=null){
				if(type!=null){
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(type);
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_dec ::= ID var_list EQL expression 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			if(SymbolTableManager.getCurrentContext().getParent()!=null){
				if(SymbolTableManager.typeExist(type)){
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(SymbolTableManager.getType(type));
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}else{
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // var_dec ::= var_type var_list EQL expression 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			if(SymbolTableManager.getCurrentContext().getParent()!=null){
				if(type!=null){
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(type);
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dim ::= LHOOK expression RHOOK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_dim_array ::= dim 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_dim_array ::= dim list_dim_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign ::= var_call MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign ::= var_call PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign ::= var_call assign_op expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // non_dec_instruction ::= ARC0 LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // non_dec_instruction ::= RECTANGULO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // non_dec_instruction ::= POLIGONO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // non_dec_instruction ::= LINEA LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // non_dec_instruction ::= OVALO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // non_dec_instruction ::= IMPRIMIR LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // non_dec_instruction ::= LIENZO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // non_dec_instruction ::= TEXTO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // non_dec_instruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // non_dec_instruction ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_dec_instruction ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_dec_instruction ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // non_dec_instruction ::= method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // non_dec_instruction ::= switch_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_dec_instruction ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // non_dec_instruction ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // non_dec_instruction ::= do_while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // non_dec_instruction ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_dec_instruction ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruction ::= non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= CHR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= CAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_list ::= ID 
            {
              Stack<Sym> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Stack<Sym> ids = new Stack<>();
				ids.add(new Sym(id,idright,idleft));
				RESULT = ids;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_list ::= ID COMA var_list 
            {
              Stack<Sym> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				ids.add(new Sym(id,idright,idleft));
				RESULT = ids;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array_type ::= ARRAY LESS ID GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(SymbolTableManager.getType(type)==null){
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}else{
					Type t = new Type("Array");
					t.setSubtype(SymbolTableManager.getType(type));
					RESULT = t;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_type ::= ARRAY LESS var_type GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(type!=null){
					Type t = new Type("Array");
					t.setSubtype(type);
					RESULT = t;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // prim_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prim_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prim_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prim_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prim_type ::= INT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_type ::= array_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_type ::= prim_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dec_assign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dec_assign ::= EQL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param ::= ID ID 
            {
              Sym RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Sym s = new Sym(id,idright,idleft);
			if(SymbolTableManager.typeExist(type)){
				s.setType(SymbolTableManager.getType(type));
				RESULT = s;
			}else{
				ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				RESULT = null;
			}
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= var_type ID 
            {
              Sym RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Sym s = new Sym(id,idright,idleft);
			if(type!=null){
				s.setType(type);
				RESULT = s;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= REF prim_type ID 
            {
              Sym RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Sym s = new Sym(id,idright,idleft);
			s.setReference(true);
			if(type!=null){
				s.setType(type);
				RESULT = s;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_params ::= param 
            {
              Stack<Sym> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sym p = (Sym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Stack<Sym> syms = new Stack<>();
			if(p!=null)
				syms.add(p);
			RESULT = syms;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_params ::= param COMA list_params 
            {
              Stack<Sym> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sym p = (Sym)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> syms = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(p!=null)
				syms.add(p);
			RESULT = syms;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= 
            {
              Stack<Sym> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= list_params 
            {
              Stack<Sym> RESULT =null;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> syms = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = syms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_list_instructions ::= error NEWLINE method_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_list_instructions ::= instruction NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_list_instructions ::= instruction NEWLINE method_list_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_instructions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_instructions ::= method_list_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= visibility is_static ID LPAREN params NT$6 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
				SymbolTableManager.closeBloque();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$6 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				if(SymbolTableManager.getContext().getName().equals(id)&&!_s){
					Stack<Sym> syms = new Stack<>();
					Sym s = new Sym(id,idright,idleft);
					s.setAccessType(access);
					s.setStatic(_s);
					s.setConstructor(true);
					s.setType(SymbolTableManager.getContext());
					if(s.setArguments(p)){
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(id,idright,idleft,ErrorManager.METHOD_EXIST,Err.SEMANTIC);
						}else{
							SymbolTableManager.openMethodBloque(s);
							Sym s_this = new Sym("this",SymbolTableManager.getContext(),idright,idleft);
							Sym s_return = new Sym("return",SymbolTableManager.getContext(),idright,idleft);
							SymbolTableManager.addSymbol(s_this);
							SymbolTableManager.addSymbol(s_return);
						}
					}
				}else{
					ErrorManager.add(id,idright,idleft,ErrorManager.INVALID_METHOD_DEC,Err.SEMANTIC);
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration ::= visibility is_static VOID ID LPAREN params NT$5 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
				SymbolTableManager.closeBloque();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				Sym s = new Sym(id,null,idright,idleft);
				s.setAccessType(access);
				s.setStatic(_s);
				if(s.setArguments(p)){
					if(!SymbolTableManager.addSymbol(s)){
						ErrorManager.add(id,idright,idleft,ErrorManager.VAR_EXIST,Err.SEMANTIC);
					}else{
							SymbolTableManager.openMethodBloque(s);
							if(!_s){
								Sym s_this = new Sym("this",SymbolTableManager.getContext(),idright,idleft);
								SymbolTableManager.addSymbol(s_this);
							}
							Sym s_return = new Sym("return",idright,idleft);
							SymbolTableManager.addSymbol(s_return);
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= visibility is_static ID ID LPAREN params NT$4 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
				SymbolTableManager.closeBloque();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				if(SymbolTableManager.typeExist(type)){
					Sym s = new Sym(id,SymbolTableManager.getType(type),idright,idleft);
					s.setAccessType(access);
					s.setStatic(_s);
					if(s.setArguments(p)){
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(id,idright,idleft,ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}else{
							SymbolTableManager.openMethodBloque(s);
							if(!_s){
								Sym s_this = new Sym("this",SymbolTableManager.getContext(),idright,idleft);
								SymbolTableManager.addSymbol(s_this);
							}
							Sym s_return = new Sym("return",SymbolTableManager.getType(type),idright,idleft);
							SymbolTableManager.addSymbol(s_return);
						}
					}
				}else{
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= visibility is_static ID ID var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(SymbolTableManager.typeExist(type)){
					Sym s = new Sym(id,SymbolTableManager.getType(type),idright,idleft);
					s.setAccessType(access);
					s.setStatic(_s);
					if(!SymbolTableManager.addSymbol(s)){
						ErrorManager.add(id,idright,idleft,ErrorManager.VAR_EXIST,Err.SEMANTIC);
					}
				}else{
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= visibility is_static ID ID COMA var_list var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(SymbolTableManager.typeExist(type)){
					ids.push(new Sym(id,idright,idleft));
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(SymbolTableManager.getType(type));
						s.setAccessType(access);
						s.setStatic(_s);
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}else{
					ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
				}
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= visibility is_static var_type ID LPAREN params NT$3 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
				SymbolTableManager.closeBloque();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> p = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

				if(type!=null){
					Sym s = new Sym(id,type,idright,idleft);
					s.setAccessType(access);
					s.setStatic(_s);
					if(s.setArguments(p)){
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(id,idright,idleft,ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}else{
							SymbolTableManager.openMethodBloque(s);
							if(!_s){
								Sym s_this = new Sym("this",SymbolTableManager.getContext(),idright,idleft);
								SymbolTableManager.addSymbol(s_this);
							}
							Sym s_return = new Sym("return",type,idright,idleft);
							SymbolTableManager.addSymbol(s_return);
						}
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= visibility is_static var_type ID var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(type!=null){
					Sym s = new Sym(id,type,idright,idleft);
					s.setAccessType(access);
					s.setStatic(_s);
					if(!SymbolTableManager.addSymbol(s)){
						ErrorManager.add(id,idright,idleft,ErrorManager.VAR_EXIST,Err.SEMANTIC);
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= visibility is_static var_type ID COMA var_list var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(type!=null){
					ids.push(new Sym(id,idright,idleft));
					while(!ids.isEmpty()){
						Sym s = ids.pop();
						s.setType(type);
						s.setAccessType(access);
						s.setStatic(_s);
						if(!SymbolTableManager.addSymbol(s)){
							ErrorManager.add(s.getName(),s.getLine(),s.getColumn(),ErrorManager.VAR_EXIST,Err.SEMANTIC);
						}
					}
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_class_expr ::= error NEWLINE list_class_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_class_expr ::= declaration NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_class_expr ::= declaration NEWLINE list_class_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_body ::= new_line RBRACKET new_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_body ::= new_line list_class_expr RBRACKET new_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // init_class ::= PUBLIC CLASS ID NT$2 new_line LBRACKET class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		System.out.println("Clase reducida ID=" + id);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		Type t = new Type(id);
		if(SymbolTableManager.addType(t)){
			System.out.println("Context changed to " + id + "class...");
			SymbolTableManager.setContext(t);
			//SymbolTableManager.addSymbol(new Sym(t.getName(),t,idright,idleft));
		}else{
			ErrorManager.add(id,idright,idleft,ErrorManager.TYPE_EXIST,Err.SEMANTIC);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // init_class ::= PUBLIC CLASS ID NT$0 EXTENDS ID NT$1 new_line LBRACKET class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		if(SymbolTableManager.typeExist(type)){
			SymbolTableManager.inherits(SymbolTableManager.getType(type));
		}else{
			ErrorManager.add(type,typeright,typeleft,ErrorManager.UNDEFINED_TYPE,Err.SEMANTIC);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

		Type t = new Type(id);
		if(SymbolTableManager.addType(t)){
			System.out.println("Context changed to " + id + "class...");
			SymbolTableManager.setContext(t);
			//SymbolTableManager.addSymbol(new Sym(t.getName(),t,idright,idleft));
		}else{
			ErrorManager.add(id,idright,idleft,ErrorManager.TYPE_EXIST,Err.SEMANTIC);
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_import ::= SHARP IMPORT FILE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	String cfile = SymbolTableManager.getCurrentFile();
	String file = f.replaceAll("<","").replaceAll(">","");
	String f_path = ProjectManager.getFile(file);
	if(f_path!=null){
		String cf = SymbolTableManager.getCurrentFile();
		if(!TSParser.parseImport(f_path)){
			ErrorManager.add(f,fright,fleft,ErrorManager.CANT_PARSE,Err.SEMANTIC);
		}
		SymbolTableManager.setCurrentFile(cfile);
	}else{
		ErrorManager.add(f,fright,fleft,ErrorManager.FILE_NOT_FOUND,Err.SEMANTIC);
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_import ::= error NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_import ::= dec_import NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_import ::= dec_import NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // init_import ::= init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // init_import ::= list_import init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NEWLINE init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

