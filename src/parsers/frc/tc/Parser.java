
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 03 21:33:56 CST 2014
//----------------------------------------------------

package parsers.frc.tc;

import gui.forms.ProjectManager;
import java.util.Stack;
import java_cup.runtime.Symbol;
import parsers.frc.managers.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 03 21:33:56 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\005\005\000" +
    "\002\076\002\000\002\006\013\000\002\077\002\000\002" +
    "\006\011\000\002\007\006\000\002\007\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\005\000\002\014\011" +
    "\000\002\014\007\000\002\100\002\000\002\014\017\000" +
    "\002\014\011\000\002\014\007\000\002\101\002\000\002" +
    "\014\017\000\002\102\002\000\002\014\017\000\002\103" +
    "\002\000\002\014\016\000\002\025\003\000\002\025\002" +
    "\000\002\026\005\000\002\026\004\000\002\026\005\000" +
    "\002\022\003\000\002\022\002\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\004\000\002\024" +
    "\004\000\002\061\004\000\002\061\002\000\002\017\003" +
    "\000\002\017\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\021\006\000\002\021\006\000\002\020\005\000\002\020" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\004\000\002\030\003\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\033\004\000\002\033\003\000" +
    "\002\034\005\000\002\015\006\000\002\015\006\000\002" +
    "\015\004\000\002\015\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\036\007\000\002\104\002\000\002\037\016\000" +
    "\002\105\002\000\002\040\014\000\002\051\007\000\002" +
    "\051\004\000\002\041\006\000\002\041\003\000\002\106" +
    "\002\000\002\050\010\000\002\050\004\000\002\046\003" +
    "\000\002\046\002\000\002\047\005\000\002\047\004\000" +
    "\002\047\005\000\002\107\002\000\002\075\010\000\002" +
    "\042\011\000\002\042\011\000\002\042\007\000\002\043" +
    "\013\000\002\044\004\000\002\044\003\000\002\045\007" +
    "\000\002\045\006\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\053" +
    "\005\000\002\053\005\000\002\053\004\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\004\000\002\052\015" +
    "\000\002\052\011\000\002\055\007\000\002\055\007\000" +
    "\002\110\002\000\002\073\007\000\002\064\003\000\002" +
    "\064\002\000\002\063\005\000\002\063\003\000\002\067" +
    "\005\000\002\067\003\000\002\066\005\000\002\066\003" +
    "\000\002\065\005\000\002\065\003\000\002\070\003\000" +
    "\002\070\003\000\002\060\005\000\002\060\003\000\002" +
    "\056\005\000\002\056\003\000\002\072\004\000\002\072" +
    "\003\000\002\074\005\000\002\074\003\000\002\071\003" +
    "\000\002\071\003\000\002\057\006\000\002\012\003\000" +
    "\002\012\003\000\002\012\002\000\002\013\003\000\002" +
    "\013\002\000\002\011\003\000\002\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018b\000\012\003\012\006\005\042\004\121\014\001" +
    "\002\000\004\005\u018c\001\002\000\004\111\024\001\002" +
    "\000\004\002\ufffd\001\002\000\004\121\022\001\002\000" +
    "\004\006\005\001\002\000\004\002\020\001\002\000\004" +
    "\121\016\001\002\000\004\002\uffff\001\002\000\010\003" +
    "\012\006\005\042\004\001\002\000\004\002\000\001\002" +
    "\000\006\003\012\042\004\001\002\000\004\006\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\010\003\012\006\ufffb\042\004\001\002\000\004\006" +
    "\ufffc\001\002\000\004\114\025\001\002\000\010\050\ufff6" +
    "\112\ufff8\121\ufff6\001\002\000\006\050\uff4a\121\033\001" +
    "\002\000\004\112\030\001\002\000\004\114\031\001\002" +
    "\000\006\050\uff4a\121\033\001\002\000\004\050\034\001" +
    "\002\000\102\002\uff4b\003\uff4b\006\uff4b\007\uff4b\010\uff4b" +
    "\011\uff4b\012\uff4b\014\uff4b\016\uff4b\020\uff4b\021\uff4b\022" +
    "\uff4b\023\uff4b\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b" +
    "\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040" +
    "\uff4b\041\uff4b\050\uff4b\051\uff4b\107\uff4b\110\uff4b\113\uff4b" +
    "\114\uff4b\001\002\000\036\003\uff4a\006\uff4a\007\uff4a\010" +
    "\uff4a\011\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a" +
    "\051\uff4a\113\uff4a\114\uff4a\121\033\001\002\000\004\002" +
    "\ufff7\001\002\000\034\003\040\006\042\007\045\010\uff4e" +
    "\011\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e\051" +
    "\041\113\uff4e\114\uff4e\001\002\000\024\010\uff4c\011\uff4c" +
    "\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\113\055\114" +
    "\uff4c\001\002\000\004\121\053\001\002\000\006\002\uff4a" +
    "\121\033\001\002\000\024\010\uff50\011\uff50\025\uff50\026" +
    "\uff50\027\uff50\030\uff50\031\uff50\113\uff50\114\uff50\001\002" +
    "\000\004\051\050\001\002\000\004\121\046\001\002\000" +
    "\024\010\uff4f\011\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f" +
    "\031\uff4f\113\uff4f\114\uff4f\001\002\000\034\003\040\006" +
    "\042\007\045\010\uff4e\011\uff4e\025\uff4e\026\uff4e\027\uff4e" +
    "\030\uff4e\031\uff4e\051\ufff1\113\uff4e\114\uff4e\001\002\000" +
    "\004\051\ufff2\001\002\000\006\002\uff4a\121\033\001\002" +
    "\000\004\002\ufff4\001\002\000\004\002\ufff3\001\002\000" +
    "\032\003\040\006\042\007\045\010\uff4e\011\uff4e\025\uff4e" +
    "\026\uff4e\027\uff4e\030\uff4e\031\uff4e\113\uff4e\114\uff4e\001" +
    "\002\000\004\051\ufff0\001\002\000\022\010\uff4d\011\uff4d" +
    "\025\uff4d\026\uff4d\027\uff4d\030\uff4d\031\uff4d\114\uff4d\001" +
    "\002\000\022\010\062\011\061\025\057\026\071\027\060" +
    "\030\063\031\070\114\064\001\002\000\010\044\uffd3\047" +
    "\uffd3\114\uffd3\001\002\000\010\044\uffd1\047\uffd1\114\uffd1" +
    "\001\002\000\004\043\u0184\001\002\000\004\114\u017a\001" +
    "\002\000\010\044\uffd0\047\uffd0\114\uffd0\001\002\000\006" +
    "\046\u0164\114\u0163\001\002\000\004\114\072\001\002\000" +
    "\006\044\uffd5\114\uffd5\001\002\000\006\044\uffd4\114\uffd4" +
    "\001\002\000\010\044\uffcf\047\uffcf\114\uffcf\001\002\000" +
    "\010\044\uffd2\047\uffd2\114\uffd2\001\002\000\012\046\076" +
    "\052\075\061\073\121\uffd6\001\002\000\004\114\u0123\001" +
    "\002\000\004\121\uffee\001\002\000\034\024\227\046\213" +
    "\054\223\075\207\104\210\105\225\106\234\107\215\114" +
    "\214\115\226\116\232\117\216\120\221\001\002\000\024" +
    "\011\061\025\057\026\071\027\060\030\063\031\070\047" +
    "\uffdd\060\103\114\101\001\002\000\006\047\uffdb\061\u015e" +
    "\001\002\000\004\047\uffed\001\002\000\004\114\110\001" +
    "\002\000\004\047\uffde\001\002\000\014\025\057\026\071" +
    "\027\060\030\063\031\070\001\002\000\004\114\105\001" +
    "\002\000\006\047\uffd9\061\uffd9\001\002\000\004\114\107" +
    "\001\002\000\006\047\uffda\061\uffda\001\002\000\006\047" +
    "\uffd8\061\uffd8\001\002\000\004\047\112\001\002\000\006" +
    "\050\uff4a\121\033\001\002\000\004\050\114\001\002\000" +
    "\070\003\uff4a\011\uff4a\012\uff4a\014\uff4a\016\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\025\uff4a\026\uff4a\027\uff4a\030" +
    "\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a" +
    "\037\uff4a\040\uff4a\041\uff4a\051\uff4a\107\uff4a\110\uff4a\114" +
    "\uff4a\121\033\001\002\000\066\003\143\011\061\012\150" +
    "\014\146\016\135\020\121\021\124\022\163\023\154\025" +
    "\057\026\071\027\060\030\063\031\070\032\162\033\160" +
    "\034\155\035\152\036\142\037\133\040\131\041\117\051" +
    "\uffe2\107\136\110\140\114\137\001\002\000\004\121\uff62" +
    "\001\002\000\004\046\u015b\001\002\000\004\121\uffbd\001" +
    "\002\000\004\121\uffba\001\002\000\052\043\uff58\044\uff58" +
    "\045\uff52\047\uff58\051\uff58\053\uff58\054\uff58\056\uff58\057" +
    "\uff58\061\uff58\063\uff58\066\uff58\073\uff58\074\uff58\076\uff58" +
    "\077\uff58\100\uff58\101\uff58\103\uff58\121\uff58\001\002\000" +
    "\004\045\u0159\001\002\000\004\046\u0145\001\002\000\004" +
    "\121\uffbf\001\002\000\004\114\u0123\001\002\000\004\121" +
    "\uffc0\001\002\000\004\121\uffbe\001\002\000\004\046\u013f" +
    "\001\002\000\020\052\uff60\064\u013e\065\u013d\067\uff60\070" +
    "\uff60\071\uff60\072\uff60\001\002\000\004\046\u013a\001\002" +
    "\000\004\121\u0138\001\002\000\004\046\u012b\001\002\000" +
    "\004\045\u0129\001\002\000\030\045\uff56\046\uff69\052\uff56" +
    "\062\311\064\uff56\065\uff56\067\uff56\070\uff56\071\uff56\072" +
    "\uff56\114\u0123\001\002\000\036\024\227\046\213\054\223" +
    "\075\207\104\210\105\225\106\234\107\215\114\214\115" +
    "\226\116\232\117\216\120\221\121\uffb8\001\002\000\004" +
    "\121\uffbc\001\002\000\004\046\u011f\001\002\000\004\121" +
    "\u011d\001\002\000\004\051\u011c\001\002\000\004\121\uffc4" +
    "\001\002\000\004\121\uffbb\001\002\000\070\043\uff5a\044" +
    "\uff5a\045\uff53\047\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a" +
    "\056\uff5a\057\uff5a\061\uff5a\063\uff5a\064\uff5a\065\uff5a\066" +
    "\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a" +
    "\076\uff5a\077\uff5a\100\uff5a\101\uff5a\103\uff5a\121\uff5a\001" +
    "\002\000\004\046\u0100\001\002\000\004\045\uff54\001\002" +
    "\000\004\046\375\001\002\000\004\121\uffc1\001\002\000" +
    "\004\046\362\001\002\000\004\046\357\001\002\000\004" +
    "\121\uffc2\001\002\000\014\052\352\067\355\070\351\071" +
    "\350\072\354\001\002\000\004\046\345\001\002\000\004" +
    "\121\uffc3\001\002\000\004\046\342\001\002\000\006\050" +
    "\uff4a\121\033\001\002\000\004\051\uffe3\001\002\000\004" +
    "\050\166\001\002\000\070\003\uff9f\011\uff9f\012\uff9f\014" +
    "\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\051\uff9f" +
    "\107\uff9f\110\uff9f\114\uff9f\121\uff9f\001\002\000\070\003" +
    "\uff4a\011\uff4a\012\uff4a\014\uff4a\016\uff4a\020\uff4a\021\uff4a" +
    "\022\uff4a\023\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031" +
    "\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a" +
    "\040\uff4a\041\uff4a\051\uff4a\107\uff4a\110\uff4a\114\uff4a\121" +
    "\033\001\002\000\066\003\173\011\061\012\150\014\146" +
    "\016\135\020\121\021\124\022\163\023\154\025\057\026" +
    "\071\027\060\030\063\031\070\032\162\033\160\034\155" +
    "\035\152\036\142\037\133\040\131\041\117\051\uff93\107" +
    "\136\110\140\114\137\001\002\000\004\051\201\001\002" +
    "\000\004\121\177\001\002\000\004\121\175\001\002\000" +
    "\004\051\uff94\001\002\000\064\003\173\011\061\012\150" +
    "\014\146\016\135\020\121\021\124\022\163\023\154\025" +
    "\057\026\071\027\060\030\063\031\070\032\162\033\160" +
    "\034\155\035\152\036\142\037\133\040\131\041\117\107" +
    "\136\110\140\114\137\001\002\000\010\013\uff90\015\uff90" +
    "\051\uff90\001\002\000\072\003\173\011\061\012\150\013" +
    "\uff91\014\146\015\uff91\016\135\020\121\021\124\022\163" +
    "\023\154\025\057\026\071\027\060\030\063\031\070\032" +
    "\162\033\160\034\155\035\152\036\142\037\133\040\131" +
    "\041\117\051\uff91\107\136\110\140\114\137\001\002\000" +
    "\010\013\uff92\015\uff92\051\uff92\001\002\000\006\023\uff4a" +
    "\121\033\001\002\000\004\023\203\001\002\000\004\046" +
    "\204\001\002\000\034\024\227\046\213\054\223\075\207" +
    "\104\210\105\225\106\234\107\215\114\214\115\226\116" +
    "\232\117\216\120\221\001\002\000\050\043\uff5c\044\uff5c" +
    "\047\uff5c\051\uff5c\053\uff5c\054\uff5c\056\uff5c\057\uff5c\061" +
    "\uff5c\063\uff5c\066\uff5c\073\uff5c\074\uff5c\076\uff5c\077\uff5c" +
    "\100\uff5c\101\uff5c\103\uff5c\121\uff5c\001\002\000\050\043" +
    "\uff5d\044\uff5d\047\uff5d\051\uff5d\053\uff5d\054\uff5d\056\uff5d" +
    "\057\uff5d\061\uff5d\063\uff5d\066\uff5d\073\uff5d\074\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\101\uff5d\103\uff5d\121\uff5d\001\002" +
    "\000\034\024\227\046\213\054\223\075\207\104\210\105" +
    "\225\106\234\107\215\114\214\115\226\116\232\117\216" +
    "\120\221\001\002\000\050\043\uffc6\044\uffc6\047\uffc6\051" +
    "\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\061\uffc6\063\uffc6" +
    "\066\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\103\uffc6\121\uffc6\001\002\000\050\043\uff7f\044\uff7f" +
    "\047\uff7f\051\uff7f\053\uff7f\054\uff7f\056\uff7f\057\uff7f\061" +
    "\uff7f\063\uff7f\066\uff7f\073\uff7f\074\uff7f\076\uff7f\077\uff7f" +
    "\100\uff7f\101\uff7f\103\uff7f\121\uff7f\001\002\000\050\043" +
    "\uff80\044\uff80\047\uff80\051\uff80\053\uff80\054\uff80\056\uff80" +
    "\057\uff80\061\uff80\063\uff80\066\uff80\073\uff80\074\uff80\076" +
    "\uff80\077\uff80\100\uff80\101\uff80\103\uff80\121\uff80\001\002" +
    "\000\046\024\227\025\057\026\071\027\060\030\063\031" +
    "\070\046\213\054\223\075\207\104\210\105\225\106\234" +
    "\107\215\114\214\115\226\116\232\117\216\120\221\001" +
    "\002\000\074\043\uff56\044\uff56\045\uff56\046\uff69\047\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\056\uff56\057\uff56\061" +
    "\uff56\062\311\063\uff56\064\uff56\065\uff56\066\uff56\067\uff56" +
    "\070\uff56\071\uff56\072\uff56\073\uff56\074\uff56\076\uff56\077" +
    "\uff56\100\uff56\101\uff56\103\uff56\121\uff56\001\002\000\004" +
    "\045\305\001\002\000\050\043\uffca\044\uffca\047\uffca\051" +
    "\uffca\053\uffca\054\uffca\056\uffca\057\uffca\061\uffca\063\uffca" +
    "\066\uffca\073\uffca\074\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\103\uffca\121\uffca\001\002\000\050\043\uff85\044\uff85" +
    "\047\uff85\051\uff85\053\uff85\054\uff85\056\uff85\057\uff85\061" +
    "\uff85\063\uff85\066\uff85\073\uff85\074\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\103\uff85\121\uff85\001\002\000\036\043" +
    "\254\044\250\047\304\053\251\054\245\056\252\057\256" +
    "\066\247\073\244\074\260\076\257\077\255\100\261\101" +
    "\253\001\002\000\050\043\uffc9\044\uffc9\047\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\056\uffc9\057\uffc9\061\uffc9\063\uffc9\066" +
    "\uffc9\073\uffc9\074\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\103\uffc9\121\uffc9\001\002\000\050\043\uff81\044\uff81\047" +
    "\uff81\051\uff81\053\uff81\054\uff81\056\uff81\057\uff81\061\uff81" +
    "\063\uff81\066\uff81\073\uff81\074\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\103\uff81\121\uff81\001\002\000\034\024\227" +
    "\046\213\054\223\075\207\104\210\105\225\106\234\107" +
    "\215\114\214\115\226\116\232\117\216\120\221\001\002" +
    "\000\050\043\uff5e\044\uff5e\047\uff5e\051\uff5e\053\uff5e\054" +
    "\uff5e\056\uff5e\057\uff5e\061\uff5e\063\uff5e\066\uff5e\073\uff5e" +
    "\074\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\103\uff5e\121" +
    "\uff5e\001\002\000\050\043\uffc5\044\uffc5\047\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\063\uffc5\066" +
    "\uffc5\073\uffc5\074\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\103\uffc5\121\uffc5\001\002\000\050\043\uffc8\044\uffc8\047" +
    "\uffc8\051\uffc8\053\uffc8\054\uffc8\056\uffc8\057\uffc8\061\uffc8" +
    "\063\uffc8\066\uffc8\073\uffc8\074\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\103\uffc8\121\uffc8\001\002\000\006\011\236" +
    "\114\235\001\002\000\050\043\uff84\044\uff84\047\uff84\051" +
    "\uff84\053\uff84\054\uff84\056\uff84\057\uff84\061\uff84\063\uff84" +
    "\066\uff84\073\uff84\074\uff84\076\uff84\077\uff84\100\uff84\101" +
    "\uff84\103\uff84\121\uff84\001\002\000\050\043\uff83\044\uff83" +
    "\047\uff83\051\uff83\053\uff83\054\uff83\056\uff83\057\uff83\061" +
    "\uff83\063\uff83\066\uff83\073\uff83\074\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\103\uff83\121\uff83\001\002\000\050\043" +
    "\uffc7\044\uffc7\047\uffc7\051\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\057\uffc7\061\uffc7\063\uffc7\066\uffc7\073\uffc7\074\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\103\uffc7\121\uffc7\001\002" +
    "\000\050\043\uff82\044\uff82\047\uff82\051\uff82\053\uff82\054" +
    "\uff82\056\uff82\057\uff82\061\uff82\063\uff82\066\uff82\073\uff82" +
    "\074\uff82\076\uff82\077\uff82\100\uff82\101\uff82\103\uff82\121" +
    "\uff82\001\002\000\050\043\uff7e\044\uff7e\047\uff7e\051\uff7e" +
    "\053\uff7e\054\uff7e\056\uff7e\057\uff7e\061\uff7e\063\uff7e\066" +
    "\uff7e\073\uff7e\074\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\103\uff7e\121\uff7e\001\002\000\004\046\300\001\002\000" +
    "\004\046\237\001\002\000\036\024\227\046\213\047\uff66" +
    "\054\223\075\207\104\210\105\225\106\234\107\215\114" +
    "\214\115\226\116\232\117\216\120\221\001\002\000\004" +
    "\047\uff67\001\002\000\040\043\254\044\250\047\uff64\053" +
    "\251\054\245\056\252\057\256\061\246\066\247\073\244" +
    "\074\260\076\257\077\255\100\261\101\253\001\002\000" +
    "\004\047\243\001\002\000\050\043\uff6a\044\uff6a\047\uff6a" +
    "\051\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\061\uff6a\063" +
    "\uff6a\066\uff6a\073\uff6a\074\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\101\uff6a\103\uff6a\121\uff6a\001\002\000\034\024\227\046" +
    "\213\054\223\075\207\104\210\105\225\106\234\107\215" +
    "\114\214\115\226\116\232\117\216\120\221\001\002\000" +
    "\034\024\227\046\213\054\223\075\207\104\210\105\225" +
    "\106\234\107\215\114\214\115\226\116\232\117\216\120" +
    "\221\001\002\000\034\024\227\046\213\054\223\075\207" +
    "\104\210\105\225\106\234\107\215\114\214\115\226\116" +
    "\232\117\216\120\221\001\002\000\034\024\227\046\213" +
    "\054\223\075\207\104\210\105\225\106\234\107\215\114" +
    "\214\115\226\116\232\117\216\120\221\001\002\000\034" +
    "\024\227\046\213\054\223\075\207\104\210\105\225\106" +
    "\234\107\215\114\214\115\226\116\232\117\216\120\221" +
    "\001\002\000\034\024\227\046\213\054\223\075\207\104" +
    "\210\105\225\106\234\107\215\114\214\115\226\116\232" +
    "\117\216\120\221\001\002\000\034\024\227\046\213\054" +
    "\223\075\207\104\210\105\225\106\234\107\215\114\214" +
    "\115\226\116\232\117\216\120\221\001\002\000\034\024" +
    "\227\046\213\054\223\075\207\104\210\105\225\106\234" +
    "\107\215\114\214\115\226\116\232\117\216\120\221\001" +
    "\002\000\034\024\227\046\213\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\034\024\227\046\213\054\223" +
    "\075\207\104\210\105\225\106\234\107\215\114\214\115" +
    "\226\116\232\117\216\120\221\001\002\000\034\024\227" +
    "\046\213\054\223\075\207\104\210\105\225\106\234\107" +
    "\215\114\214\115\226\116\232\117\216\120\221\001\002" +
    "\000\034\024\227\046\213\054\223\075\207\104\210\105" +
    "\225\106\234\107\215\114\214\115\226\116\232\117\216" +
    "\120\221\001\002\000\034\024\227\046\213\054\223\075" +
    "\207\104\210\105\225\106\234\107\215\114\214\115\226" +
    "\116\232\117\216\120\221\001\002\000\034\024\227\046" +
    "\213\054\223\075\207\104\210\105\225\106\234\107\215" +
    "\114\214\115\226\116\232\117\216\120\221\001\002\000" +
    "\050\043\254\044\250\047\uff78\051\uff78\053\251\054\245" +
    "\056\252\057\256\061\uff78\063\uff78\066\247\073\uff78\074" +
    "\uff78\076\uff78\077\uff78\100\uff78\101\253\103\uff78\121\uff78" +
    "\001\002\000\050\043\254\044\250\047\uff7d\051\uff7d\053" +
    "\251\054\245\056\252\057\256\061\uff7d\063\uff7d\066\247" +
    "\073\244\074\uff7d\076\257\077\255\100\261\101\253\103" +
    "\uff7d\121\uff7d\001\002\000\050\043\254\044\250\047\uff7a" +
    "\051\uff7a\053\251\054\245\056\252\057\256\061\uff7a\063" +
    "\uff7a\066\247\073\uff7a\074\uff7a\076\uff7a\077\255\100\261" +
    "\101\253\103\uff7a\121\uff7a\001\002\000\050\043\uff72\044" +
    "\uff72\047\uff72\051\uff72\053\uff72\054\uff72\056\uff72\057\uff72" +
    "\061\uff72\063\uff72\066\247\073\uff72\074\uff72\076\uff72\077" +
    "\uff72\100\uff72\101\uff72\103\uff72\121\uff72\001\002\000\050" +
    "\043\254\044\250\047\uff79\051\uff79\053\251\054\245\056" +
    "\252\057\256\061\uff79\063\uff79\066\247\073\uff79\074\uff79" +
    "\076\uff79\077\uff79\100\261\101\253\103\uff79\121\uff79\001" +
    "\002\000\050\043\uff75\044\uff75\047\uff75\051\uff75\053\251" +
    "\054\245\056\252\057\256\061\uff75\063\uff75\066\247\073" +
    "\uff75\074\uff75\076\uff75\077\uff75\100\uff75\101\uff75\103\uff75" +
    "\121\uff75\001\002\000\050\043\254\044\250\047\uff76\051" +
    "\uff76\053\251\054\245\056\252\057\256\061\uff76\063\uff76" +
    "\066\247\073\uff76\074\uff76\076\uff76\077\uff76\100\uff76\101" +
    "\uff76\103\uff76\121\uff76\001\002\000\050\043\uff71\044\uff71" +
    "\047\uff71\051\uff71\053\uff71\054\uff71\056\uff71\057\uff71\061" +
    "\uff71\063\uff71\066\247\073\uff71\074\uff71\076\uff71\077\uff71" +
    "\100\uff71\101\uff71\103\uff71\121\uff71\001\002\000\050\043" +
    "\uff74\044\uff74\047\uff74\051\uff74\053\uff74\054\uff74\056\252" +
    "\057\256\061\uff74\063\uff74\066\247\073\uff74\074\uff74\076" +
    "\uff74\077\uff74\100\uff74\101\uff74\103\uff74\121\uff74\001\002" +
    "\000\050\043\254\044\uff77\047\uff77\051\uff77\053\251\054" +
    "\245\056\252\057\256\061\uff77\063\uff77\066\247\073\uff77" +
    "\074\uff77\076\uff77\077\uff77\100\uff77\101\uff77\103\uff77\121" +
    "\uff77\001\002\000\050\043\uff70\044\uff70\047\uff70\051\uff70" +
    "\053\uff70\054\uff70\056\uff70\057\uff70\061\uff70\063\uff70\066" +
    "\uff70\073\uff70\074\uff70\076\uff70\077\uff70\100\uff70\101\uff70" +
    "\103\uff70\121\uff70\001\002\000\004\047\uff65\001\002\000" +
    "\050\043\uff73\044\uff73\047\uff73\051\uff73\053\uff73\054\uff73" +
    "\056\252\057\256\061\uff73\063\uff73\066\247\073\uff73\074" +
    "\uff73\076\uff73\077\uff73\100\uff73\101\uff73\103\uff73\121\uff73" +
    "\001\002\000\050\043\254\044\250\047\uff7c\051\uff7c\053" +
    "\251\054\245\056\252\057\256\061\uff7c\063\uff7c\066\247" +
    "\073\uff7c\074\uff7c\076\257\077\255\100\261\101\253\103" +
    "\uff7c\121\uff7c\001\002\000\036\024\227\046\213\047\uff66" +
    "\054\223\075\207\104\210\105\225\106\234\107\215\114" +
    "\214\115\226\116\232\117\216\120\221\001\002\000\004" +
    "\047\302\001\002\000\050\043\uff6b\044\uff6b\047\uff6b\051" +
    "\uff6b\053\uff6b\054\uff6b\056\uff6b\057\uff6b\061\uff6b\063\uff6b" +
    "\066\uff6b\073\uff6b\074\uff6b\076\uff6b\077\uff6b\100\uff6b\101" +
    "\uff6b\103\uff6b\121\uff6b\001\002\000\050\043\uff6e\044\uff6e" +
    "\047\uff6e\051\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e\061" +
    "\uff6e\063\uff6e\066\uff6e\073\uff6e\074\uff6e\076\uff6e\077\uff6e" +
    "\100\uff6e\101\uff6e\103\uff6e\121\uff6e\001\002\000\004\121" +
    "\uff9e\001\002\000\004\114\214\001\002\000\050\043\uff5f" +
    "\044\uff5f\047\uff5f\051\uff5f\053\uff5f\054\uff5f\056\uff5f\057" +
    "\uff5f\061\uff5f\063\uff5f\066\uff5f\073\uff5f\074\uff5f\076\uff5f" +
    "\077\uff5f\100\uff5f\101\uff5f\103\uff5f\121\uff5f\001\002\000" +
    "\004\046\316\001\002\000\070\043\uff57\044\uff57\045\uff57" +
    "\047\uff57\051\uff57\052\uff57\053\uff57\054\uff57\056\uff57\057" +
    "\uff57\061\uff57\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\076\uff57\077" +
    "\uff57\100\uff57\101\uff57\103\uff57\121\uff57\001\002\000\034" +
    "\024\227\046\213\054\223\075\207\104\210\105\225\106" +
    "\234\107\215\114\214\115\226\116\232\117\216\120\221" +
    "\001\002\000\072\043\uffab\044\uffab\045\uffab\047\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\056\uffab\057\uffab\061\uffab" +
    "\062\311\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\071\uffab\072\uffab\073\uffab\074\uffab\076\uffab\077\uffab" +
    "\100\uffab\101\uffab\103\uffab\121\uffab\001\002\000\070\043" +
    "\uffac\044\uffac\045\uffac\047\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\056\uffac\057\uffac\061\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\076\uffac\077\uffac\100\uffac\101\uffac\103\uffac\121" +
    "\uffac\001\002\000\036\043\254\044\250\053\251\054\245" +
    "\056\252\057\256\063\315\066\247\073\244\074\260\076" +
    "\257\077\255\100\261\101\253\001\002\000\072\043\uffaa" +
    "\044\uffaa\045\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\103\uffaa" +
    "\121\uffaa\001\002\000\036\024\227\046\213\047\uff66\054" +
    "\223\075\207\104\210\105\225\106\234\107\215\114\214" +
    "\115\226\116\232\117\216\120\221\001\002\000\004\047" +
    "\320\001\002\000\052\043\uff68\044\uff68\045\uff68\047\uff68" +
    "\051\uff68\053\uff68\054\uff68\056\uff68\057\uff68\061\uff68\063" +
    "\uff68\066\uff68\073\uff68\074\uff68\076\uff68\077\uff68\100\uff68" +
    "\101\uff68\103\uff68\121\uff68\001\002\000\004\047\337\001" +
    "\002\000\036\043\254\044\250\047\323\053\251\054\245" +
    "\056\252\057\256\066\247\073\244\074\260\076\257\077" +
    "\255\100\261\101\253\001\002\000\052\043\uff6f\044\uff6f" +
    "\047\uff6f\051\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\061" +
    "\uff6f\063\uff6f\066\uff6f\073\uff6f\074\uff6f\076\uff6f\077\uff6f" +
    "\100\uff6f\101\uff6f\102\324\103\uff6f\121\uff6f\001\002\000" +
    "\036\024\227\046\213\050\325\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\034\024\227\046\213\054\223" +
    "\075\207\104\210\105\225\106\234\107\215\114\214\115" +
    "\226\116\232\117\216\120\221\001\002\000\036\043\254" +
    "\044\250\053\251\054\245\056\252\057\256\066\247\073" +
    "\244\074\260\076\257\077\255\100\261\101\253\103\327" +
    "\001\002\000\034\024\227\046\213\054\223\075\207\104" +
    "\210\105\225\106\234\107\215\114\214\115\226\116\232" +
    "\117\216\120\221\001\002\000\050\043\254\044\250\047" +
    "\uff6c\051\uff6c\053\251\054\245\056\252\057\256\061\uff6c" +
    "\063\uff6c\066\247\073\244\074\260\076\257\077\255\100" +
    "\261\101\253\103\uff6c\121\uff6c\001\002\000\036\043\254" +
    "\044\250\051\332\053\251\054\245\056\252\057\256\066" +
    "\247\073\244\074\260\076\257\077\255\100\261\101\253" +
    "\001\002\000\004\103\333\001\002\000\004\050\334\001" +
    "\002\000\034\024\227\046\213\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\036\043\254\044\250\051\336" +
    "\053\251\054\245\056\252\057\256\066\247\073\244\074" +
    "\260\076\257\077\255\100\261\101\253\001\002\000\050" +
    "\043\uff6d\044\uff6d\047\uff6d\051\uff6d\053\uff6d\054\uff6d\056" +
    "\uff6d\057\uff6d\061\uff6d\063\uff6d\066\uff6d\073\uff6d\074\uff6d" +
    "\076\uff6d\077\uff6d\100\uff6d\101\uff6d\103\uff6d\121\uff6d\001" +
    "\002\000\034\024\227\046\213\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\050\043\254\044\250\047\uff51" +
    "\051\uff51\053\251\054\245\056\252\057\256\061\uff51\063" +
    "\uff51\066\247\073\244\074\260\076\257\077\255\100\261" +
    "\101\253\103\uff51\121\uff51\001\002\000\050\043\254\044" +
    "\250\047\uff7b\051\uff7b\053\251\054\245\056\252\057\256" +
    "\061\uff7b\063\uff7b\066\247\073\uff7b\074\uff7b\076\257\077" +
    "\255\100\261\101\253\103\uff7b\121\uff7b\001\002\000\036" +
    "\024\227\046\213\047\uff66\054\223\075\207\104\210\105" +
    "\225\106\234\107\215\114\214\115\226\116\232\117\216" +
    "\120\221\001\002\000\004\047\344\001\002\000\004\121" +
    "\uffb3\001\002\000\036\024\227\046\213\047\uff66\054\223" +
    "\075\207\104\210\105\225\106\234\107\215\114\214\115" +
    "\226\116\232\117\216\120\221\001\002\000\004\047\347" +
    "\001\002\000\004\121\uffb7\001\002\000\034\024\uffa2\046" +
    "\uffa2\054\uffa2\075\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\001\002\000" +
    "\034\024\uffa3\046\uffa3\054\uffa3\075\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\107\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\120" +
    "\uffa3\001\002\000\034\024\uffa5\046\uffa5\054\uffa5\075\uffa5" +
    "\104\uffa5\105\uffa5\106\uffa5\107\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\001\002\000\034\024\227\046\213" +
    "\054\223\075\207\104\210\105\225\106\234\107\215\114" +
    "\214\115\226\116\232\117\216\120\221\001\002\000\034" +
    "\024\uffa1\046\uffa1\054\uffa1\075\uffa1\104\uffa1\105\uffa1\106" +
    "\uffa1\107\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\001\002\000\034\024\uffa4\046\uffa4\054\uffa4\075\uffa4\104" +
    "\uffa4\105\uffa4\106\uffa4\107\uffa4\114\uffa4\115\uffa4\116\uffa4" +
    "\117\uffa4\120\uffa4\001\002\000\042\043\254\044\250\047" +
    "\uffaf\053\251\054\245\056\252\057\256\061\uffaf\066\247" +
    "\073\244\074\260\076\257\077\255\100\261\101\253\121" +
    "\uffaf\001\002\000\036\024\227\046\213\047\uff66\054\223" +
    "\075\207\104\210\105\225\106\234\107\215\114\214\115" +
    "\226\116\232\117\216\120\221\001\002\000\004\047\361" +
    "\001\002\000\004\121\uffb0\001\002\000\034\024\227\046" +
    "\213\054\223\075\207\104\210\105\225\106\234\107\215" +
    "\114\214\115\226\116\232\117\216\120\221\001\002\000" +
    "\036\043\254\044\250\047\364\053\251\054\245\056\252" +
    "\057\256\066\247\073\244\074\260\076\257\077\255\100" +
    "\261\101\253\001\002\000\052\012\uff4a\014\uff4a\016\uff4a" +
    "\020\uff4a\021\uff4a\022\uff4a\023\uff4a\032\uff4a\033\uff4a\034" +
    "\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\050\uff4a" +
    "\107\uff4a\110\uff4a\114\uff4a\121\033\001\002\000\004\121" +
    "\uffa0\001\002\000\050\012\150\014\146\016\135\020\121" +
    "\021\124\022\163\023\154\032\162\033\160\034\155\035" +
    "\152\036\142\037\133\040\131\041\117\050\367\107\136" +
    "\110\140\114\214\001\002\000\070\003\uff97\011\uff97\012" +
    "\uff97\014\uff97\016\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\051\uff97\107\uff97\110\uff97\114\uff97\121\uff97\001\002\000" +
    "\004\121\uff95\001\002\000\070\003\uff4a\011\uff4a\012\uff4a" +
    "\014\uff4a\016\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\025" +
    "\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\051" +
    "\uff4a\107\uff4a\110\uff4a\114\uff4a\121\033\001\002\000\066" +
    "\003\173\011\061\012\150\014\146\016\135\020\121\021" +
    "\124\022\163\023\154\025\057\026\071\027\060\030\063" +
    "\031\070\032\162\033\160\034\155\035\152\036\142\037" +
    "\133\040\131\041\117\051\uff93\107\136\110\140\114\137" +
    "\001\002\000\004\051\374\001\002\000\004\121\uff96\001" +
    "\002\000\036\024\227\046\213\047\uff66\054\223\075\207" +
    "\104\210\105\225\106\234\107\215\114\214\115\226\116" +
    "\232\117\216\120\221\001\002\000\004\047\377\001\002" +
    "\000\004\121\uffb1\001\002\000\006\107\u0104\114\214\001" +
    "\002\000\004\047\uff60\001\002\000\004\045\u0119\001\002" +
    "\000\004\047\u0108\001\002\000\004\045\u0106\001\002\000" +
    "\004\045\uff52\001\002\000\004\114\214\001\002\000\016" +
    "\047\uff61\052\uff61\067\uff61\070\uff61\071\uff61\072\uff61\001" +
    "\002\000\006\050\uff4a\121\033\001\002\000\004\050\u010a" +
    "\001\002\000\004\121\u010b\001\002\000\006\013\u010e\015" +
    "\u010c\001\002\000\004\103\u0116\001\002\000\004\051\u0115" +
    "\001\002\000\016\104\210\105\225\115\226\116\232\117" +
    "\216\120\221\001\002\000\010\013\u010e\015\u010c\051\uff88" +
    "\001\002\000\004\051\uff89\001\002\000\004\103\u0112\001" +
    "\002\000\004\121\u0113\001\002\000\064\003\173\011\061" +
    "\012\150\014\146\016\135\020\121\021\124\022\163\023" +
    "\154\025\057\026\071\027\060\030\063\031\070\032\162" +
    "\033\160\034\155\035\152\036\142\037\133\040\131\041" +
    "\117\107\136\110\140\114\137\001\002\000\010\013\uff87" +
    "\015\uff87\051\uff87\001\002\000\004\121\uff8a\001\002\000" +
    "\004\121\u0117\001\002\000\064\003\173\011\061\012\150" +
    "\014\146\016\135\020\121\021\124\022\163\023\154\025" +
    "\057\026\071\027\060\030\063\031\070\032\162\033\160" +
    "\034\155\035\152\036\142\037\133\040\131\041\117\107" +
    "\136\110\140\114\137\001\002\000\010\013\uff86\015\uff86" +
    "\051\uff86\001\002\000\004\114\214\001\002\000\004\045" +
    "\uff55\001\002\000\070\043\uff5b\044\uff5b\045\uff53\047\uff5b" +
    "\051\uff5b\052\uff5b\053\uff5b\054\uff5b\056\uff5b\057\uff5b\061" +
    "\uff5b\063\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b" +
    "\071\uff5b\072\uff5b\073\uff5b\074\uff5b\076\uff5b\077\uff5b\100" +
    "\uff5b\101\uff5b\103\uff5b\121\uff5b\001\002\000\004\121\uffec" +
    "\001\002\000\066\003\143\011\061\012\150\014\146\016" +
    "\135\020\121\021\124\022\163\023\154\025\057\026\071" +
    "\027\060\030\063\031\070\032\162\033\160\034\155\035" +
    "\152\036\142\037\133\040\131\041\117\051\uffe2\107\136" +
    "\110\140\114\137\001\002\000\004\051\uffdf\001\002\000" +
    "\036\024\227\046\213\047\uff66\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\004\047\u0121\001\002\000\004" +
    "\121\uffb4\001\002\000\036\043\254\044\250\053\251\054" +
    "\245\056\252\057\256\066\247\073\244\074\260\076\257" +
    "\077\255\100\261\101\253\121\uffb9\001\002\000\010\052" +
    "\uffcb\061\u0127\121\uffcb\001\002\000\006\052\u0125\121\uffa6" +
    "\001\002\000\034\024\227\046\213\054\223\075\207\104" +
    "\210\105\225\106\234\107\215\114\214\115\226\116\232" +
    "\117\216\120\221\001\002\000\036\043\254\044\250\053" +
    "\251\054\245\056\252\057\256\066\247\073\244\074\260" +
    "\076\257\077\255\100\261\101\253\121\uffa8\001\002\000" +
    "\004\114\u0123\001\002\000\006\052\uffcc\121\uffcc\001\002" +
    "\000\004\114\214\001\002\000\004\121\uff63\001\002\000" +
    "\034\024\227\046\213\054\223\075\207\104\210\105\225" +
    "\106\234\107\215\114\214\115\226\116\232\117\216\120" +
    "\221\001\002\000\036\043\254\044\250\047\u012d\053\251" +
    "\054\245\056\252\057\256\066\247\073\244\074\260\076" +
    "\257\077\255\100\261\101\253\001\002\000\006\050\uff4a" +
    "\121\033\001\002\000\004\050\u0133\001\002\000\006\017" +
    "\u0130\121\uff8b\001\002\000\010\016\135\050\uff4a\121\033" +
    "\001\002\000\004\121\uff8c\001\002\000\004\121\uff8d\001" +
    "\002\000\070\003\uff8f\011\uff8f\012\uff8f\014\uff8f\016\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\051\uff8f\107\uff8f\110" +
    "\uff8f\114\uff8f\121\uff8f\001\002\000\070\003\uff4a\011\uff4a" +
    "\012\uff4a\014\uff4a\016\uff4a\020\uff4a\021\uff4a\022\uff4a\023" +
    "\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a" +
    "\033\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041" +
    "\uff4a\051\uff4a\107\uff4a\110\uff4a\114\uff4a\121\033\001\002" +
    "\000\066\003\173\011\061\012\150\014\146\016\135\020" +
    "\121\021\124\022\163\023\154\025\057\026\071\027\060" +
    "\030\063\031\070\032\162\033\160\034\155\035\152\036" +
    "\142\037\133\040\131\041\117\051\uff93\107\136\110\140" +
    "\114\137\001\002\000\004\051\u0137\001\002\000\006\017" +
    "\uff8e\121\uff8e\001\002\000\066\003\143\011\061\012\150" +
    "\014\146\016\135\020\121\021\124\022\163\023\154\025" +
    "\057\026\071\027\060\030\063\031\070\032\162\033\160" +
    "\034\155\035\152\036\142\037\133\040\131\041\117\051" +
    "\uffe0\107\136\110\140\114\137\001\002\000\004\051\uffe1" +
    "\001\002\000\036\024\227\046\213\047\uff66\054\223\075" +
    "\207\104\210\105\225\106\234\107\215\114\214\115\226" +
    "\116\232\117\216\120\221\001\002\000\004\047\u013c\001" +
    "\002\000\004\121\uffb2\001\002\000\010\047\uffad\061\uffad" +
    "\121\uffad\001\002\000\010\047\uffae\061\uffae\121\uffae\001" +
    "\002\000\036\024\227\046\213\047\uff66\054\223\075\207" +
    "\104\210\105\225\106\234\107\215\114\214\115\226\116" +
    "\232\117\216\120\221\001\002\000\004\047\u0141\001\002" +
    "\000\004\121\uffb6\001\002\000\006\052\u0143\121\uffa7\001" +
    "\002\000\034\024\227\046\213\054\223\075\207\104\210" +
    "\105\225\106\234\107\215\114\214\115\226\116\232\117" +
    "\216\120\221\001\002\000\036\043\254\044\250\053\251" +
    "\054\245\056\252\057\256\066\247\073\244\074\260\076" +
    "\257\077\255\100\261\101\253\121\uffa9\001\002\000\022" +
    "\011\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\107" +
    "\uff9d\114\uff9d\001\002\000\022\011\061\025\057\026\071" +
    "\027\060\030\063\031\070\107\u0104\114\214\001\002\000" +
    "\004\114\u0156\001\002\000\004\061\u014a\001\002\000\004" +
    "\061\uff98\001\002\000\034\024\227\046\213\054\223\075" +
    "\207\104\210\105\225\106\234\107\215\114\214\115\226" +
    "\116\232\117\216\120\221\001\002\000\036\043\254\044" +
    "\250\053\251\054\245\056\252\057\256\061\u014c\066\247" +
    "\073\244\074\260\076\257\077\255\100\261\101\253\001" +
    "\002\000\006\107\u0104\114\214\001\002\000\004\047\u014e" +
    "\001\002\000\052\012\uff4a\014\uff4a\016\uff4a\020\uff4a\021" +
    "\uff4a\022\uff4a\023\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a" +
    "\036\uff4a\037\uff4a\040\uff4a\041\uff4a\050\uff4a\107\uff4a\110" +
    "\uff4a\114\uff4a\121\033\001\002\000\004\121\uff9c\001\002" +
    "\000\050\012\150\014\146\016\135\020\121\021\124\022" +
    "\163\023\154\032\162\033\160\034\155\035\152\036\142" +
    "\037\133\040\131\041\117\050\u0151\107\136\110\140\114" +
    "\214\001\002\000\070\003\uff4a\011\uff4a\012\uff4a\014\uff4a" +
    "\016\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\025\uff4a\026" +
    "\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a" +
    "\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\051\uff4a\107" +
    "\uff4a\110\uff4a\114\uff4a\121\033\001\002\000\004\121\uff9a" +
    "\001\002\000\066\003\173\011\061\012\150\014\146\016" +
    "\135\020\121\021\124\022\163\023\154\025\057\026\071" +
    "\027\060\030\063\031\070\032\162\033\160\034\155\035" +
    "\152\036\142\037\133\040\131\041\117\051\uff93\107\136" +
    "\110\140\114\137\001\002\000\004\051\u0155\001\002\000" +
    "\004\121\uff9b\001\002\000\004\052\u0157\001\002\000\034" +
    "\024\227\046\213\054\223\075\207\104\210\105\225\106" +
    "\234\107\215\114\214\115\226\116\232\117\216\120\221" +
    "\001\002\000\036\043\254\044\250\053\251\054\245\056" +
    "\252\057\256\061\uff99\066\247\073\244\074\260\076\257" +
    "\077\255\100\261\101\253\001\002\000\004\114\214\001" +
    "\002\000\052\043\uff59\044\uff59\045\uff52\047\uff59\051\uff59" +
    "\053\uff59\054\uff59\056\uff59\057\uff59\061\uff59\063\uff59\066" +
    "\uff59\073\uff59\074\uff59\076\uff59\077\uff59\100\uff59\101\uff59" +
    "\103\uff59\121\uff59\001\002\000\036\024\227\046\213\047" +
    "\uff66\054\223\075\207\104\210\105\225\106\234\107\215" +
    "\114\214\115\226\116\232\117\216\120\221\001\002\000" +
    "\004\047\u015d\001\002\000\004\121\uffb5\001\002\000\022" +
    "\011\061\025\057\026\071\027\060\030\063\031\070\060" +
    "\103\114\101\001\002\000\004\047\uffdc\001\002\000\036" +
    "\043\254\044\250\053\251\054\245\056\252\057\256\066" +
    "\247\073\244\074\260\076\257\077\255\100\261\101\253" +
    "\121\uffd7\001\002\000\006\052\075\121\uffd6\001\002\000" +
    "\004\121\uffef\001\002\000\012\046\u016f\052\075\061\u016d" +
    "\121\uffd6\001\002\000\024\011\061\025\057\026\071\027" +
    "\060\030\063\031\070\047\uffdd\060\103\114\101\001\002" +
    "\000\004\047\uffe5\001\002\000\004\047\u0167\001\002\000" +
    "\006\050\uff4a\121\033\001\002\000\004\050\u0169\001\002" +
    "\000\070\003\uff4a\011\uff4a\012\uff4a\014\uff4a\016\uff4a\020" +
    "\uff4a\021\uff4a\022\uff4a\023\uff4a\025\uff4a\026\uff4a\027\uff4a" +
    "\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036" +
    "\uff4a\037\uff4a\040\uff4a\041\uff4a\051\uff4a\107\uff4a\110\uff4a" +
    "\114\uff4a\121\033\001\002\000\066\003\143\011\061\012" +
    "\150\014\146\016\135\020\121\021\124\022\163\023\154" +
    "\025\057\026\071\027\060\030\063\031\070\032\162\033" +
    "\160\034\155\035\152\036\142\037\133\040\131\041\117" +
    "\051\uffe2\107\136\110\140\114\137\001\002\000\004\051" +
    "\u016c\001\002\000\004\121\uffe4\001\002\000\004\114\u0123" +
    "\001\002\000\004\121\uffea\001\002\000\024\011\061\025" +
    "\057\026\071\027\060\030\063\031\070\047\uffdd\060\103" +
    "\114\101\001\002\000\004\047\uffe9\001\002\000\004\047" +
    "\u0172\001\002\000\006\050\uff4a\121\033\001\002\000\004" +
    "\050\u0174\001\002\000\070\003\uff4a\011\uff4a\012\uff4a\014" +
    "\uff4a\016\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\025\uff4a" +
    "\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034" +
    "\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\051\uff4a" +
    "\107\uff4a\110\uff4a\114\uff4a\121\033\001\002\000\066\003" +
    "\143\011\061\012\150\014\146\016\135\020\121\021\124" +
    "\022\163\023\154\025\057\026\071\027\060\030\063\031" +
    "\070\032\162\033\160\034\155\035\152\036\142\037\133" +
    "\040\131\041\117\051\uffe2\107\136\110\140\114\137\001" +
    "\002\000\004\051\u0177\001\002\000\004\121\uffe8\001\002" +
    "\000\006\052\075\121\uffd6\001\002\000\004\121\uffeb\001" +
    "\002\000\004\046\u017b\001\002\000\024\011\061\025\057" +
    "\026\071\027\060\030\063\031\070\047\uffdd\060\103\114" +
    "\101\001\002\000\004\047\uffe7\001\002\000\004\047\u017e" +
    "\001\002\000\006\050\uff4a\121\033\001\002\000\004\050" +
    "\u0180\001\002\000\070\003\uff4a\011\uff4a\012\uff4a\014\uff4a" +
    "\016\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\025\uff4a\026" +
    "\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a" +
    "\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\051\uff4a\107" +
    "\uff4a\110\uff4a\114\uff4a\121\033\001\002\000\066\003\143" +
    "\011\061\012\150\014\146\016\135\020\121\021\124\022" +
    "\163\023\154\025\057\026\071\027\060\030\063\031\070" +
    "\032\162\033\160\034\155\035\152\036\142\037\133\040" +
    "\131\041\117\051\uffe2\107\136\110\140\114\137\001\002" +
    "\000\004\051\u0183\001\002\000\004\121\uffe6\001\002\000" +
    "\020\011\061\025\057\026\071\027\060\030\063\031\070" +
    "\114\u0185\001\002\000\004\044\u0188\001\002\000\004\044" +
    "\u0187\001\002\000\006\044\uffce\114\uffce\001\002\000\006" +
    "\044\uffcd\114\uffcd\001\002\000\004\050\u018a\001\002\000" +
    "\036\003\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\025\uff4a" +
    "\026\uff4a\027\uff4a\030\uff4a\031\uff4a\051\uff4a\113\uff4a\114" +
    "\uff4a\121\033\001\002\000\004\002\ufff5\001\002\000\004" +
    "\004\u018d\001\002\000\004\121\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018b\000\014\002\010\003\012\004\007\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\004\007\005\006\006\005\001\001\000\002\001" +
    "\001\000\006\004\016\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\022\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\076\026\077\025\001\001\000\004\011\u0188\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\034\011" +
    "\035\001\001\000\002\001\001\000\010\010\042\012\036" +
    "\014\043\001\001\000\004\013\055\001\001\000\002\001" +
    "\001\000\004\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\046\012\036\014\043\001\001\000\002\001\001\000\004" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\053\012\036\014\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\065\017\064\021\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\073\001\001\000" +
    "\004\020\u0160\001\001\000\002\001\001\000\040\035\u015f" +
    "\052\216\053\227\054\230\055\232\056\204\057\211\060" +
    "\205\062\221\065\210\070\223\071\150\072\146\073\121" +
    "\074\122\001\001\000\016\016\065\017\103\021\066\022" +
    "\077\023\101\024\076\001\001\000\002\001\001\000\004" +
    "\100\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\112\001\001\000\002\001\001" +
    "\000\004\011\114\001\001\000\056\015\144\016\065\017" +
    "\125\021\066\025\143\026\163\027\133\030\160\031\155" +
    "\036\152\037\126\040\124\042\127\043\117\056\115\060" +
    "\131\066\156\067\140\071\150\072\146\073\121\074\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u0123\033\307" +
    "\034\311\110\306\001\001\000\040\035\u0121\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\166\001\001\000\004\011\167\001\001\000\056\015" +
    "\144\016\065\017\125\021\066\027\171\030\160\031\155" +
    "\036\152\037\126\040\124\042\127\043\117\046\170\047" +
    "\173\056\115\060\131\066\156\067\140\071\150\072\146" +
    "\073\121\074\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\015\144" +
    "\016\065\017\125\021\066\027\171\030\160\031\155\036" +
    "\152\037\126\040\124\042\127\043\117\047\175\056\115" +
    "\060\131\066\156\067\140\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\054\015\144\016\065" +
    "\017\125\021\066\027\171\030\160\031\155\036\152\037" +
    "\126\040\124\042\127\043\117\047\177\056\115\060\131" +
    "\066\156\067\140\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\004\011\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\035\217\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\035\340" +
    "\052\216\053\227\054\230\055\232\056\204\057\211\060" +
    "\205\062\221\065\210\070\223\071\150\072\146\073\121" +
    "\074\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\016\320\035\321\052\216\053\227" +
    "\054\230\055\232\056\204\057\211\060\205\062\221\065" +
    "\210\070\223\071\150\072\146\073\121\074\122\001\001" +
    "\000\010\033\307\034\311\110\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\035\302\052" +
    "\216\053\227\054\230\055\232\056\204\057\211\060\205" +
    "\062\221\065\210\070\223\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\035\240\052" +
    "\216\053\227\054\230\055\232\056\204\057\211\060\205" +
    "\062\221\063\237\064\241\065\210\070\223\071\150\072" +
    "\146\073\121\074\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\035" +
    "\276\052\216\053\227\054\230\055\232\056\204\057\211" +
    "\060\205\062\221\065\210\070\223\071\150\072\146\073" +
    "\121\074\122\001\001\000\040\035\275\052\216\053\227" +
    "\054\230\055\232\056\204\057\211\060\205\062\221\065" +
    "\210\070\223\071\150\072\146\073\121\074\122\001\001" +
    "\000\042\035\240\052\216\053\227\054\230\055\232\056" +
    "\204\057\211\060\205\062\221\063\274\065\210\070\223" +
    "\071\150\072\146\073\121\074\122\001\001\000\040\035" +
    "\273\052\216\053\227\054\230\055\232\056\204\057\211" +
    "\060\205\062\221\065\210\070\223\071\150\072\146\073" +
    "\121\074\122\001\001\000\040\035\272\052\216\053\227" +
    "\054\230\055\232\056\204\057\211\060\205\062\221\065" +
    "\210\070\223\071\150\072\146\073\121\074\122\001\001" +
    "\000\040\035\271\052\216\053\227\054\230\055\232\056" +
    "\204\057\211\060\205\062\221\065\210\070\223\071\150" +
    "\072\146\073\121\074\122\001\001\000\040\035\270\052" +
    "\216\053\227\054\230\055\232\056\204\057\211\060\205" +
    "\062\221\065\210\070\223\071\150\072\146\073\121\074" +
    "\122\001\001\000\040\035\267\052\216\053\227\054\230" +
    "\055\232\056\204\057\211\060\205\062\221\065\210\070" +
    "\223\071\150\072\146\073\121\074\122\001\001\000\040" +
    "\035\266\052\216\053\227\054\230\055\232\056\204\057" +
    "\211\060\205\062\221\065\210\070\223\071\150\072\146" +
    "\073\121\074\122\001\001\000\040\035\265\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\040\035\264\052\216\053\227\054\230\055\232" +
    "\056\204\057\211\060\205\062\221\065\210\070\223\071" +
    "\150\072\146\073\121\074\122\001\001\000\040\035\263" +
    "\052\216\053\227\054\230\055\232\056\204\057\211\060" +
    "\205\062\221\065\210\070\223\071\150\072\146\073\121" +
    "\074\122\001\001\000\040\035\262\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\065\210" +
    "\070\223\071\150\072\146\073\121\074\122\001\001\000" +
    "\040\035\261\052\216\053\227\054\230\055\232\056\204" +
    "\057\211\060\205\062\221\065\210\070\223\071\150\072" +
    "\146\073\121\074\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\035\240\052\216\053\227\054\230\055\232\056\204\057" +
    "\211\060\205\062\221\063\237\064\300\065\210\070\223" +
    "\071\150\072\146\073\121\074\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\056\204\060\205\070\305\071\150\072\146\073" +
    "\121\074\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\035\313\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\065\210" +
    "\070\223\071\150\072\146\073\121\074\122\001\001\000" +
    "\006\033\312\034\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\035\240\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\063\237\064\316\065\210\070\223\071\150\072\146\073" +
    "\121\074\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\035\325\052\216\053\227\054\230\055\232\056\204" +
    "\057\211\060\205\062\221\065\210\070\223\071\150\072" +
    "\146\073\121\074\122\001\001\000\040\035\330\052\216" +
    "\053\227\054\230\055\232\056\204\057\211\060\205\062" +
    "\221\065\210\070\223\071\150\072\146\073\121\074\122" +
    "\001\001\000\002\001\001\000\040\035\327\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\035\334\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\065\210" +
    "\070\223\071\150\072\146\073\121\074\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\035\337\052\216" +
    "\053\227\054\230\055\232\056\204\057\211\060\205\062" +
    "\221\065\210\070\223\071\150\072\146\073\121\074\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\035" +
    "\240\052\216\053\227\054\230\055\232\056\204\057\211" +
    "\060\205\062\221\063\237\064\342\065\210\070\223\071" +
    "\150\072\146\073\121\074\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\035\240\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\063\237" +
    "\064\345\065\210\070\223\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\035" +
    "\355\052\216\053\227\054\230\055\232\056\204\057\211" +
    "\060\205\062\221\065\210\070\223\071\150\072\146\073" +
    "\121\074\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\035\240\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\063\237" +
    "\064\357\065\210\070\223\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\035\362\052\216\053\227\054\230\055\232\056\204\057" +
    "\211\060\205\062\221\065\210\070\223\071\150\072\146" +
    "\073\121\074\122\001\001\000\002\001\001\000\006\011" +
    "\365\050\364\001\001\000\002\001\001\000\040\030\367" +
    "\031\155\036\152\037\126\040\124\042\127\043\117\056" +
    "\115\060\131\066\156\067\140\071\150\072\146\073\121" +
    "\074\122\001\001\000\004\106\370\001\001\000\002\001" +
    "\001\000\004\011\371\001\001\000\056\015\144\016\065" +
    "\017\125\021\066\027\171\030\160\031\155\036\152\037" +
    "\126\040\124\042\127\043\117\046\372\047\173\056\115" +
    "\060\131\066\156\067\140\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\035\240\052\216\053\227\054\230\055\232\056\204\057" +
    "\211\060\205\062\221\063\237\064\375\065\210\070\223" +
    "\071\150\072\146\073\121\074\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\060\u0100\066\u0102\071\150" +
    "\072\146\073\u0104\074\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\060\u0106\071\150\072\146\073\u0104\074" +
    "\u0101\001\001\000\002\001\001\000\004\011\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u010c\045" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0110\001\001\000\006\044\u010f\045\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\015\144\016\065\017\125\021\066\027\171\030\160\031" +
    "\155\036\152\037\126\040\124\042\127\043\117\047\u0113" +
    "\056\115\060\131\066\156\067\140\071\150\072\146\073" +
    "\121\074\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\015\144\016\065\017\125\021" +
    "\066\027\171\030\160\031\155\036\152\037\126\040\124" +
    "\042\127\043\117\047\u0117\056\115\060\131\066\156\067" +
    "\140\071\150\072\146\073\121\074\122\001\001\000\002" +
    "\001\001\000\010\071\u0119\072\u011a\073\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\015\144\016\065\017\125\021\066\025\u011d\026\163\027" +
    "\133\030\160\031\155\036\152\037\126\040\124\042\127" +
    "\043\117\056\115\060\131\066\156\067\140\071\150\072" +
    "\146\073\121\074\122\001\001\000\002\001\001\000\044" +
    "\035\240\052\216\053\227\054\230\055\232\056\204\057" +
    "\211\060\205\062\221\063\237\064\u011f\065\210\070\223" +
    "\071\150\072\146\073\121\074\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\035\u0125\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\065\210" +
    "\070\223\071\150\072\146\073\121\074\122\001\001\000" +
    "\002\001\001\000\004\020\u0127\001\001\000\002\001\001" +
    "\000\016\056\u0129\060\u0106\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\040\035\u012b\052\216" +
    "\053\227\054\230\055\232\056\204\057\211\060\205\062" +
    "\221\065\210\070\223\071\150\072\146\073\121\074\122" +
    "\001\001\000\002\001\001\000\006\011\u012d\075\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\u012d" +
    "\042\u0131\075\u0130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u0133\001\001\000\004\011\u0134\001\001" +
    "\000\056\015\144\016\065\017\125\021\066\027\171\030" +
    "\160\031\155\036\152\037\126\040\124\042\127\043\117" +
    "\046\u0135\047\173\056\115\060\131\066\156\067\140\071" +
    "\150\072\146\073\121\074\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\015\144\016\065\017\125\021" +
    "\066\026\u0138\027\133\030\160\031\155\036\152\037\126" +
    "\040\124\042\127\043\117\056\115\060\131\066\156\067" +
    "\140\071\150\072\146\073\121\074\122\001\001\000\002" +
    "\001\001\000\044\035\240\052\216\053\227\054\230\055" +
    "\232\056\204\057\211\060\205\062\221\063\237\064\u013a" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\035\240\052\216\053\227\054" +
    "\230\055\232\056\204\057\211\060\205\062\221\063\237" +
    "\064\u013f\065\210\070\223\071\150\072\146\073\121\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\035\u0143\052\216\053\227\054\230\055" +
    "\232\056\204\057\211\060\205\062\221\065\210\070\223" +
    "\071\150\072\146\073\121\074\122\001\001\000\002\001" +
    "\001\000\004\105\u0145\001\001\000\030\016\065\017\u0146" +
    "\021\066\031\u0148\041\u0147\060\131\066\156\071\150\072" +
    "\146\073\u0104\074\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\035\u014a\052\216\053" +
    "\227\054\230\055\232\056\204\057\211\060\205\062\221" +
    "\065\210\070\223\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\020\031\u014c\060\131\066\156" +
    "\071\150\072\146\073\u0104\074\u0101\001\001\000\002\001" +
    "\001\000\006\011\u014f\051\u014e\001\001\000\002\001\001" +
    "\000\040\030\u0151\031\155\036\152\037\126\040\124\042" +
    "\127\043\117\056\115\060\131\066\156\067\140\071\150" +
    "\072\146\073\121\074\122\001\001\000\004\011\u0152\001" +
    "\001\000\002\001\001\000\056\015\144\016\065\017\125" +
    "\021\066\027\171\030\160\031\155\036\152\037\126\040" +
    "\124\042\127\043\117\046\u0153\047\173\056\115\060\131" +
    "\066\156\067\140\071\150\072\146\073\121\074\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\035\u0157\052\216\053\227\054\230\055\232\056" +
    "\204\057\211\060\205\062\221\065\210\070\223\071\150" +
    "\072\146\073\121\074\122\001\001\000\002\001\001\000" +
    "\010\071\u0119\072\u011a\073\u0159\001\001\000\002\001\001" +
    "\000\044\035\240\052\216\053\227\054\230\055\232\056" +
    "\204\057\211\060\205\062\221\063\237\064\u015b\065\210" +
    "\070\223\071\150\072\146\073\121\074\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\065\017\103" +
    "\021\066\023\u015e\024\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0161\001\001\000\002\001\001" +
    "\000\004\061\u016d\001\001\000\016\016\065\017\103\021" +
    "\066\022\u0164\023\101\024\076\001\001\000\004\103\u0165" +
    "\001\001\000\002\001\001\000\004\011\u0167\001\001\000" +
    "\002\001\001\000\004\011\u0169\001\001\000\056\015\144" +
    "\016\065\017\125\021\066\025\u016a\026\163\027\133\030" +
    "\160\031\155\036\152\037\126\040\124\042\127\043\117" +
    "\056\115\060\131\066\156\067\140\071\150\072\146\073" +
    "\121\074\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0177\001\001\000\002\001\001\000\016\016" +
    "\065\017\103\021\066\022\u016f\023\101\024\076\001\001" +
    "\000\004\101\u0170\001\001\000\002\001\001\000\004\011" +
    "\u0172\001\001\000\002\001\001\000\004\011\u0174\001\001" +
    "\000\056\015\144\016\065\017\125\021\066\025\u0175\026" +
    "\163\027\133\030\160\031\155\036\152\037\126\040\124" +
    "\042\127\043\117\056\115\060\131\066\156\067\140\071" +
    "\150\072\146\073\121\074\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\065\017\103\021\066" +
    "\022\u017b\023\101\024\076\001\001\000\004\102\u017c\001" +
    "\001\000\002\001\001\000\004\011\u017e\001\001\000\002" +
    "\001\001\000\004\011\u0180\001\001\000\056\015\144\016" +
    "\065\017\125\021\066\025\u0181\026\163\027\133\030\160" +
    "\031\155\036\152\037\126\040\124\042\127\043\117\056" +
    "\115\060\131\066\156\067\140\071\150\072\146\073\121" +
    "\074\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\065\017\u0185\021\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\u018a\011\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }
   


    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // new_line ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // new_line ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // is_static ::= 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // is_static ::= STATIC 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // visibility ::= 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // visibility ::= PRIVATE 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // visibility ::= PUBLIC 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cast_value ::= LPAREN prim_type RPAREN expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if(t!=null&&e1!=null){
		RESULT = e1.cast(t,tright,tleft);
	}else{
		ErrorManager.add("("+t+")",tright, tleft, "Tipos de datos incompatibles ("+t+")["+e1+"]",Err.SEMANTIC);
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_value",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // simple_call ::= simple_method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // simple_call ::= simple_var_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // call_list ::= simple_call 
            {
              Stack<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Stack<Type> types = new Stack<>();
			types.push(t);
			RESULT = types;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // call_list ::= call_list DOT simple_call 
            {
              Stack<Type> RESULT =null;
		int typesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Type> types = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		types.push(t);
		RESULT = types;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // simple_var_call ::= ID 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if(SymbolTableManager.getCurrentContext(true)==null)
			SymbolTableManager.setContext(SymbolTableManager.getCurrentContext(),true);
		if(SymbolTableManager.symbolExist(id,true)){
			Sym s = SymbolTableManager.getSymbol(id,true);
			Type t = s.getType();
			SymbolTableManager.setContext(t,true);
			RESULT = t;
		}else{
			SymbolTableManager.setContext(new Type("null"),true);
			ErrorManager.add(id,idright,idleft,"Variable " + id + " no existe en el contexto actual",Err.SEMANTIC);
			RESULT = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // simple_var_call ::= ID list_dim_array 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		if(SymbolTableManager.getCurrentContext(true)==null)
			SymbolTableManager.setContext(SymbolTableManager.getCurrentContext(),true);
		if(SymbolTableManager.symbolExist(id,true)){
			Sym s = SymbolTableManager.getSymbol(id,true);
			if(s.getType().getSubtype()!=null){
				Type t = s.getType().getSubtype();
				SymbolTableManager.setContext(t,true);
				RESULT = t;
			}else{
				ErrorManager.add(id,idright,idleft,id + " no es un arreglo",Err.SEMANTIC);
				SymbolTableManager.setContext(new Type("null"),true);
				RESULT = null;
			}
		}else{
			SymbolTableManager.setContext(new Type("null"),true);
			ErrorManager.add(id,idright,idleft,"Variable " + id + " no existe en el contexto actual",Err.SEMANTIC);
			RESULT = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // method_call ::= simple_method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SymbolTableManager.removeContext(true);
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // method_call ::= call_list DOT simple_method_call 
            {
              Type RESULT =null;
		int typesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Type> types = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SymbolTableManager.removeContext(true);
			while(!types.isEmpty()){
				types.pop();
				SymbolTableManager.removeContext(true);
			}
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // var_call ::= simple_var_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SymbolTableManager.removeContext(true);
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // var_call ::= call_list DOT simple_var_call 
            {
              Type RESULT =null;
		int typesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Type> types = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			SymbolTableManager.removeContext(true);
			while(!types.isEmpty()){
				types.pop();
				SymbolTableManager.removeContext(true);
			}
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // var_method_call ::= method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_method_call",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // var_method_call ::= var_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_method_call",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // this_var_method_call ::= var_method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true);RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_method_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // this_var_method_call ::= THIS DOT var_method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_method_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // this_var_call ::= var_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // this_var_call ::= THIS DOT var_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // this_method_call ::= method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_method_call",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // this_method_call ::= THIS DOT method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SymbolTableManager.removeContext(true); RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_method_call",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // args ::= expression 
            {
              Stack<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Stack<Type> tipos = new Stack<>();
			tipos.push(t);
			RESULT = tipos;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // args ::= expression COMA args 
            {
              Stack<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Type> tipos = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		tipos.push(t);
		RESULT = tipos;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arg_list ::= 
            {
              Stack<Type> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arg_list ::= args 
            {
              Stack<Type> RESULT =null;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Type> tipos = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = tipos;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simple_method_call ::= ID NT$10 LPAREN arg_list RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	SymbolTableManager.removeContext(true);
	if(SymbolTableManager.getCurrentContext(true)==null)
			SymbolTableManager.setContext(SymbolTableManager.getCurrentContext(),true);
	while(!args.isEmpty()){
		Type t = args.pop();
		id += "_" + t.getName();
	}
	id+="()";
	Sym method = SymbolTableManager.getSymbol(id,true);
	if(method!=null){
		if(method.isFunction()&&!method.isConstructor()){
			RESULT = method.getType();
		}else{
			RESULT = method.getType();
			ErrorManager.add(id,idright,idleft,"El método " + id + " es un constructor",Err.SEMANTIC);
		}
	}else{
		RESULT = null;
		ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_method_call",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$10 ::= 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setContext(SymbolTableManager.getCurrentContext(),true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instance ::= NEW ARRAY LPAREN arg_list RPAREN 
            {
              Type RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			int dims = args.size();
			while(!args.isEmpty()){
				Type t = args.pop();
				if(t==null || !t.equals(SymbolTableManager.getType("int"))){
					ErrorManager.add("Array", argsright, argsleft,"Se esperaba un entero y se encontró " + t,Err.SEMANTIC);
				}
			}
			Type r = new Type("Array");
			r.setDims(dims);
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instance ::= NEW ID LPAREN arg_list RPAREN 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Type type = SymbolTableManager.getType(id);
			if(type!=null){
				SymbolTableManager.setContext(type,true);
				
				while(!args.isEmpty()){
					Type t = args.pop();
					id += "_" + t.getName();
				}
				id+="()";
				Sym method = SymbolTableManager.getSymbol(id,true);
				if(method!=null){
					if(method.isFunction()&&method.isConstructor()){
						/*if(method.getArguments().size()==args.size()){
							if(!method.validateArguments(args)){
								ErrorManager.add(id,idright,idleft,"Los tipos de argumentos para el constructor " + id + " no coinciden",Err.SEMANTIC);
							}
						}else{
							ErrorManager.add(id,idright,idleft,"Los argumentos de " + id + " difieren en número [requerido = " + method.getArguments().size() + ", encontrados " + args.size() + "]",Err.SEMANTIC);
						}*/
						RESULT = method.getType();
					}else{
						RESULT = method.getType();
						ErrorManager.add(id,idright,idleft,"El constructor " + id + " no existe en el contexto actual",Err.SEMANTIC);
					}
				}else{
					RESULT = type;
					ErrorManager.add(id,idright,idleft,"El constructor " + id + " no existe en el contexto actual",Err.SEMANTIC);
				}
				SymbolTableManager.removeContext(true);
			}else{
				RESULT = null;
				ErrorManager.add(id,idright,idleft,"La clase " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // op_ternario ::= LPAREN expression RPAREN ASK expression COLON expression 
            {
              Type RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type lt = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if(lt!=null && lt.equals(SymbolTableManager.getType("bool"))){
					if(e1 == null || e2 == null){
						ErrorManager.add(":",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] : ["+e2+"]",Err.SEMANTIC);
						RESULT = null;
					}else{
						if(e1.equals(e2)||e2.cast(e1,e2left,e2right)!=null){
							RESULT = e1;
						}else{
							ErrorManager.add(":",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] : ["+e2+"]",Err.SEMANTIC);
							RESULT = null;
						}
					}
				}else{
					ErrorManager.add("?",ltright, ltleft, "Tipos de datos incompatibles ("+lt+")? Se esperaba una expresión lógica",Err.SEMANTIC);
					RESULT = null;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // op_ternario ::= LPAREN expression RPAREN ASK LBRACKET expression RBRACKET COLON LBRACKET expression RBRACKET 
            {
              Type RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type lt = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if(lt!=null && lt.equals(SymbolTableManager.getType("bool"))){
					if(e1 == null || e2 == null){
						ErrorManager.add(":",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] : ["+e2+"]",Err.SEMANTIC);
						RESULT = null;
					}else{
						if(e1.equals(e2)||e2.cast(e1,e2left,e2right)!=null){
							RESULT = e1;
						}else{
							ErrorManager.add(":",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] : ["+e2+"]",Err.SEMANTIC);
							RESULT = null;
						}
					}
				}else{
					ErrorManager.add("?",ltright, ltleft, "Tipos de datos incompatibles ("+lt+")? Se esperaba una expresión lógica",Err.SEMANTIC);
					RESULT = null;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arit_expression ::= MINUS expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1==null || !e1.equals(SymbolTableManager.getType("int")) || !e1.equals(SymbolTableManager.getType("float"))){
				ErrorManager.add("-",e1right, e1left, "Tipos de datos incompatibles -["+e1+"]",Err.SEMANTIC);
			}else{
				RESULT = e1;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arit_expression ::= LPAREN expression RPAREN 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = e1;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arit_expression ::= expression POW expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1!=null && e2!=null){
				RESULT = e1.implicitCast(e2,'^',e2right,e2left);
			}else{
				ErrorManager.add("^",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] ^ ["+e2+"]",Err.SEMANTIC);
				RESULT = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arit_expression ::= expression DIV expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1!=null && e2!=null){
				RESULT = e1.implicitCast(e2,'/',e2right,e2left);
			}else{
				ErrorManager.add("/",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] / ["+e2+"]",Err.SEMANTIC);
				RESULT = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arit_expression ::= expression TIMES expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1!=null && e2!=null){
				RESULT = e1.implicitCast(e2,'*',e2right,e2left);
			}else{
				ErrorManager.add("*",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] * ["+e2+"]",Err.SEMANTIC);
				RESULT = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arit_expression ::= expression MINUS expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1!=null && e2!=null){
				RESULT = e1.implicitCast(e2,'-',e2right,e2left);
			}else{
				ErrorManager.add("-",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] - ["+e2+"]",Err.SEMANTIC);
				RESULT = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arit_expression ::= expression PLUS expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1!=null && e2!=null){
				RESULT = e1.implicitCast(e2,'+',e2right,e2left);
			}else{
				ErrorManager.add("+",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] + ["+e2+"]",Err.SEMANTIC);
				RESULT = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // logic_expression ::= expression LESS expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				//Error 
				ErrorManager.add("<",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] < ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					//Error 
					ErrorManager.add("<",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] < ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logic_expression ::= expression LEQL expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				//Error semántico
				ErrorManager.add("<=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] <= ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					//Error semántico
					ErrorManager.add("<=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] <= ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logic_expression ::= expression GREATER expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				//Error semántico
				ErrorManager.add(">",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] > ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					//Error semántico
					ErrorManager.add(">",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] > ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // logic_expression ::= expression GEQL expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				//Error semántico
				ErrorManager.add(">=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] >= ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					//Error semántico
					ErrorManager.add(">=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] >= ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logic_expression ::= expression NOTEQL expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				ErrorManager.add("!=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] != ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					ErrorManager.add("!=",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] != ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logic_expression ::= expression EQUALS expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				ErrorManager.add("==",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] == ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!(e1.equals(e2)) && (e2.cast(e1, e2left, e2left)==null)){
					ErrorManager.add("==",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] == ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logic_expression ::= NOT expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null){
				ErrorManager.add("NOT",e1right, e1left, "Tipos de datos incompatibles NOT["+e1+"]",Err.SEMANTIC);
			}else{
				if(!e1.equals(SymbolTableManager.getType("bool"))){
					ErrorManager.add("NOT",e1right, e1left, "Tipos de datos incompatibles NOT["+e1+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logic_expression ::= expression AND expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				ErrorManager.add("AND",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] AND ["+e2+"]",Err.SEMANTIC);
			}else{
				if(!e1.equals(SymbolTableManager.getType("bool")) || !e2.equals(SymbolTableManager.getType("bool"))){
					ErrorManager.add("AND",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] AND ["+e2+"]",Err.SEMANTIC);
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logic_expression ::= expression OR expression 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if(e1 == null || e2 == null){
				//Error semántico
				ErrorManager.add("OR",e2right, e2left, "Tipos de datos incompatibles [null] OR [null]");
			}else{
				if(!e1.equals(SymbolTableManager.getType("bool")) || !e2.equals(SymbolTableManager.getType("bool"))){
					//Error semántico
					ErrorManager.add("OR",e2right, e2left, "Tipos de datos incompatibles ["+e1+"] OR ["+e2+"]");
				}
			}
			RESULT = SymbolTableManager.getType("bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= NULL 
            {
              Type RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= this_var_method_call 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= cast_value 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= value 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= instance 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= arit_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= logic_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= op_ternario 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // case_sentence ::= DEFAULT COLON NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case_sentence ::= CASE value COLON NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // list_case ::= case_sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // list_case ::= case_sentence list_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // switch_statement ::= SWITCH LPAREN this_var_call RPAREN new_line LBRACKET NEWLINE list_case RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // if_statement ::= IF LPAREN expression RPAREN if_instructions 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_instructions 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_statement 
            {
              Sym RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_instructions ::= new_line LBRACKET NT$9 new_line loop_inst RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		SymbolTableManager.removeContext();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$9 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // loop_inst_list ::= error NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // loop_inst_list ::= instruction NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // loop_inst_list ::= instruction NEWLINE loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // loop_inst ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // loop_inst ::= loop_inst_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // loop_instructions ::= new_line non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // loop_instructions ::= new_line LBRACKET NT$8 new_line loop_inst RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		SymbolTableManager.removeContext();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$8 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_init ::= assign 
            {
              Sym RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_init ::= var_type ID EQL expression 
            {
              Sym RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Sym(id, idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_instructions ::= new_line non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_instructions ::= new_line LBRACKET new_line loop_inst RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_statement ::= FOR LPAREN NT$7 for_init COMA expression COMA assign RPAREN for_instructions 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sym s = (Sym)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		SymbolTableManager.removeContext();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$7 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // do_while_statement ::= DO new_line LBRACKET NT$6 new_line loop_inst RBRACKET new_line WHILE LPAREN expression RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		SymbolTableManager.removeContext();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$6 ::= 
            {
              Object RESULT =null;
SymbolTableManager.openScope();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // while_statement ::= WHILE LPAREN expression RPAREN loop_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assign_op ::= DIVEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assign_op ::= TIMESEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assign_op ::= MINUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assign_op ::= PLUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assign_op ::= EQL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_dec ::= ID var_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_dec ::= var_type var_list 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // var_dec ::= ID var_list EQL expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Type type = SymbolTableManager.getType(t);
			if((type ==null || e1 ==null)||(!type.equals(e1))){
				ErrorManager.add(type +" = "+ e1,e1right,e1left,"Tipos de datos incompatibles [" + type + "] = [" + e1 +"]",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // var_dec ::= var_type var_list EQL expression 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if((type ==null || e1 ==null)||((!type.equals(e1)) && (e1.cast(type,e1right,e1left)==null))){
				ErrorManager.add(type +" = "+ e1,e1right,e1left,"Tipos de datos incompatibles [" + type + "] = [" + e1 +"]",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dim ::= LHOOK expression RHOOK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_dim_array ::= dim 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // list_dim_array ::= dim list_dim_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign ::= var_call MINUSMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign ::= var_call PLUSPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assign ::= this_var_call assign_op expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if((e1 ==null || e2 ==null)||((!e1.equals(e2)) && (e2.cast(e1,e2right,e2left)==null)))
			ErrorManager.add(e1 +" = "+ e2,e2right,e2left,"Tipos de datos incompatibles [" + e1 + "] = [" + e2 +"]",Err.SEMANTIC);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // non_dec_instruction ::= ARC0 LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // non_dec_instruction ::= RECTANGULO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // non_dec_instruction ::= POLIGONO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // non_dec_instruction ::= LINEA LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // non_dec_instruction ::= OVALO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // non_dec_instruction ::= IMPRIMIR LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				if(!t.isPrimitive()){
					ErrorManager.add(id,idright,idleft,"El método " + id + " solo admite tipos primitivos",Err.SEMANTIC);
				}
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // non_dec_instruction ::= LIENZO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // non_dec_instruction ::= TEXTO LPAREN arg_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Type> args = (Stack<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			while(!args.isEmpty()){
				Type t = args.pop();
				id += "_" + t.getName();
			}
			id+="()";
			if(SymbolTableManager.getNativeMethod(id)==null){
				ErrorManager.add(id,idright,idleft,"El método " + id + " no existe en el contexto actual",Err.SEMANTIC);
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // non_dec_instruction ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_dec_instruction ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_dec_instruction ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // non_dec_instruction ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // non_dec_instruction ::= this_method_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_dec_instruction ::= switch_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // non_dec_instruction ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // non_dec_instruction ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // non_dec_instruction ::= do_while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_dec_instruction ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_dec_instruction ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= non_dec_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruction ::= var_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= FALSE 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= TRUE 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= CHR 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= CAD 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= DEC 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= NUM 
            {
              Type RESULT =null;
		 RESULT = SymbolTableManager.getType("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_list ::= ID 
            {
              Stack<Sym> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_list ::= ID COMA var_list 
            {
              Stack<Sym> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_type ::= ARRAY LESS ID GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Type t = new Type("Array");
				t.setSubtype(SymbolTableManager.getType(type));
				RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_type ::= ARRAY LESS var_type GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Type t = new Type("Array");
			t.setSubtype(type);
			RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prim_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prim_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prim_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // prim_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // prim_type ::= INT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_type ::= array_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_type ::= prim_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dec_assign ::= 
            {
              Type RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_dec_assign ::= EQL expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= ID ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = type;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= var_type ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = type.getName();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= REF prim_type ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = type.getName();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_params ::= param 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = p;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_params ::= param COMA list_params 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String syms = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = p + "_" + syms;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params ::= list_params 
            {
              String RESULT =null;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String syms = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "_"+syms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_list_instructions ::= error NEWLINE method_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_list_instructions ::= instruction NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_list_instructions ::= instruction NEWLINE method_list_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_instructions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_instructions ::= method_list_instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= visibility is_static ID LPAREN params NT$5 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		SymbolTableManager.removeContext(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setMethodContext(id+p+"()"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration ::= visibility is_static VOID ID LPAREN params NT$4 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		SymbolTableManager.removeContext(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setMethodContext(id+p+"()"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= visibility is_static ID ID LPAREN params NT$3 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		SymbolTableManager.removeContext(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setMethodContext(id+p+"()"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= visibility is_static ID ID var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= visibility is_static ID ID COMA var_list var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= visibility is_static var_type ID LPAREN params NT$2 RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		SymbolTableManager.removeContext(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setMethodContext(id+p+"()"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= visibility is_static var_type ID var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= visibility is_static var_type ID COMA var_list var_dec_assign 
            {
              Object RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Sym> ids = (Stack<Sym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_class_expr ::= error NEWLINE list_class_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_class_expr ::= declaration NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_class_expr ::= declaration NEWLINE list_class_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_body ::= new_line RBRACKET new_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_body ::= new_line list_class_expr RBRACKET new_line 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // init_class ::= PUBLIC CLASS ID NT$1 new_line LBRACKET class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setContext(SymbolTableManager.getType(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_class ::= PUBLIC CLASS ID NT$0 EXTENDS ID new_line LBRACKET class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
SymbolTableManager.setContext(SymbolTableManager.getType(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_import ::= SHARP IMPORT FILE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_import ::= error NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_import ::= dec_import NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_import ::= dec_import NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // init_import ::= init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // init_import ::= list_import init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NEWLINE init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

