
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 03 16:16:06 CST 2014
//----------------------------------------------------

package parsers.tree3d;

import gui.forms.ProjectManager;
import java.util.Stack;
import java_cup.runtime.Symbol;
import parsers.frc.managers.*;
import parsers.tree3d.nodes.Node;
import parsers.tree3d.nodes.arithmetics.*;
import parsers.tree3d.nodes.expressions.*;
import parsers.tree3d.nodes.logics.*;
import parsers.tree3d.nodes.statements.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 03 16:16:06 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\005\005\000" +
    "\002\006\012\000\002\006\010\000\002\007\006\000\002" +
    "\007\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\014\011\000\002\014\007\000\002\014\016" +
    "\000\002\014\011\000\002\014\007\000\002\014\016\000" +
    "\002\014\016\000\002\014\015\000\002\025\003\000\002" +
    "\025\002\000\002\026\005\000\002\026\004\000\002\026" +
    "\005\000\002\022\003\000\002\022\002\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\061\004\000\002\061\002\000\002" +
    "\017\003\000\002\017\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\021\006\000\002\021\006\000\002\020\005\000" +
    "\002\020\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\004\000\002\030" +
    "\003\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\031\005\000\002" +
    "\031\004\000\002\031\004\000\002\033\004\000\002\033" +
    "\003\000\002\034\005\000\002\015\006\000\002\015\006" +
    "\000\002\015\004\000\002\015\004\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\036\007\000\002\037\015\000\002\040" +
    "\013\000\002\051\007\000\002\051\004\000\002\041\006" +
    "\000\002\041\003\000\002\050\007\000\002\050\004\000" +
    "\002\046\003\000\002\046\002\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\075\007\000\002\042" +
    "\011\000\002\042\011\000\002\042\007\000\002\043\013" +
    "\000\002\044\004\000\002\044\003\000\002\045\007\000" +
    "\002\045\006\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\053\005" +
    "\000\002\053\005\000\002\053\004\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\004\000\002\052\015\000" +
    "\002\052\011\000\002\055\007\000\002\055\007\000\002" +
    "\073\006\000\002\064\003\000\002\064\002\000\002\063" +
    "\005\000\002\063\003\000\002\067\005\000\002\067\003" +
    "\000\002\066\005\000\002\066\003\000\002\065\005\000" +
    "\002\065\003\000\002\070\003\000\002\070\003\000\002" +
    "\060\005\000\002\060\003\000\002\056\005\000\002\056" +
    "\003\000\002\072\004\000\002\072\003\000\002\074\005" +
    "\000\002\074\003\000\002\071\003\000\002\071\003\000" +
    "\002\057\006\000\002\012\003\000\002\012\003\000\002" +
    "\012\002\000\002\013\003\000\002\013\002\000\002\011" +
    "\003\000\002\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\012\003\012\006\005\042\004\121\014\001" +
    "\002\000\004\005\u0180\001\002\000\004\111\024\001\002" +
    "\000\004\002\ufffd\001\002\000\004\121\022\001\002\000" +
    "\004\006\005\001\002\000\004\002\020\001\002\000\004" +
    "\121\016\001\002\000\004\002\uffff\001\002\000\010\003" +
    "\012\006\005\042\004\001\002\000\004\002\000\001\002" +
    "\000\006\003\012\042\004\001\002\000\004\006\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\010\003\012\006\ufffb\042\004\001\002\000\004\006" +
    "\ufffc\001\002\000\004\114\025\001\002\000\010\050\uff55" +
    "\112\026\121\030\001\002\000\004\114\u017c\001\002\000" +
    "\004\050\031\001\002\000\102\002\uff56\003\uff56\006\uff56" +
    "\007\uff56\010\uff56\011\uff56\012\uff56\014\uff56\016\uff56\020" +
    "\uff56\021\uff56\022\uff56\023\uff56\025\uff56\026\uff56\027\uff56" +
    "\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036" +
    "\uff56\037\uff56\040\uff56\041\uff56\050\uff56\051\uff56\107\uff56" +
    "\110\uff56\113\uff56\114\uff56\001\002\000\036\003\uff55\006" +
    "\uff55\007\uff55\010\uff55\011\uff55\025\uff55\026\uff55\027\uff55" +
    "\030\uff55\031\uff55\051\uff55\113\uff55\114\uff55\121\030\001" +
    "\002\000\004\002\ufff7\001\002\000\034\003\035\006\037" +
    "\007\041\010\uff59\011\uff59\025\uff59\026\uff59\027\uff59\030" +
    "\uff59\031\uff59\051\036\113\uff59\114\uff59\001\002\000\024" +
    "\010\uff57\011\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031" +
    "\uff57\113\052\114\uff57\001\002\000\004\121\050\001\002" +
    "\000\006\002\uff55\121\030\001\002\000\024\010\uff5b\011" +
    "\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\113\uff5b" +
    "\114\uff5b\001\002\000\004\051\045\001\002\000\024\010" +
    "\uff5a\011\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\113\uff5a\114\uff5a\001\002\000\004\121\043\001\002\000" +
    "\034\003\035\006\037\007\041\010\uff59\011\uff59\025\uff59" +
    "\026\uff59\027\uff59\030\uff59\031\uff59\051\ufff3\113\uff59\114" +
    "\uff59\001\002\000\004\051\ufff4\001\002\000\006\002\uff55" +
    "\121\030\001\002\000\004\002\ufff6\001\002\000\004\002" +
    "\ufff5\001\002\000\032\003\035\006\037\007\041\010\uff59" +
    "\011\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\113" +
    "\uff59\114\uff59\001\002\000\004\051\ufff2\001\002\000\022" +
    "\010\uff58\011\uff58\025\uff58\026\uff58\027\uff58\030\uff58\031" +
    "\uff58\114\uff58\001\002\000\022\010\057\011\056\025\054" +
    "\026\065\027\055\030\060\031\066\114\061\001\002\000" +
    "\010\044\uffd9\047\uffd9\114\uffd9\001\002\000\010\044\uffd7" +
    "\047\uffd7\114\uffd7\001\002\000\004\043\u0177\001\002\000" +
    "\004\114\u016e\001\002\000\010\044\uffd6\047\uffd6\114\uffd6" +
    "\001\002\000\006\046\u015a\114\u0159\001\002\000\004\114" +
    "\067\001\002\000\006\044\uffdb\114\uffdb\001\002\000\006" +
    "\044\uffda\114\uffda\001\002\000\010\044\uffd8\047\uffd8\114" +
    "\uffd8\001\002\000\010\044\uffd5\047\uffd5\114\uffd5\001\002" +
    "\000\012\046\073\052\072\061\070\121\uffdc\001\002\000" +
    "\004\114\u011d\001\002\000\004\121\ufff0\001\002\000\034" +
    "\024\222\046\205\054\220\075\202\104\203\105\216\106" +
    "\227\107\210\114\207\115\221\116\225\117\211\120\214" +
    "\001\002\000\024\011\056\025\054\026\065\027\055\030" +
    "\060\031\066\047\uffe3\060\100\114\076\001\002\000\006" +
    "\047\uffe1\061\u0154\001\002\000\004\047\106\001\002\000" +
    "\004\114\105\001\002\000\004\047\uffe4\001\002\000\014" +
    "\025\054\026\065\027\055\030\060\031\066\001\002\000" +
    "\004\114\102\001\002\000\006\047\uffdf\061\uffdf\001\002" +
    "\000\004\114\104\001\002\000\006\047\uffe0\061\uffe0\001" +
    "\002\000\006\047\uffde\061\uffde\001\002\000\006\050\uff55" +
    "\121\030\001\002\000\004\050\110\001\002\000\070\003" +
    "\uff55\011\uff55\012\uff55\014\uff55\016\uff55\020\uff55\021\uff55" +
    "\022\uff55\023\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031" +
    "\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55" +
    "\040\uff55\041\uff55\051\uff55\107\uff55\110\uff55\114\uff55\121" +
    "\030\001\002\000\066\003\137\011\056\012\144\014\142" +
    "\016\131\020\115\021\120\022\157\023\150\025\054\026" +
    "\065\027\055\030\060\031\066\032\156\033\154\034\151" +
    "\035\146\036\136\037\127\040\125\041\113\051\uffe8\107" +
    "\132\110\134\114\133\001\002\000\004\121\uff6d\001\002" +
    "\000\004\046\u0151\001\002\000\004\121\uffc3\001\002\000" +
    "\004\121\uffc0\001\002\000\052\043\uff63\044\uff63\045\uff5d" +
    "\047\uff63\051\uff63\053\uff63\054\uff63\056\uff63\057\uff63\061" +
    "\uff63\063\uff63\066\uff63\073\uff63\074\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\103\uff63\121\uff63\001\002\000\004\045" +
    "\u014f\001\002\000\004\046\u013c\001\002\000\004\121\uffc5" +
    "\001\002\000\004\114\u011d\001\002\000\004\121\uffc6\001" +
    "\002\000\004\121\uffc4\001\002\000\004\046\u0136\001\002" +
    "\000\022\047\uff6b\052\uff6b\064\uff6b\065\uff6b\067\uff6b\070" +
    "\uff6b\071\uff6b\072\uff6b\001\002\000\004\046\u0133\001\002" +
    "\000\004\121\u0131\001\002\000\004\046\u0125\001\002\000" +
    "\004\045\u0123\001\002\000\030\045\uff61\046\304\052\uff61" +
    "\062\303\064\uff61\065\uff61\067\uff61\070\uff61\071\uff61\072" +
    "\uff61\114\u011d\001\002\000\036\024\222\046\205\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\121\uffbe\001\002\000\004" +
    "\121\uffc2\001\002\000\004\046\u0119\001\002\000\004\121" +
    "\u0117\001\002\000\004\051\u0116\001\002\000\004\121\uffca" +
    "\001\002\000\004\121\uffc1\001\002\000\070\043\uff65\044" +
    "\uff65\045\uff5e\047\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\056\uff65\057\uff65\061\uff65\063\uff65\064\uff65\065\uff65\066" +
    "\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65" +
    "\076\uff65\077\uff65\100\uff65\101\uff65\103\uff65\121\uff65\001" +
    "\002\000\004\046\373\001\002\000\004\045\uff5f\001\002" +
    "\000\004\046\370\001\002\000\004\121\uffc7\001\002\000" +
    "\004\046\356\001\002\000\004\046\353\001\002\000\004" +
    "\121\uffc8\001\002\000\020\052\345\064\350\065\343\067" +
    "\351\070\344\071\342\072\347\001\002\000\004\046\337" +
    "\001\002\000\004\121\uffc9\001\002\000\004\046\334\001" +
    "\002\000\006\050\uff55\121\030\001\002\000\004\051\uffe9" +
    "\001\002\000\004\050\162\001\002\000\070\003\uff55\011" +
    "\uff55\012\uff55\014\uff55\016\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55" +
    "\041\uff55\051\uff55\107\uff55\110\uff55\114\uff55\121\030\001" +
    "\002\000\066\003\166\011\056\012\144\014\142\016\131" +
    "\020\115\021\120\022\157\023\150\025\054\026\065\027" +
    "\055\030\060\031\066\032\156\033\154\034\151\035\146" +
    "\036\136\037\127\040\125\041\113\051\uff9c\107\132\110" +
    "\134\114\133\001\002\000\004\051\174\001\002\000\004" +
    "\121\172\001\002\000\004\121\170\001\002\000\004\051" +
    "\uff9d\001\002\000\064\003\166\011\056\012\144\014\142" +
    "\016\131\020\115\021\120\022\157\023\150\025\054\026" +
    "\065\027\055\030\060\031\066\032\156\033\154\034\151" +
    "\035\146\036\136\037\127\040\125\041\113\107\132\110" +
    "\134\114\133\001\002\000\010\013\uff99\015\uff99\051\uff99" +
    "\001\002\000\072\003\166\011\056\012\144\013\uff9a\014" +
    "\142\015\uff9a\016\131\020\115\021\120\022\157\023\150" +
    "\025\054\026\065\027\055\030\060\031\066\032\156\033" +
    "\154\034\151\035\146\036\136\037\127\040\125\041\113" +
    "\051\uff9a\107\132\110\134\114\133\001\002\000\010\013" +
    "\uff9b\015\uff9b\051\uff9b\001\002\000\006\023\uff55\121\030" +
    "\001\002\000\004\023\176\001\002\000\004\046\177\001" +
    "\002\000\034\024\222\046\205\054\220\075\202\104\203" +
    "\105\216\106\227\107\210\114\207\115\221\116\225\117" +
    "\211\120\214\001\002\000\050\043\uff67\044\uff67\047\uff67" +
    "\051\uff67\053\uff67\054\uff67\056\uff67\057\uff67\061\uff67\063" +
    "\uff67\066\uff67\073\uff67\074\uff67\076\uff67\077\uff67\100\uff67" +
    "\101\uff67\103\uff67\121\uff67\001\002\000\050\043\uff68\044" +
    "\uff68\047\uff68\051\uff68\053\uff68\054\uff68\056\uff68\057\uff68" +
    "\061\uff68\063\uff68\066\uff68\073\uff68\074\uff68\076\uff68\077" +
    "\uff68\100\uff68\101\uff68\103\uff68\121\uff68\001\002\000\034" +
    "\024\222\046\205\054\220\075\202\104\203\105\216\106" +
    "\227\107\210\114\207\115\221\116\225\117\211\120\214" +
    "\001\002\000\050\043\uffcc\044\uffcc\047\uffcc\051\uffcc\053" +
    "\uffcc\054\uffcc\056\uffcc\057\uffcc\061\uffcc\063\uffcc\066\uffcc" +
    "\073\uffcc\074\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\103" +
    "\uffcc\121\uffcc\001\002\000\050\043\uff89\044\uff89\047\uff89" +
    "\051\uff89\053\uff89\054\uff89\056\uff89\057\uff89\061\uff89\063" +
    "\uff89\066\uff89\073\uff89\074\uff89\076\uff89\077\uff89\100\uff89" +
    "\101\uff89\103\uff89\121\uff89\001\002\000\046\024\222\025" +
    "\054\026\065\027\055\030\060\031\066\046\205\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\050\043\uff8a" +
    "\044\uff8a\047\uff8a\051\uff8a\053\uff8a\054\uff8a\056\uff8a\057" +
    "\uff8a\061\uff8a\063\uff8a\066\uff8a\073\uff8a\074\uff8a\076\uff8a" +
    "\077\uff8a\100\uff8a\101\uff8a\103\uff8a\121\uff8a\001\002\000" +
    "\074\043\uff61\044\uff61\045\uff61\046\304\047\uff61\051\uff61" +
    "\052\uff61\053\uff61\054\uff61\056\uff61\057\uff61\061\uff61\062" +
    "\303\063\uff61\064\uff61\065\uff61\066\uff61\067\uff61\070\uff61" +
    "\071\uff61\072\uff61\073\uff61\074\uff61\076\uff61\077\uff61\100" +
    "\uff61\101\uff61\103\uff61\121\uff61\001\002\000\004\045\300" +
    "\001\002\000\050\043\uffd0\044\uffd0\047\uffd0\051\uffd0\053" +
    "\uffd0\054\uffd0\056\uffd0\057\uffd0\061\uffd0\063\uffd0\066\uffd0" +
    "\073\uffd0\074\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\103" +
    "\uffd0\121\uffd0\001\002\000\050\043\uff8f\044\uff8f\047\uff8f" +
    "\051\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\061\uff8f\063" +
    "\uff8f\066\uff8f\073\uff8f\074\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\103\uff8f\121\uff8f\001\002\000\036\043\246\044" +
    "\243\047\277\053\244\054\237\056\245\057\251\066\242" +
    "\073\240\074\253\076\252\077\250\100\254\101\247\001" +
    "\002\000\050\043\uffcf\044\uffcf\047\uffcf\051\uffcf\053\uffcf" +
    "\054\uffcf\056\uffcf\057\uffcf\061\uffcf\063\uffcf\066\uffcf\073" +
    "\uffcf\074\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\103\uffcf" +
    "\121\uffcf\001\002\000\050\043\uff8b\044\uff8b\047\uff8b\051" +
    "\uff8b\053\uff8b\054\uff8b\056\uff8b\057\uff8b\061\uff8b\063\uff8b" +
    "\066\uff8b\073\uff8b\074\uff8b\076\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\103\uff8b\121\uff8b\001\002\000\050\043\uffcb\044\uffcb" +
    "\047\uffcb\051\uffcb\053\uffcb\054\uffcb\056\uffcb\057\uffcb\061" +
    "\uffcb\063\uffcb\066\uffcb\073\uffcb\074\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\103\uffcb\121\uffcb\001\002\000\050\043" +
    "\uff69\044\uff69\047\uff69\051\uff69\053\uff69\054\uff69\056\uff69" +
    "\057\uff69\061\uff69\063\uff69\066\uff69\073\uff69\074\uff69\076" +
    "\uff69\077\uff69\100\uff69\101\uff69\103\uff69\121\uff69\001\002" +
    "\000\034\024\222\046\205\054\220\075\202\104\203\105" +
    "\216\106\227\107\210\114\207\115\221\116\225\117\211" +
    "\120\214\001\002\000\050\043\uffce\044\uffce\047\uffce\051" +
    "\uffce\053\uffce\054\uffce\056\uffce\057\uffce\061\uffce\063\uffce" +
    "\066\uffce\073\uffce\074\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\103\uffce\121\uffce\001\002\000\006\011\231\114\230" +
    "\001\002\000\050\043\uff8e\044\uff8e\047\uff8e\051\uff8e\053" +
    "\uff8e\054\uff8e\056\uff8e\057\uff8e\061\uff8e\063\uff8e\066\uff8e" +
    "\073\uff8e\074\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\103" +
    "\uff8e\121\uff8e\001\002\000\050\043\uff8d\044\uff8d\047\uff8d" +
    "\051\uff8d\053\uff8d\054\uff8d\056\uff8d\057\uff8d\061\uff8d\063" +
    "\uff8d\066\uff8d\073\uff8d\074\uff8d\076\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\103\uff8d\121\uff8d\001\002\000\050\043\uffcd\044" +
    "\uffcd\047\uffcd\051\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd" +
    "\061\uffcd\063\uffcd\066\uffcd\073\uffcd\074\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\103\uffcd\121\uffcd\001\002\000\050" +
    "\043\uff8c\044\uff8c\047\uff8c\051\uff8c\053\uff8c\054\uff8c\056" +
    "\uff8c\057\uff8c\061\uff8c\063\uff8c\066\uff8c\073\uff8c\074\uff8c" +
    "\076\uff8c\077\uff8c\100\uff8c\101\uff8c\103\uff8c\121\uff8c\001" +
    "\002\000\050\043\uff88\044\uff88\047\uff88\051\uff88\053\uff88" +
    "\054\uff88\056\uff88\057\uff88\061\uff88\063\uff88\066\uff88\073" +
    "\uff88\074\uff88\076\uff88\077\uff88\100\uff88\101\uff88\103\uff88" +
    "\121\uff88\001\002\000\004\046\273\001\002\000\004\046" +
    "\232\001\002\000\036\024\222\046\205\047\uff71\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\004\047\uff72" +
    "\001\002\000\040\043\246\044\243\047\uff6f\053\244\054" +
    "\237\056\245\057\251\061\241\066\242\073\240\074\253" +
    "\076\252\077\250\100\254\101\247\001\002\000\004\047" +
    "\236\001\002\000\050\043\uff74\044\uff74\047\uff74\051\uff74" +
    "\053\uff74\054\uff74\056\uff74\057\uff74\061\uff74\063\uff74\066" +
    "\uff74\073\uff74\074\uff74\076\uff74\077\uff74\100\uff74\101\uff74" +
    "\103\uff74\121\uff74\001\002\000\034\024\222\046\205\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\034\024" +
    "\222\046\205\054\220\075\202\104\203\105\216\106\227" +
    "\107\210\114\207\115\221\116\225\117\211\120\214\001" +
    "\002\000\034\024\222\046\205\054\220\075\202\104\203" +
    "\105\216\106\227\107\210\114\207\115\221\116\225\117" +
    "\211\120\214\001\002\000\034\024\222\046\205\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\034\024\222" +
    "\046\205\054\220\075\202\104\203\105\216\106\227\107" +
    "\210\114\207\115\221\116\225\117\211\120\214\001\002" +
    "\000\034\024\222\046\205\054\220\075\202\104\203\105" +
    "\216\106\227\107\210\114\207\115\221\116\225\117\211" +
    "\120\214\001\002\000\034\024\222\046\205\054\220\075" +
    "\202\104\203\105\216\106\227\107\210\114\207\115\221" +
    "\116\225\117\211\120\214\001\002\000\034\024\222\046" +
    "\205\054\220\075\202\104\203\105\216\106\227\107\210" +
    "\114\207\115\221\116\225\117\211\120\214\001\002\000" +
    "\034\024\222\046\205\054\220\075\202\104\203\105\216" +
    "\106\227\107\210\114\207\115\221\116\225\117\211\120" +
    "\214\001\002\000\034\024\222\046\205\054\220\075\202" +
    "\104\203\105\216\106\227\107\210\114\207\115\221\116" +
    "\225\117\211\120\214\001\002\000\034\024\222\046\205" +
    "\054\220\075\202\104\203\105\216\106\227\107\210\114" +
    "\207\115\221\116\225\117\211\120\214\001\002\000\034" +
    "\024\222\046\205\054\220\075\202\104\203\105\216\106" +
    "\227\107\210\114\207\115\221\116\225\117\211\120\214" +
    "\001\002\000\034\024\222\046\205\054\220\075\202\104" +
    "\203\105\216\106\227\107\210\114\207\115\221\116\225" +
    "\117\211\120\214\001\002\000\034\024\222\046\205\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\050\043" +
    "\246\044\243\047\uff82\051\uff82\053\244\054\237\056\245" +
    "\057\251\061\uff82\063\uff82\066\242\073\uff82\074\uff82\076" +
    "\uff82\077\uff82\100\uff82\101\247\103\uff82\121\uff82\001\002" +
    "\000\050\043\246\044\243\047\uff87\051\uff87\053\244\054" +
    "\237\056\245\057\251\061\uff87\063\uff87\066\242\073\240" +
    "\074\uff87\076\252\077\250\100\254\101\247\103\uff87\121" +
    "\uff87\001\002\000\050\043\246\044\243\047\uff84\051\uff84" +
    "\053\244\054\237\056\245\057\251\061\uff84\063\uff84\066" +
    "\242\073\uff84\074\uff84\076\uff84\077\250\100\254\101\247" +
    "\103\uff84\121\uff84\001\002\000\050\043\uff7c\044\uff7c\047" +
    "\uff7c\051\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c\061\uff7c" +
    "\063\uff7c\066\242\073\uff7c\074\uff7c\076\uff7c\077\uff7c\100" +
    "\uff7c\101\uff7c\103\uff7c\121\uff7c\001\002\000\050\043\246" +
    "\044\243\047\uff83\051\uff83\053\244\054\237\056\245\057" +
    "\251\061\uff83\063\uff83\066\242\073\uff83\074\uff83\076\uff83" +
    "\077\uff83\100\254\101\247\103\uff83\121\uff83\001\002\000" +
    "\050\043\246\044\243\047\uff80\051\uff80\053\244\054\237" +
    "\056\245\057\251\061\uff80\063\uff80\066\242\073\uff80\074" +
    "\uff80\076\uff80\077\uff80\100\uff80\101\uff80\103\uff80\121\uff80" +
    "\001\002\000\050\043\uff7f\044\uff7f\047\uff7f\051\uff7f\053" +
    "\244\054\237\056\245\057\251\061\uff7f\063\uff7f\066\242" +
    "\073\uff7f\074\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\103" +
    "\uff7f\121\uff7f\001\002\000\050\043\uff7b\044\uff7b\047\uff7b" +
    "\051\uff7b\053\uff7b\054\uff7b\056\uff7b\057\uff7b\061\uff7b\063" +
    "\uff7b\066\242\073\uff7b\074\uff7b\076\uff7b\077\uff7b\100\uff7b" +
    "\101\uff7b\103\uff7b\121\uff7b\001\002\000\050\043\uff7e\044" +
    "\uff7e\047\uff7e\051\uff7e\053\uff7e\054\uff7e\056\245\057\251" +
    "\061\uff7e\063\uff7e\066\242\073\uff7e\074\uff7e\076\uff7e\077" +
    "\uff7e\100\uff7e\101\uff7e\103\uff7e\121\uff7e\001\002\000\050" +
    "\043\246\044\uff81\047\uff81\051\uff81\053\244\054\237\056" +
    "\245\057\251\061\uff81\063\uff81\066\242\073\uff81\074\uff81" +
    "\076\uff81\077\uff81\100\uff81\101\uff81\103\uff81\121\uff81\001" +
    "\002\000\050\043\uff7a\044\uff7a\047\uff7a\051\uff7a\053\uff7a" +
    "\054\uff7a\056\uff7a\057\uff7a\061\uff7a\063\uff7a\066\uff7a\073" +
    "\uff7a\074\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\103\uff7a" +
    "\121\uff7a\001\002\000\004\047\uff70\001\002\000\050\043" +
    "\246\044\243\047\uff86\051\uff86\053\244\054\237\056\245" +
    "\057\251\061\uff86\063\uff86\066\242\073\uff86\074\uff86\076" +
    "\252\077\250\100\254\101\247\103\uff86\121\uff86\001\002" +
    "\000\050\043\uff7d\044\uff7d\047\uff7d\051\uff7d\053\uff7d\054" +
    "\uff7d\056\245\057\251\061\uff7d\063\uff7d\066\242\073\uff7d" +
    "\074\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\103\uff7d\121" +
    "\uff7d\001\002\000\036\024\222\046\205\047\uff71\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\004\047\275" +
    "\001\002\000\050\043\uff75\044\uff75\047\uff75\051\uff75\053" +
    "\uff75\054\uff75\056\uff75\057\uff75\061\uff75\063\uff75\066\uff75" +
    "\073\uff75\074\uff75\076\uff75\077\uff75\100\uff75\101\uff75\103" +
    "\uff75\121\uff75\001\002\000\050\043\uff78\044\uff78\047\uff78" +
    "\051\uff78\053\uff78\054\uff78\056\uff78\057\uff78\061\uff78\063" +
    "\uff78\066\uff78\073\uff78\074\uff78\076\uff78\077\uff78\100\uff78" +
    "\101\uff78\103\uff78\121\uff78\001\002\000\004\121\uffa5\001" +
    "\002\000\004\114\207\001\002\000\050\043\uff6a\044\uff6a" +
    "\047\uff6a\051\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\061" +
    "\uff6a\063\uff6a\066\uff6a\073\uff6a\074\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\103\uff6a\121\uff6a\001\002\000\070\043" +
    "\uff62\044\uff62\045\uff62\047\uff62\051\uff62\052\uff62\053\uff62" +
    "\054\uff62\056\uff62\057\uff62\061\uff62\063\uff62\064\uff62\065" +
    "\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62" +
    "\074\uff62\076\uff62\077\uff62\100\uff62\101\uff62\103\uff62\121" +
    "\uff62\001\002\000\034\024\222\046\205\054\220\075\202" +
    "\104\203\105\216\106\227\107\210\114\207\115\221\116" +
    "\225\117\211\120\214\001\002\000\036\024\222\046\205" +
    "\047\uff71\054\220\075\202\104\203\105\216\106\227\107" +
    "\210\114\207\115\221\116\225\117\211\120\214\001\002" +
    "\000\072\043\uffb1\044\uffb1\045\uffb1\047\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\061\uffb1\062\303" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\103\uffb1\121\uffb1\001\002\000\070\043\uffb2\044" +
    "\uffb2\045\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\056\uffb2\057\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\076\uffb2\077\uffb2\100\uffb2\101\uffb2\103\uffb2\121\uffb2\001" +
    "\002\000\004\047\310\001\002\000\052\043\uff73\044\uff73" +
    "\045\uff73\047\uff73\051\uff73\053\uff73\054\uff73\056\uff73\057" +
    "\uff73\061\uff73\063\uff73\066\uff73\073\uff73\074\uff73\076\uff73" +
    "\077\uff73\100\uff73\101\uff73\103\uff73\121\uff73\001\002\000" +
    "\036\043\246\044\243\053\244\054\237\056\245\057\251" +
    "\063\312\066\242\073\240\074\253\076\252\077\250\100" +
    "\254\101\247\001\002\000\072\043\uffb0\044\uffb0\045\uffb0" +
    "\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\056\uffb0\057" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0\121\uffb0\001\002" +
    "\000\004\047\331\001\002\000\036\043\246\044\243\047" +
    "\315\053\244\054\237\056\245\057\251\066\242\073\240" +
    "\074\253\076\252\077\250\100\254\101\247\001\002\000" +
    "\052\043\uff79\044\uff79\047\uff79\051\uff79\053\uff79\054\uff79" +
    "\056\uff79\057\uff79\061\uff79\063\uff79\066\uff79\073\uff79\074" +
    "\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102\316\103\uff79" +
    "\121\uff79\001\002\000\036\024\222\046\205\050\317\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\034\024" +
    "\222\046\205\054\220\075\202\104\203\105\216\106\227" +
    "\107\210\114\207\115\221\116\225\117\211\120\214\001" +
    "\002\000\036\043\246\044\243\053\244\054\237\056\245" +
    "\057\251\066\242\073\240\074\253\076\252\077\250\100" +
    "\254\101\247\103\321\001\002\000\034\024\222\046\205" +
    "\054\220\075\202\104\203\105\216\106\227\107\210\114" +
    "\207\115\221\116\225\117\211\120\214\001\002\000\050" +
    "\043\246\044\243\047\uff76\051\uff76\053\244\054\237\056" +
    "\245\057\251\061\uff76\063\uff76\066\242\073\240\074\253" +
    "\076\252\077\250\100\254\101\247\103\uff76\121\uff76\001" +
    "\002\000\036\043\246\044\243\051\324\053\244\054\237" +
    "\056\245\057\251\066\242\073\240\074\253\076\252\077" +
    "\250\100\254\101\247\001\002\000\004\103\325\001\002" +
    "\000\004\050\326\001\002\000\034\024\222\046\205\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\036\043" +
    "\246\044\243\051\330\053\244\054\237\056\245\057\251" +
    "\066\242\073\240\074\253\076\252\077\250\100\254\101" +
    "\247\001\002\000\050\043\uff77\044\uff77\047\uff77\051\uff77" +
    "\053\uff77\054\uff77\056\uff77\057\uff77\061\uff77\063\uff77\066" +
    "\uff77\073\uff77\074\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\103\uff77\121\uff77\001\002\000\034\024\222\046\205\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\050\043" +
    "\246\044\243\047\uff5c\051\uff5c\053\244\054\237\056\245" +
    "\057\251\061\uff5c\063\uff5c\066\242\073\240\074\253\076" +
    "\252\077\250\100\254\101\247\103\uff5c\121\uff5c\001\002" +
    "\000\050\043\246\044\243\047\uff85\051\uff85\053\244\054" +
    "\237\056\245\057\251\061\uff85\063\uff85\066\242\073\uff85" +
    "\074\uff85\076\252\077\250\100\254\101\247\103\uff85\121" +
    "\uff85\001\002\000\036\024\222\046\205\047\uff71\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\004\047\336" +
    "\001\002\000\004\121\uffb9\001\002\000\036\024\222\046" +
    "\205\047\uff71\054\220\075\202\104\203\105\216\106\227" +
    "\107\210\114\207\115\221\116\225\117\211\120\214\001" +
    "\002\000\004\047\341\001\002\000\004\121\uffbd\001\002" +
    "\000\034\024\uffa8\046\uffa8\054\uffa8\075\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\107\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8" +
    "\120\uffa8\001\002\000\010\047\uffb3\061\uffb3\121\uffb3\001" +
    "\002\000\034\024\uffa9\046\uffa9\054\uffa9\075\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\114\uffa9\115\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\001\002\000\034\024\uffab\046\uffab\054\uffab" +
    "\075\uffab\104\uffab\105\uffab\106\uffab\107\uffab\114\uffab\115" +
    "\uffab\116\uffab\117\uffab\120\uffab\001\002\000\034\024\222" +
    "\046\205\054\220\075\202\104\203\105\216\106\227\107" +
    "\210\114\207\115\221\116\225\117\211\120\214\001\002" +
    "\000\034\024\uffa7\046\uffa7\054\uffa7\075\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7" +
    "\120\uffa7\001\002\000\010\047\uffb4\061\uffb4\121\uffb4\001" +
    "\002\000\034\024\uffaa\046\uffaa\054\uffaa\075\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\114\uffaa\115\uffaa\116\uffaa\117" +
    "\uffaa\120\uffaa\001\002\000\042\043\246\044\243\047\uffb5" +
    "\053\244\054\237\056\245\057\251\061\uffb5\066\242\073" +
    "\240\074\253\076\252\077\250\100\254\101\247\121\uffb5" +
    "\001\002\000\036\024\222\046\205\047\uff71\054\220\075" +
    "\202\104\203\105\216\106\227\107\210\114\207\115\221" +
    "\116\225\117\211\120\214\001\002\000\004\047\355\001" +
    "\002\000\004\121\uffb6\001\002\000\034\024\222\046\205" +
    "\054\220\075\202\104\203\105\216\106\227\107\210\114" +
    "\207\115\221\116\225\117\211\120\214\001\002\000\036" +
    "\043\246\044\243\047\360\053\244\054\237\056\245\057" +
    "\251\066\242\073\240\074\253\076\252\077\250\100\254" +
    "\101\247\001\002\000\052\012\uff55\014\uff55\016\uff55\020" +
    "\uff55\021\uff55\022\uff55\023\uff55\032\uff55\033\uff55\034\uff55" +
    "\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\050\uff55\107" +
    "\uff55\110\uff55\114\uff55\121\030\001\002\000\004\121\uffa6" +
    "\001\002\000\050\012\144\014\142\016\131\020\115\021" +
    "\120\022\157\023\150\032\156\033\154\034\151\035\146" +
    "\036\136\037\127\040\125\041\113\050\363\107\132\110" +
    "\134\114\207\001\002\000\070\003\uff55\011\uff55\012\uff55" +
    "\014\uff55\016\uff55\020\uff55\021\uff55\022\uff55\023\uff55\025" +
    "\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55" +
    "\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\051" +
    "\uff55\107\uff55\110\uff55\114\uff55\121\030\001\002\000\004" +
    "\121\uff9e\001\002\000\066\003\166\011\056\012\144\014" +
    "\142\016\131\020\115\021\120\022\157\023\150\025\054" +
    "\026\065\027\055\030\060\031\066\032\156\033\154\034" +
    "\151\035\146\036\136\037\127\040\125\041\113\051\uff9c" +
    "\107\132\110\134\114\133\001\002\000\004\051\367\001" +
    "\002\000\004\121\uff9f\001\002\000\036\024\222\046\205" +
    "\047\uff71\054\220\075\202\104\203\105\216\106\227\107" +
    "\210\114\207\115\221\116\225\117\211\120\214\001\002" +
    "\000\004\047\372\001\002\000\004\121\uffb7\001\002\000" +
    "\006\107\376\114\207\001\002\000\004\045\u0113\001\002" +
    "\000\004\047\u0102\001\002\000\004\045\u0100\001\002\000" +
    "\004\045\uff5d\001\002\000\004\114\207\001\002\000\022" +
    "\047\uff6c\052\uff6c\064\uff6c\065\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\001\002\000\006\050\uff55\121\030\001\002" +
    "\000\004\050\u0104\001\002\000\004\121\u0105\001\002\000" +
    "\006\013\u0108\015\u0106\001\002\000\004\103\u0110\001\002" +
    "\000\004\051\u010f\001\002\000\016\104\203\105\216\115" +
    "\221\116\225\117\211\120\214\001\002\000\010\013\u0108" +
    "\015\u0106\051\uff92\001\002\000\004\051\uff93\001\002\000" +
    "\004\103\u010c\001\002\000\004\121\u010d\001\002\000\064" +
    "\003\166\011\056\012\144\014\142\016\131\020\115\021" +
    "\120\022\157\023\150\025\054\026\065\027\055\030\060" +
    "\031\066\032\156\033\154\034\151\035\146\036\136\037" +
    "\127\040\125\041\113\107\132\110\134\114\133\001\002" +
    "\000\010\013\uff91\015\uff91\051\uff91\001\002\000\004\121" +
    "\uff94\001\002\000\004\121\u0111\001\002\000\064\003\166" +
    "\011\056\012\144\014\142\016\131\020\115\021\120\022" +
    "\157\023\150\025\054\026\065\027\055\030\060\031\066" +
    "\032\156\033\154\034\151\035\146\036\136\037\127\040" +
    "\125\041\113\107\132\110\134\114\133\001\002\000\010" +
    "\013\uff90\015\uff90\051\uff90\001\002\000\004\114\207\001" +
    "\002\000\004\045\uff60\001\002\000\070\043\uff66\044\uff66" +
    "\045\uff5e\047\uff66\051\uff66\052\uff66\053\uff66\054\uff66\056" +
    "\uff66\057\uff66\061\uff66\063\uff66\064\uff66\065\uff66\066\uff66" +
    "\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\076" +
    "\uff66\077\uff66\100\uff66\101\uff66\103\uff66\121\uff66\001\002" +
    "\000\004\121\uffef\001\002\000\066\003\137\011\056\012" +
    "\144\014\142\016\131\020\115\021\120\022\157\023\150" +
    "\025\054\026\065\027\055\030\060\031\066\032\156\033" +
    "\154\034\151\035\146\036\136\037\127\040\125\041\113" +
    "\051\uffe8\107\132\110\134\114\133\001\002\000\004\051" +
    "\uffe5\001\002\000\036\024\222\046\205\047\uff71\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\004\047\u011b" +
    "\001\002\000\004\121\uffba\001\002\000\036\043\246\044" +
    "\243\053\244\054\237\056\245\057\251\066\242\073\240" +
    "\074\253\076\252\077\250\100\254\101\247\121\uffbf\001" +
    "\002\000\010\052\uffd1\061\u0121\121\uffd1\001\002\000\006" +
    "\052\u011f\121\uffac\001\002\000\034\024\222\046\205\054" +
    "\220\075\202\104\203\105\216\106\227\107\210\114\207" +
    "\115\221\116\225\117\211\120\214\001\002\000\036\043" +
    "\246\044\243\053\244\054\237\056\245\057\251\066\242" +
    "\073\240\074\253\076\252\077\250\100\254\101\247\121" +
    "\uffae\001\002\000\004\114\u011d\001\002\000\006\052\uffd2" +
    "\121\uffd2\001\002\000\004\114\207\001\002\000\004\121" +
    "\uff6e\001\002\000\034\024\222\046\205\054\220\075\202" +
    "\104\203\105\216\106\227\107\210\114\207\115\221\116" +
    "\225\117\211\120\214\001\002\000\036\043\246\044\243" +
    "\047\u0127\053\244\054\237\056\245\057\251\066\242\073" +
    "\240\074\253\076\252\077\250\100\254\101\247\001\002" +
    "\000\006\050\uff55\121\030\001\002\000\004\050\u012d\001" +
    "\002\000\006\017\u012a\121\uff95\001\002\000\010\016\131" +
    "\050\uff55\121\030\001\002\000\004\121\uff96\001\002\000" +
    "\004\121\uff97\001\002\000\070\003\uff55\011\uff55\012\uff55" +
    "\014\uff55\016\uff55\020\uff55\021\uff55\022\uff55\023\uff55\025" +
    "\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55" +
    "\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\051" +
    "\uff55\107\uff55\110\uff55\114\uff55\121\030\001\002\000\066" +
    "\003\166\011\056\012\144\014\142\016\131\020\115\021" +
    "\120\022\157\023\150\025\054\026\065\027\055\030\060" +
    "\031\066\032\156\033\154\034\151\035\146\036\136\037" +
    "\127\040\125\041\113\051\uff9c\107\132\110\134\114\133" +
    "\001\002\000\004\051\u0130\001\002\000\006\017\uff98\121" +
    "\uff98\001\002\000\066\003\137\011\056\012\144\014\142" +
    "\016\131\020\115\021\120\022\157\023\150\025\054\026" +
    "\065\027\055\030\060\031\066\032\156\033\154\034\151" +
    "\035\146\036\136\037\127\040\125\041\113\051\uffe6\107" +
    "\132\110\134\114\133\001\002\000\004\051\uffe7\001\002" +
    "\000\036\024\222\046\205\047\uff71\054\220\075\202\104" +
    "\203\105\216\106\227\107\210\114\207\115\221\116\225" +
    "\117\211\120\214\001\002\000\004\047\u0135\001\002\000" +
    "\004\121\uffb8\001\002\000\036\024\222\046\205\047\uff71" +
    "\054\220\075\202\104\203\105\216\106\227\107\210\114" +
    "\207\115\221\116\225\117\211\120\214\001\002\000\004" +
    "\047\u0138\001\002\000\004\121\uffbc\001\002\000\006\052" +
    "\u013a\121\uffad\001\002\000\034\024\222\046\205\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\036\043\246" +
    "\044\243\053\244\054\237\056\245\057\251\066\242\073" +
    "\240\074\253\076\252\077\250\100\254\101\247\121\uffaf" +
    "\001\002\000\022\011\056\025\054\026\065\027\055\030" +
    "\060\031\066\107\376\114\207\001\002\000\004\114\u014c" +
    "\001\002\000\004\061\u0140\001\002\000\004\061\uffa0\001" +
    "\002\000\034\024\222\046\205\054\220\075\202\104\203" +
    "\105\216\106\227\107\210\114\207\115\221\116\225\117" +
    "\211\120\214\001\002\000\036\043\246\044\243\053\244" +
    "\054\237\056\245\057\251\061\u0142\066\242\073\240\074" +
    "\253\076\252\077\250\100\254\101\247\001\002\000\006" +
    "\107\376\114\207\001\002\000\004\047\u0144\001\002\000" +
    "\052\012\uff55\014\uff55\016\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037" +
    "\uff55\040\uff55\041\uff55\050\uff55\107\uff55\110\uff55\114\uff55" +
    "\121\030\001\002\000\004\121\uffa4\001\002\000\050\012" +
    "\144\014\142\016\131\020\115\021\120\022\157\023\150" +
    "\032\156\033\154\034\151\035\146\036\136\037\127\040" +
    "\125\041\113\050\u0147\107\132\110\134\114\207\001\002" +
    "\000\070\003\uff55\011\uff55\012\uff55\014\uff55\016\uff55\020" +
    "\uff55\021\uff55\022\uff55\023\uff55\025\uff55\026\uff55\027\uff55" +
    "\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036" +
    "\uff55\037\uff55\040\uff55\041\uff55\051\uff55\107\uff55\110\uff55" +
    "\114\uff55\121\030\001\002\000\004\121\uffa2\001\002\000" +
    "\066\003\166\011\056\012\144\014\142\016\131\020\115" +
    "\021\120\022\157\023\150\025\054\026\065\027\055\030" +
    "\060\031\066\032\156\033\154\034\151\035\146\036\136" +
    "\037\127\040\125\041\113\051\uff9c\107\132\110\134\114" +
    "\133\001\002\000\004\051\u014b\001\002\000\004\121\uffa3" +
    "\001\002\000\004\052\u014d\001\002\000\034\024\222\046" +
    "\205\054\220\075\202\104\203\105\216\106\227\107\210" +
    "\114\207\115\221\116\225\117\211\120\214\001\002\000" +
    "\036\043\246\044\243\053\244\054\237\056\245\057\251" +
    "\061\uffa1\066\242\073\240\074\253\076\252\077\250\100" +
    "\254\101\247\001\002\000\004\114\207\001\002\000\052" +
    "\043\uff64\044\uff64\045\uff5d\047\uff64\051\uff64\053\uff64\054" +
    "\uff64\056\uff64\057\uff64\061\uff64\063\uff64\066\uff64\073\uff64" +
    "\074\uff64\076\uff64\077\uff64\100\uff64\101\uff64\103\uff64\121" +
    "\uff64\001\002\000\036\024\222\046\205\047\uff71\054\220" +
    "\075\202\104\203\105\216\106\227\107\210\114\207\115" +
    "\221\116\225\117\211\120\214\001\002\000\004\047\u0153" +
    "\001\002\000\004\121\uffbb\001\002\000\022\011\056\025" +
    "\054\026\065\027\055\030\060\031\066\060\100\114\076" +
    "\001\002\000\004\047\uffe2\001\002\000\036\043\246\044" +
    "\243\053\244\054\237\056\245\057\251\066\242\073\240" +
    "\074\253\076\252\077\250\100\254\101\247\121\uffdd\001" +
    "\002\000\006\052\072\121\uffdc\001\002\000\004\121\ufff1" +
    "\001\002\000\012\046\u0164\052\072\061\u0162\121\uffdc\001" +
    "\002\000\024\011\056\025\054\026\065\027\055\030\060" +
    "\031\066\047\uffe3\060\100\114\076\001\002\000\004\047" +
    "\u015c\001\002\000\006\050\uff55\121\030\001\002\000\004" +
    "\050\u015e\001\002\000\070\003\uff55\011\uff55\012\uff55\014" +
    "\uff55\016\uff55\020\uff55\021\uff55\022\uff55\023\uff55\025\uff55" +
    "\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034" +
    "\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\051\uff55" +
    "\107\uff55\110\uff55\114\uff55\121\030\001\002\000\066\003" +
    "\137\011\056\012\144\014\142\016\131\020\115\021\120" +
    "\022\157\023\150\025\054\026\065\027\055\030\060\031" +
    "\066\032\156\033\154\034\151\035\146\036\136\037\127" +
    "\040\125\041\113\051\uffe8\107\132\110\134\114\133\001" +
    "\002\000\004\051\u0161\001\002\000\004\121\uffea\001\002" +
    "\000\004\114\u011d\001\002\000\004\121\uffed\001\002\000" +
    "\024\011\056\025\054\026\065\027\055\030\060\031\066" +
    "\047\uffe3\060\100\114\076\001\002\000\004\047\u0166\001" +
    "\002\000\006\050\uff55\121\030\001\002\000\004\050\u0168" +
    "\001\002\000\070\003\uff55\011\uff55\012\uff55\014\uff55\016" +
    "\uff55\020\uff55\021\uff55\022\uff55\023\uff55\025\uff55\026\uff55" +
    "\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035" +
    "\uff55\036\uff55\037\uff55\040\uff55\041\uff55\051\uff55\107\uff55" +
    "\110\uff55\114\uff55\121\030\001\002\000\066\003\137\011" +
    "\056\012\144\014\142\016\131\020\115\021\120\022\157" +
    "\023\150\025\054\026\065\027\055\030\060\031\066\032" +
    "\156\033\154\034\151\035\146\036\136\037\127\040\125" +
    "\041\113\051\uffe8\107\132\110\134\114\133\001\002\000" +
    "\004\051\u016b\001\002\000\004\121\uffec\001\002\000\006" +
    "\052\072\121\uffdc\001\002\000\004\121\uffee\001\002\000" +
    "\004\046\u016f\001\002\000\024\011\056\025\054\026\065" +
    "\027\055\030\060\031\066\047\uffe3\060\100\114\076\001" +
    "\002\000\004\047\u0171\001\002\000\006\050\uff55\121\030" +
    "\001\002\000\004\050\u0173\001\002\000\070\003\uff55\011" +
    "\uff55\012\uff55\014\uff55\016\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55" +
    "\041\uff55\051\uff55\107\uff55\110\uff55\114\uff55\121\030\001" +
    "\002\000\066\003\137\011\056\012\144\014\142\016\131" +
    "\020\115\021\120\022\157\023\150\025\054\026\065\027" +
    "\055\030\060\031\066\032\156\033\154\034\151\035\146" +
    "\036\136\037\127\040\125\041\113\051\uffe8\107\132\110" +
    "\134\114\133\001\002\000\004\051\u0176\001\002\000\004" +
    "\121\uffeb\001\002\000\020\011\056\025\054\026\065\027" +
    "\055\030\060\031\066\114\u0178\001\002\000\004\044\u017b" +
    "\001\002\000\004\044\u017a\001\002\000\006\044\uffd4\114" +
    "\uffd4\001\002\000\006\044\uffd3\114\uffd3\001\002\000\006" +
    "\050\uff55\121\030\001\002\000\004\050\u017e\001\002\000" +
    "\036\003\uff55\006\uff55\007\uff55\010\uff55\011\uff55\025\uff55" +
    "\026\uff55\027\uff55\030\uff55\031\uff55\051\uff55\113\uff55\114" +
    "\uff55\121\030\001\002\000\004\002\ufff8\001\002\000\004" +
    "\004\u0181\001\002\000\004\121\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\014\002\010\003\012\004\007\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\014\004\007\005\006\006\005\001\001\000\002\001" +
    "\001\000\006\004\016\005\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\022\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\031\011\032\001\001\000\002" +
    "\001\001\000\010\010\037\012\033\014\041\001\001\000" +
    "\004\013\052\001\001\000\002\001\001\000\004\011\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\043\012\033\014\041" +
    "\001\001\000\002\001\001\000\004\011\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\050\012\033" +
    "\014\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\062\017\061\021\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\070\001\001\000\004\020\u0156\001\001" +
    "\000\002\001\001\000\040\035\u0155\052\211\053\222\054" +
    "\223\055\225\056\177\057\205\060\200\062\214\065\203" +
    "\070\216\071\144\072\142\073\115\074\116\001\001\000" +
    "\016\016\062\017\100\021\063\022\074\023\076\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\106\001\001\000\002" +
    "\001\001\000\004\011\110\001\001\000\056\015\140\016" +
    "\062\017\121\021\063\025\137\026\157\027\127\030\154" +
    "\031\151\036\146\037\122\040\120\042\123\043\113\056" +
    "\111\060\125\066\152\067\134\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\u011d" +
    "\033\301\034\304\001\001\000\040\035\u011b\052\211\053" +
    "\222\054\223\055\225\056\177\057\205\060\200\062\214" +
    "\065\203\070\216\071\144\072\142\073\115\074\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\162\001\001\000\056\015\140\016\062\017\121\021" +
    "\063\027\164\030\154\031\151\036\146\037\122\040\120" +
    "\042\123\043\113\046\163\047\166\056\111\060\125\066" +
    "\152\067\134\071\144\072\142\073\115\074\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\015\140\016\062\017\121\021\063" +
    "\027\164\030\154\031\151\036\146\037\122\040\120\042" +
    "\123\043\113\047\170\056\111\060\125\066\152\067\134" +
    "\071\144\072\142\073\115\074\116\001\001\000\002\001" +
    "\001\000\054\015\140\016\062\017\121\021\063\027\164" +
    "\030\154\031\151\036\146\037\122\040\120\042\123\043" +
    "\113\047\172\056\111\060\125\066\152\067\134\071\144" +
    "\072\142\073\115\074\116\001\001\000\002\001\001\000" +
    "\004\011\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\035\212\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\065\203\070\216\071\144" +
    "\072\142\073\115\074\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\035\332\052\211\053\222\054\223" +
    "\055\225\056\177\057\205\060\200\062\214\065\203\070" +
    "\216\071\144\072\142\073\115\074\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\016\312\035\313\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\065\203\070\216\071\144\072\142\073\115\074" +
    "\116\001\001\000\002\001\001\000\006\033\301\034\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\035\275\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\065\203\070\216\071\144\072\142\073\115\074" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\035\233\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\063\232\064\234\065\203" +
    "\070\216\071\144\072\142\073\115\074\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\035\271\052\211\053\222\054\223\055" +
    "\225\056\177\057\205\060\200\062\214\065\203\070\216" +
    "\071\144\072\142\073\115\074\116\001\001\000\040\035" +
    "\270\052\211\053\222\054\223\055\225\056\177\057\205" +
    "\060\200\062\214\065\203\070\216\071\144\072\142\073" +
    "\115\074\116\001\001\000\042\035\233\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\063" +
    "\267\065\203\070\216\071\144\072\142\073\115\074\116" +
    "\001\001\000\040\035\266\052\211\053\222\054\223\055" +
    "\225\056\177\057\205\060\200\062\214\065\203\070\216" +
    "\071\144\072\142\073\115\074\116\001\001\000\040\035" +
    "\265\052\211\053\222\054\223\055\225\056\177\057\205" +
    "\060\200\062\214\065\203\070\216\071\144\072\142\073" +
    "\115\074\116\001\001\000\040\035\264\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\065" +
    "\203\070\216\071\144\072\142\073\115\074\116\001\001" +
    "\000\040\035\263\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\065\203\070\216\071\144" +
    "\072\142\073\115\074\116\001\001\000\040\035\262\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\065\203\070\216\071\144\072\142\073\115\074" +
    "\116\001\001\000\040\035\261\052\211\053\222\054\223" +
    "\055\225\056\177\057\205\060\200\062\214\065\203\070" +
    "\216\071\144\072\142\073\115\074\116\001\001\000\040" +
    "\035\260\052\211\053\222\054\223\055\225\056\177\057" +
    "\205\060\200\062\214\065\203\070\216\071\144\072\142" +
    "\073\115\074\116\001\001\000\040\035\257\052\211\053" +
    "\222\054\223\055\225\056\177\057\205\060\200\062\214" +
    "\065\203\070\216\071\144\072\142\073\115\074\116\001" +
    "\001\000\040\035\256\052\211\053\222\054\223\055\225" +
    "\056\177\057\205\060\200\062\214\065\203\070\216\071" +
    "\144\072\142\073\115\074\116\001\001\000\040\035\255" +
    "\052\211\053\222\054\223\055\225\056\177\057\205\060" +
    "\200\062\214\065\203\070\216\071\144\072\142\073\115" +
    "\074\116\001\001\000\040\035\254\052\211\053\222\054" +
    "\223\055\225\056\177\057\205\060\200\062\214\065\203" +
    "\070\216\071\144\072\142\073\115\074\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\035\233\052\211\053\222\054\223" +
    "\055\225\056\177\057\205\060\200\062\214\063\232\064" +
    "\273\065\203\070\216\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\056\177\060\200\070\300" +
    "\071\144\072\142\073\115\074\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\035\310\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\065" +
    "\203\070\216\071\144\072\142\073\115\074\116\001\001" +
    "\000\044\035\233\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\063\232\064\306\065\203" +
    "\070\216\071\144\072\142\073\115\074\116\001\001\000" +
    "\006\033\305\034\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\035\317\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\065\203\070\216\071\144" +
    "\072\142\073\115\074\116\001\001\000\040\035\322\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\065\203\070\216\071\144\072\142\073\115\074" +
    "\116\001\001\000\002\001\001\000\040\035\321\052\211" +
    "\053\222\054\223\055\225\056\177\057\205\060\200\062" +
    "\214\065\203\070\216\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\035\326\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\065" +
    "\203\070\216\071\144\072\142\073\115\074\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\035\331\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\065\203\070\216\071\144\072\142\073\115\074" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\035\233\052\211\053\222\054\223\055\225\056\177\057" +
    "\205\060\200\062\214\063\232\064\334\065\203\070\216" +
    "\071\144\072\142\073\115\074\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\035\233\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\063" +
    "\232\064\337\065\203\070\216\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\035\351\052\211\053\222\054\223\055" +
    "\225\056\177\057\205\060\200\062\214\065\203\070\216" +
    "\071\144\072\142\073\115\074\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\035\233\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\063\232\064\353\065\203" +
    "\070\216\071\144\072\142\073\115\074\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\035\356\052\211" +
    "\053\222\054\223\055\225\056\177\057\205\060\200\062" +
    "\214\065\203\070\216\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\006\011\361\050\360\001" +
    "\001\000\002\001\001\000\040\030\363\031\151\036\146" +
    "\037\122\040\120\042\123\043\113\056\111\060\125\066" +
    "\152\067\134\071\144\072\142\073\115\074\116\001\001" +
    "\000\004\011\364\001\001\000\002\001\001\000\056\015" +
    "\140\016\062\017\121\021\063\027\164\030\154\031\151" +
    "\036\146\037\122\040\120\042\123\043\113\046\365\047" +
    "\166\056\111\060\125\066\152\067\134\071\144\072\142" +
    "\073\115\074\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\035\233\052\211\053\222\054\223\055\225" +
    "\056\177\057\205\060\200\062\214\063\232\064\370\065" +
    "\203\070\216\071\144\072\142\073\115\074\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\060\125\066" +
    "\374\071\144\072\142\073\376\074\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\060\u0100\071\144\072\142\073\376\074\373" +
    "\001\001\000\002\001\001\000\004\011\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\u0106\045\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u010a\001\001\000\006\044\u0109\045\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\015" +
    "\140\016\062\017\121\021\063\027\164\030\154\031\151" +
    "\036\146\037\122\040\120\042\123\043\113\047\u010d\056" +
    "\111\060\125\066\152\067\134\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\015\140\016\062\017\121\021\063" +
    "\027\164\030\154\031\151\036\146\037\122\040\120\042" +
    "\123\043\113\047\u0111\056\111\060\125\066\152\067\134" +
    "\071\144\072\142\073\115\074\116\001\001\000\002\001" +
    "\001\000\010\071\u0113\072\u0114\073\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\015" +
    "\140\016\062\017\121\021\063\025\u0117\026\157\027\127" +
    "\030\154\031\151\036\146\037\122\040\120\042\123\043" +
    "\113\056\111\060\125\066\152\067\134\071\144\072\142" +
    "\073\115\074\116\001\001\000\002\001\001\000\044\035" +
    "\233\052\211\053\222\054\223\055\225\056\177\057\205" +
    "\060\200\062\214\063\232\064\u0119\065\203\070\216\071" +
    "\144\072\142\073\115\074\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\035\u011f\052\211\053\222\054\223" +
    "\055\225\056\177\057\205\060\200\062\214\065\203\070" +
    "\216\071\144\072\142\073\115\074\116\001\001\000\002" +
    "\001\001\000\004\020\u0121\001\001\000\002\001\001\000" +
    "\016\056\u0123\060\u0100\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\040\035\u0125\052\211\053" +
    "\222\054\223\055\225\056\177\057\205\060\200\062\214" +
    "\065\203\070\216\071\144\072\142\073\115\074\116\001" +
    "\001\000\002\001\001\000\006\011\u0127\075\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\u0127\042" +
    "\u012b\075\u012a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u012d\001\001\000\056\015\140\016\062\017" +
    "\121\021\063\027\164\030\154\031\151\036\146\037\122" +
    "\040\120\042\123\043\113\046\u012e\047\166\056\111\060" +
    "\125\066\152\067\134\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\015" +
    "\140\016\062\017\121\021\063\026\u0131\027\127\030\154" +
    "\031\151\036\146\037\122\040\120\042\123\043\113\056" +
    "\111\060\125\066\152\067\134\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\044\035\233\052" +
    "\211\053\222\054\223\055\225\056\177\057\205\060\200" +
    "\062\214\063\232\064\u0133\065\203\070\216\071\144\072" +
    "\142\073\115\074\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\035\233\052\211\053\222\054\223\055" +
    "\225\056\177\057\205\060\200\062\214\063\232\064\u0136" +
    "\065\203\070\216\071\144\072\142\073\115\074\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\035\u013a\052\211\053\222\054\223\055\225\056" +
    "\177\057\205\060\200\062\214\065\203\070\216\071\144" +
    "\072\142\073\115\074\116\001\001\000\002\001\001\000" +
    "\030\016\062\017\u013c\021\063\031\u013e\041\u013d\060\125" +
    "\066\152\071\144\072\142\073\376\074\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\035\u0140\052\211\053\222\054\223\055\225\056\177\057" +
    "\205\060\200\062\214\065\203\070\216\071\144\072\142" +
    "\073\115\074\116\001\001\000\002\001\001\000\020\031" +
    "\u0142\060\125\066\152\071\144\072\142\073\376\074\373" +
    "\001\001\000\002\001\001\000\006\011\u0145\051\u0144\001" +
    "\001\000\002\001\001\000\040\030\u0147\031\151\036\146" +
    "\037\122\040\120\042\123\043\113\056\111\060\125\066" +
    "\152\067\134\071\144\072\142\073\115\074\116\001\001" +
    "\000\004\011\u0148\001\001\000\002\001\001\000\056\015" +
    "\140\016\062\017\121\021\063\027\164\030\154\031\151" +
    "\036\146\037\122\040\120\042\123\043\113\046\u0149\047" +
    "\166\056\111\060\125\066\152\067\134\071\144\072\142" +
    "\073\115\074\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\035\u014d\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\065" +
    "\203\070\216\071\144\072\142\073\115\074\116\001\001" +
    "\000\002\001\001\000\010\071\u0113\072\u0114\073\u014f\001" +
    "\001\000\002\001\001\000\044\035\233\052\211\053\222" +
    "\054\223\055\225\056\177\057\205\060\200\062\214\063" +
    "\232\064\u0151\065\203\070\216\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\062\017\100\021\063\023\u0154\024\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0157\001" +
    "\001\000\002\001\001\000\004\061\u0162\001\001\000\016" +
    "\016\062\017\100\021\063\022\u015a\023\076\024\073\001" +
    "\001\000\002\001\001\000\004\011\u015c\001\001\000\002" +
    "\001\001\000\004\011\u015e\001\001\000\056\015\140\016" +
    "\062\017\121\021\063\025\u015f\026\157\027\127\030\154" +
    "\031\151\036\146\037\122\040\120\042\123\043\113\056" +
    "\111\060\125\066\152\067\134\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u016b\001\001\000\002\001\001\000\016\016\062" +
    "\017\100\021\063\022\u0164\023\076\024\073\001\001\000" +
    "\002\001\001\000\004\011\u0166\001\001\000\002\001\001" +
    "\000\004\011\u0168\001\001\000\056\015\140\016\062\017" +
    "\121\021\063\025\u0169\026\157\027\127\030\154\031\151" +
    "\036\146\037\122\040\120\042\123\043\113\056\111\060" +
    "\125\066\152\067\134\071\144\072\142\073\115\074\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\u016c\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\062\017\100\021\063\022\u016f\023\076\024\073\001" +
    "\001\000\002\001\001\000\004\011\u0171\001\001\000\002" +
    "\001\001\000\004\011\u0173\001\001\000\056\015\140\016" +
    "\062\017\121\021\063\025\u0174\026\157\027\127\030\154" +
    "\031\151\036\146\037\122\040\120\042\123\043\113\056" +
    "\111\060\125\066\152\067\134\071\144\072\142\073\115" +
    "\074\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\062\017\u0178\021\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u017c\001\001\000\002\001\001\000\006\007\u017e" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }
   


    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		ErrorManager.add(String.valueOf(s.value),s.right,s.left,Err.SYNTACTIC);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	public static int tempCount = 0;
	public static String genTemp(){
		String t = "t"+tempCount;
		tempCount++;
		return t;
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // new_line ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // new_line ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_line",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // is_static ::= 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // is_static ::= STATIC 
            {
              Boolean RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("is_static",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // visibility ::= 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // visibility ::= PRIVATE 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // visibility ::= PUBLIC 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("visibility",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cast_value ::= LPAREN prim_type RPAREN expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(e1,t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast_value",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // simple_call ::= simple_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // simple_call ::= simple_var_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_call",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // call_list ::= simple_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // call_list ::= call_list DOT simple_call 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((VarCall)t1).setNext(t2);RESULT = t1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_list",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // simple_var_call ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new VarCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // simple_var_call ::= ID list_dim_array 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> exps = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayItemCall(id,exps);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_var_call",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // method_call ::= simple_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // method_call ::= call_list DOT simple_method_call 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((VarCall)t1).setNext(t2);RESULT = t1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // var_call ::= simple_var_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // var_call ::= call_list DOT simple_var_call 
            {
              Node RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((VarCall)t1).setNext(t2);RESULT = t1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_call",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // var_method_call ::= method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_method_call",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // var_method_call ::= var_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_method_call",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // this_var_method_call ::= var_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_method_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // this_var_method_call ::= THIS DOT var_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_method_call",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // this_var_call ::= var_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // this_var_call ::= THIS DOT var_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		VarCall t1 = new VarCall("this"); t1.setNext(t); RESULT = t1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_var_call",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // this_method_call ::= method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_method_call",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // this_method_call ::= THIS DOT method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		VarCall t1 = new VarCall("this"); t1.setNext(t); RESULT = t1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("this_method_call",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // args ::= expression 
            {
              Stack<Node> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Stack<Node> tipos = new Stack<>();tipos.push(t);RESULT = tipos;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // args ::= expression COMA args 
            {
              Stack<Node> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> tipos = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		tipos.push(t);RESULT = tipos;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arg_list ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arg_list ::= args 
            {
              Stack<Node> RESULT =null;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> tipos = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = tipos;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // simple_method_call ::= ID LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new MethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_method_call",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // instance ::= NEW ARRAY LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayInstance(args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // instance ::= NEW ID LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Instance(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instance",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // op_ternario ::= LPAREN expression RPAREN ASK expression COLON expression 
            {
              Node RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node lt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Ask(lt,e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // op_ternario ::= LPAREN expression RPAREN ASK LBRACKET expression RBRACKET COLON LBRACKET expression RBRACKET 
            {
              Node RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Node lt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Ask(lt,e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_ternario",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arit_expression ::= MINUS expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mul(e1, new Value(-1,SymbolTableManager.getType("int")));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arit_expression ::= LPAREN expression RPAREN 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arit_expression ::= expression POW expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Pow(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arit_expression ::= expression DIV expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Div(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arit_expression ::= expression TIMES expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mul(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arit_expression ::= expression MINUS expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Sub(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arit_expression ::= expression PLUS expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Add(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_expression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logic_expression ::= expression LESS expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,"<");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logic_expression ::= expression LEQL expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,"<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logic_expression ::= expression GREATER expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,">");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logic_expression ::= expression GEQL expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,">=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logic_expression ::= expression NOTEQL expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,"!=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logic_expression ::= expression EQUALS expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(e1,e2,"==");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logic_expression ::= NOT expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Not(e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logic_expression ::= expression AND expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new And(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logic_expression ::= expression OR expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Or(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_expression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= NULL 
            {
              Node RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= this_var_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= cast_value 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= value 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value t = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= instance 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= arit_expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= logic_expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= op_ternario 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_sentence ::= DEFAULT COLON NEWLINE loop_inst_list 
            {
              Case RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_sentence ::= CASE value COLON NEWLINE loop_inst_list 
            {
              Case RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(v,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_sentence",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // list_case ::= case_sentence 
            {
              Stack<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stack<>();RESULT.push(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_case ::= case_sentence list_case 
            {
              Stack<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Case> cases = (Stack<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cases.push(c);RESULT = cases;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_statement ::= SWITCH LPAREN this_var_call RPAREN new_line LBRACKET NEWLINE list_case RBRACKET 
            {
              Node RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Case> cases = (Stack<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(var,cases);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_statement ::= IF LPAREN expression RPAREN if_instructions 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_instructions 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> e = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		If _if = new If(exp,ins);_if.setElseNodes(e);RESULT = _if;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_statement ::= IF LPAREN expression RPAREN if_instructions ELSE if_statement 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node nif = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		If _if = new If(exp,ins);_if.setNextNode(nif);RESULT = _if;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_instructions ::= new_line LBRACKET new_line loop_inst RBRACKET 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_instructions",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // loop_inst_list ::= error NEWLINE loop_inst_list 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // loop_inst_list ::= instruction NEWLINE 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Stack<>();RESULT.push(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // loop_inst_list ::= instruction NEWLINE loop_inst_list 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ins.push(i);RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // loop_inst ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // loop_inst ::= loop_inst_list 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_inst",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // loop_instructions ::= new_line non_dec_instruction 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stack<>();RESULT.push(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_instructions ::= new_line LBRACKET new_line loop_inst RBRACKET 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instructions",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_init ::= assign 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_init ::= var_type ID EQL expression 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(new VarCall(id),t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_instructions ::= new_line non_dec_instruction 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stack<>();RESULT.push(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_instructions ::= new_line LBRACKET new_line loop_inst RBRACKET 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_instructions",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_statement ::= FOR LPAREN for_init COMA expression COMA assign RPAREN for_instructions 
            {
              Node RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node assign = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node inc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(assign,exp,inc,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // do_while_statement ::= DO new_line LBRACKET new_line loop_inst RBRACKET new_line WHILE LPAREN expression RPAREN 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new DoWhile(exp,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while_statement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_statement ::= WHILE LPAREN expression RPAREN loop_instructions 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(exp,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assign_op ::= DIVEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign_op ::= TIMESEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_op ::= MINUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_op ::= PLUSEQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_op ::= EQL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_dec ::= ID var_list 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<String> ids = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_dec ::= var_type var_list 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<String> ids = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_dec ::= ID var_list EQL expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<String> vars = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(vars,SymbolTableManager.getType(t),e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_dec ::= var_type var_list EQL expression 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<String> vars = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(vars,type,e1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dim ::= LHOOK expression RHOOK 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dim",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // list_dim_array ::= dim 
            {
              Stack<Node> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stack<>();RESULT.push(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // list_dim_array ::= dim list_dim_array 
            {
              Stack<Node> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> exps = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		exps.push(exp);RESULT = exps;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_dim_array",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assign ::= this_var_call MINUSMINUS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Assign(e1,new Sub(e1,new Value(1,SymbolTableManager.getType("int"))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assign ::= this_var_call PLUSPLUS 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Assign(e1,new Add(e1,new Value(1,SymbolTableManager.getType("int"))));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign ::= this_var_call assign_op expression 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // non_dec_instruction ::= ARC0 LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // non_dec_instruction ::= RECTANGULO LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // non_dec_instruction ::= POLIGONO LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_dec_instruction ::= LINEA LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_dec_instruction ::= OVALO LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // non_dec_instruction ::= IMPRIMIR LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // non_dec_instruction ::= LIENZO LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_dec_instruction ::= TEXTO LPAREN arg_list RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> args = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new NativeMethodCall(id,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // non_dec_instruction ::= RETURN 
            {
              Node RESULT =null;
		RESULT = new Return();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // non_dec_instruction ::= RETURN expression 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Return(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // non_dec_instruction ::= CONTINUE 
            {
              Node RESULT =null;
		RESULT = new Continue();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // non_dec_instruction ::= BREAK 
            {
              Node RESULT =null;
		RESULT = new Break();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_dec_instruction ::= this_method_call 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // non_dec_instruction ::= switch_statement 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // non_dec_instruction ::= if_statement 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // non_dec_instruction ::= for_statement 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // non_dec_instruction ::= do_while_statement 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // non_dec_instruction ::= while_statement 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // non_dec_instruction ::= assign 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_dec_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruction ::= non_dec_instruction 
            {
              Node RESULT =null;
		int n_decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node n_dec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n_dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruction ::= var_dec 
            {
              Node RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node dec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= FALSE 
            {
              Value RESULT =null;
		 
			Type t = SymbolTableManager.getType("bool");
			Value v = new Value(0,t);
			RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= TRUE 
            {
              Value RESULT =null;
		 
			Type t = SymbolTableManager.getType("bool");
			Value v = new Value(1,t);
			RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= CHR 
            {
              Value RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String chr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			Type t = SymbolTableManager.getType("char");
			Value v = new Value(chr,t);
			RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= CAD 
            {
              Value RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			Type t = SymbolTableManager.getType("string");
			Value v = new Value(cad,t);
			RESULT = v;
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= DEC 
            {
              Value RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			Type t = SymbolTableManager.getType("float");
			Value v = new Value(dec,t);
			RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= NUM 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			Type t = SymbolTableManager.getType("int");
			Value v = new Value(n,t);
			RESULT = v;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_list ::= ID 
            {
              Stack<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Stack<String> ids = new Stack<>();
				ids.push(id);
				RESULT = ids;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_list ::= ID COMA var_list 
            {
              Stack<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<String> ids = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				ids.push(id);
				RESULT = ids;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_type ::= ARRAY LESS ID GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Type t = new Type("Array");
				t.setSubtype(SymbolTableManager.getType(type));
				RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array_type ::= ARRAY LESS var_type GREATER 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			Type t = new Type("Array");
			t.setSubtype(type);
			RESULT = t;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // prim_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // prim_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // prim_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // prim_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // prim_type ::= INT 
            {
              Type RESULT =null;
		RESULT = SymbolTableManager.getType("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prim_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_type ::= array_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_type ::= prim_type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_dec_assign ::= 
            {
              Node RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_dec_assign ::= EQL expression 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec_assign",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= ID ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= var_type ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type.getName();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= REF prim_type ID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = type.getName();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_params ::= param 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_params ::= param COMA list_params 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String syms = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p + "_" + syms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_params",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= list_params 
            {
              String RESULT =null;
		int symsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String syms = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "_"+syms;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_list_instructions ::= error NEWLINE method_instructions 
            {
              Stack<Node> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_list_instructions ::= instruction NEWLINE 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Stack<>();RESULT.push(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_list_instructions ::= instruction NEWLINE method_list_instructions 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ins.push(i);RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list_instructions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_instructions ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_instructions ::= method_list_instructions 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_instructions",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration ::= visibility is_static ID LPAREN params RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Method(id,p,nodes);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= visibility is_static VOID ID LPAREN params RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Method(id,p,nodes);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= visibility is_static ID ID LPAREN params RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Method(id,p,nodes);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= visibility is_static ID ID var_dec_assign 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= visibility is_static ID ID COMA var_list var_dec_assign 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<String> ids = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= visibility is_static var_type ID LPAREN params RPAREN new_line LBRACKET new_line method_instructions RBRACKET 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Method(id,p,nodes);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= visibility is_static var_type ID var_dec_assign 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= visibility is_static var_type ID COMA var_list var_dec_assign 
            {
              Node RESULT =null;
		int accessleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Integer access = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int _sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int _sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Boolean _s = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<String> ids = (Stack<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_class_expr ::= error NEWLINE list_class_expr 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list_class_expr ::= declaration NEWLINE 
            {
              Stack<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Stack<>();RESULT.push(node);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list_class_expr ::= declaration NEWLINE list_class_expr 
            {
              Stack<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node node = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		nodes.push(node);RESULT = nodes;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_class_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_body ::= new_line RBRACKET new_line 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_body ::= new_line list_class_expr RBRACKET new_line 
            {
              Stack<Node> RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = nodes;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_class ::= PUBLIC CLASS ID new_line LBRACKET class_body 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Clazz(id,nodes);RESULT.genCode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // init_class ::= PUBLIC CLASS ID EXTENDS ID new_line LBRACKET class_body 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> nodes = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Clazz(id,type,nodes);RESULT.genCode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_class",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_import ::= SHARP IMPORT FILE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	String file = f.replaceAll("<","").replaceAll(">","");
	String f_path = ProjectManager.getFile(file);
        String cfile = SymbolTableManager.getCurrentFile();
	ICParser.parse(f_path);
	SymbolTableManager.setCurrentFile(cfile);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec_import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_import ::= error NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_import ::= dec_import NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_import ::= dec_import NEWLINE list_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_import",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // init_import ::= init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // init_import ::= list_import init_class 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("init_import",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= NEWLINE init_import 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

