
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 05 06:28:51 CST 2014
//----------------------------------------------------

package jbc.parser;

import java.util.Stack;
import jbc.parser.nodes.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 05 06:28:51 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\005\003\000\002\005\002\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\010" +
    "\010\000\002\010\010\000\002\010\005\000\002\011\007" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\006\000\002\012\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\002\uffff\042\006\001\002\000\004\002" +
    "\202\001\002\000\004\002\000\001\002\000\004\060\011" +
    "\001\002\000\006\002\ufffd\042\006\001\002\000\004\002" +
    "\ufffe\001\002\000\004\016\012\001\002\000\004\017\013" +
    "\001\002\000\004\020\014\001\002\000\020\021\ufffa\040" +
    "\021\041\016\043\026\044\027\045\023\060\025\001\002" +
    "\000\004\037\201\001\002\000\004\027\174\001\002\000" +
    "\004\037\173\001\002\000\004\021\172\001\002\000\004" +
    "\027\165\001\002\000\004\021\ufffb\001\002\000\030\050" +
    "\104\051\073\052\077\053\103\054\101\055\106\056\074" +
    "\057\076\060\105\061\071\062\110\001\002\000\020\021" +
    "\ufff8\040\021\041\016\043\026\044\027\045\023\060\025" +
    "\001\002\000\006\022\070\036\067\001\002\000\024\004" +
    "\037\005\034\006\041\007\036\010\044\011\040\012\035" +
    "\013\043\060\042\001\002\000\004\060\032\001\002\000" +
    "\004\037\031\001\002\000\020\021\ufff7\040\ufff7\041\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\060\ufff7\001\002\000\004\037" +
    "\033\001\002\000\020\021\ufff4\040\ufff4\041\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\060\ufff4\001\002\000\004\016\065\001" +
    "\002\000\004\016\063\001\002\000\004\016\061\001\002" +
    "\000\004\016\057\001\002\000\004\016\055\001\002\000" +
    "\004\016\053\001\002\000\004\016\051\001\002\000\004" +
    "\016\047\001\002\000\004\016\045\001\002\000\004\017" +
    "\046\001\002\000\004\037\uffcf\001\002\000\004\017\050" +
    "\001\002\000\004\037\uffd3\001\002\000\004\017\052\001" +
    "\002\000\004\037\uffcb\001\002\000\004\017\054\001\002" +
    "\000\004\037\uffce\001\002\000\004\017\056\001\002\000" +
    "\004\037\uffd1\001\002\000\004\017\060\001\002\000\004" +
    "\037\uffcc\001\002\000\004\017\062\001\002\000\004\037" +
    "\uffd0\001\002\000\004\017\064\001\002\000\004\037\uffd2" +
    "\001\002\000\004\017\066\001\002\000\004\037\uffcd\001" +
    "\002\000\020\021\ufff3\040\ufff3\041\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\060\ufff3\001\002\000\034\040\100\041\072\050" +
    "\104\051\073\052\077\053\103\054\101\055\106\056\074" +
    "\057\076\060\105\061\071\062\110\001\002\000\040\014" +
    "\uffdd\015\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\046" +
    "\uffdd\047\uffdd\001\002\000\004\027\140\001\002\000\030" +
    "\050\104\051\073\052\077\053\103\054\101\055\106\056" +
    "\074\057\076\060\105\061\071\062\110\001\002\000\030" +
    "\050\104\051\073\052\077\053\103\054\101\055\106\056" +
    "\074\057\076\060\105\061\071\062\110\001\002\000\040" +
    "\014\uffdf\015\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf" +
    "\046\uffdf\047\uffdf\001\002\000\030\050\104\051\073\052" +
    "\077\053\103\054\101\055\106\056\074\057\076\060\105" +
    "\061\071\062\110\001\002\000\030\050\104\051\073\052" +
    "\077\053\103\054\101\055\106\056\074\057\076\060\105" +
    "\061\071\062\110\001\002\000\004\027\131\001\002\000" +
    "\030\050\104\051\073\052\077\053\103\054\101\055\106" +
    "\056\074\057\076\060\105\061\071\062\110\001\002\000" +
    "\004\037\ufff0\001\002\000\030\050\104\051\073\052\077" +
    "\053\103\054\101\055\106\056\074\057\076\060\105\061" +
    "\071\062\110\001\002\000\030\050\104\051\073\052\077" +
    "\053\103\054\101\055\106\056\074\057\076\060\105\061" +
    "\071\062\110\001\002\000\040\014\uffde\015\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\037\uffde\046\uffde\047\uffde\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\020\023\112\024\113\025\114\026\115\031\111\037" +
    "\uffe8\047\116\001\002\000\040\014\uffdc\015\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\037\uffdc\046\uffdc\047\uffdc\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\030\050\104\051\073\052\077\053\103\054\101\055" +
    "\106\056\074\057\076\060\105\061\071\062\110\001\002" +
    "\000\004\037\uffe9\001\002\000\004\037\uffec\001\002\000" +
    "\004\037\uffea\001\002\000\004\037\uffed\001\002\000\004" +
    "\037\uffee\001\002\000\004\037\uffeb\001\002\000\040\014" +
    "\uffd6\015\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\046" +
    "\uffd6\047\uffd6\001\002\000\040\014\uffdb\015\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\037\uffdb\046\uffdb\047\uffdb\001\002" +
    "\000\040\014\uffd8\015\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\037\uffd8\046\uffd8\047\uffd8\001\002\000\040\014\uffd7\015" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\046\uffd7\047" +
    "\uffd7\001\002\000\030\050\104\051\073\052\077\053\103" +
    "\054\101\055\106\056\074\057\076\060\105\061\071\062" +
    "\110\001\002\000\004\030\133\001\002\000\004\037\uffe7" +
    "\001\002\000\040\014\uffd9\015\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\046\uffd9\047\uffd9\001\002\000\040\014" +
    "\uffd4\015\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\046" +
    "\uffd4\047\uffd4\001\002\000\040\014\uffd5\015\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\037\uffd5\046\uffd5\047\uffd5\001\002" +
    "\000\040\014\uffda\015\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\037\uffda\046\uffda\047\uffda\001\002\000\030\050\104\051" +
    "\073\052\077\053\103\054\101\055\106\056\074\057\076" +
    "\060\105\061\071\062\110\001\002\000\004\030\142\001" +
    "\002\000\004\037\uffe6\001\002\000\004\021\ufff9\001\002" +
    "\000\004\046\162\001\002\000\016\014\151\015\146\032" +
    "\147\033\153\034\150\035\152\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\030\050\104" +
    "\051\073\052\077\053\103\054\101\055\106\056\074\057" +
    "\076\060\105\061\071\062\110\001\002\000\004\046\uffe4" +
    "\001\002\000\004\046\uffe0\001\002\000\004\046\uffe1\001" +
    "\002\000\004\046\uffe2\001\002\000\004\046\uffe5\001\002" +
    "\000\004\046\uffe3\001\002\000\004\044\163\001\002\000" +
    "\004\060\164\001\002\000\004\037\uffef\001\002\000\030" +
    "\050\104\051\073\052\077\053\103\054\101\055\106\056" +
    "\074\057\076\060\105\061\071\062\110\001\002\000\004" +
    "\030\167\001\002\000\004\022\170\001\002\000\034\040" +
    "\100\041\072\050\104\051\073\052\077\053\103\054\101" +
    "\055\106\056\074\057\076\060\105\061\071\062\110\001" +
    "\002\000\004\037\ufff2\001\002\000\006\002\ufffc\042\ufffc" +
    "\001\002\000\020\021\ufff6\040\ufff6\041\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\060\ufff6\001\002\000\030\050\104\051\073" +
    "\052\077\053\103\054\101\055\106\056\074\057\076\060" +
    "\105\061\071\062\110\001\002\000\004\030\176\001\002" +
    "\000\004\022\177\001\002\000\034\040\100\041\072\050" +
    "\104\051\073\052\077\053\103\054\101\055\106\056\074" +
    "\057\076\060\105\061\071\062\110\001\002\000\004\037" +
    "\ufff1\001\002\000\020\021\ufff5\040\ufff5\041\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\060\ufff5\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\007\004\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\017" +
    "\006\021\007\023\010\027\011\016\015\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\143\014\144\016\074\001\001\000\014\006\142\007\023" +
    "\010\027\011\016\015\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\101\014\106\016\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\136\016\074\001\001\000\006\014\135\016\074\001\001" +
    "\000\002\001\001\000\006\014\134\016\074\001\001\000" +
    "\006\014\133\016\074\001\001\000\002\001\001\000\006" +
    "\014\127\016\074\001\001\000\002\001\001\000\006\014" +
    "\126\016\074\001\001\000\006\014\125\016\074\001\001" +
    "\000\002\001\001\000\006\014\124\016\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\123\016\074" +
    "\001\001\000\006\014\122\016\074\001\001\000\006\014" +
    "\121\016\074\001\001\000\006\014\120\016\074\001\001" +
    "\000\006\014\117\016\074\001\001\000\006\014\116\016" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\131\016\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\140\016\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\160\016\074\001\001\000\006\014\157\016\074" +
    "\001\001\000\006\014\156\016\074\001\001\000\006\014" +
    "\155\016\074\001\001\000\006\014\154\016\074\001\001" +
    "\000\006\014\153\016\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\165\016\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\170\014" +
    "\106\016\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\174\016\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\177\014\106" +
    "\016\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
		//ErrorManager.syntaxError(new Err(s.value.toString(),s.right,s.left)); 
		//ErrorManager.setDesc("");
        System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
        
    }
   


    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		//ErrorManager.syntaxError(new Err(s.value.toString(),s.right,s.left)); 
		//ErrorManager.setDesc("");
		System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call ::= CALL ID LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= CALL LINEA LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= CALL TEXTO LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call ::= CALL ARC0 LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= CALL OVALO LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call ::= CALL RECTANGULO LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call ::= CALL POLIGONO LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_call ::= CALL LIENZO LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call ::= CALL IMPRIMIR LPAREN RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new MethodCall(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cast ::= CHAR_STRING value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cast ::= CHAR_INT value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cast ::= BOOL_STRING value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cast ::= FLOAT_STRING value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cast ::= INT_CHAR value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cast ::= FLOAT_INT value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cast ::= INT_FLOAT value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cast ::= INT_STRING value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cast",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= DEC 
            {
              Node RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Value(dec);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= NUM 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Value(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ID(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= cast 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l_expresion ::= value LEQL value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,"<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // l_expresion ::= value LESS value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,"<");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // l_expresion ::= value GEQL value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,">=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // l_expresion ::= value GREATER value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,">");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // l_expresion ::= value NOTEQL value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,"!=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // l_expresion ::= value EQUALS value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Comparation(v1,v2,"==");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l_expresion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= HEAP LHOOK value RHOOK 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ID("heap",v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= STACK LHOOK value RHOOK 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ID("stack",v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= value STRCAT value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"strcat");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= value DIV value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"/");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= value POW value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"^");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= value TIMES value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= value MINUS value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= value PLUS value 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(v1,v2,"+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_then ::= IF l_expresion THEN GOTO ID 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IfGoto(exp,id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_then",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assign ::= ID EQL expression 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign(id,v1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assign ::= HEAP LHOOK value RHOOK EQL expression 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign("heap",v1,v2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assign ::= STACK LHOOK value RHOOK EQL expression 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Assign("stack",v1,v2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ins ::= ID COLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Label(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ins ::= GOTO ID SEMI_COLON 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new IfGoto(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ins ::= method_call SEMI_COLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ins ::= if_then SEMI_COLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ins ::= assign SEMI_COLON 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ins_list ::= ins 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stack<>(); RESULT.push(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ins_list ::= ins ins_list 
            {
              Stack<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ins.push(i);RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instructions ::= 
            {
              Stack<Node> RESULT =null;
		RESULT = new Stack<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instructions ::= ins_list 
            {
              Stack<Node> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method ::= METHOD ID LPAREN RPAREN LBRACKET instructions RBRACKET 
            {
              Method RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack<Node> ins = (Stack<Node>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Method(id,ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method_list ::= method 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method i = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		CodeManager.addMethod(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_list ::= method method_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Method i = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CodeManager.addMethod(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= method_list 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

