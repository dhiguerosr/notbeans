/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


package jbc.parser;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\5\1\62\1\61\1\61\22\0\1\61\1\10\6\0"+
    "\1\16\1\17\1\6\1\13\1\0\1\14\1\2\1\4\12\1\1\24"+
    "\1\25\1\12\1\7\1\11\2\0\1\31\1\53\1\32\1\42\1\36"+
    "\1\47\1\44\1\35\1\46\1\3\1\34\1\43\1\40\1\50\1\41"+
    "\1\37\1\3\1\51\1\27\1\30\1\55\1\56\1\3\1\54\1\57"+
    "\1\60\1\22\1\0\1\23\1\15\1\52\1\0\1\31\1\53\1\32"+
    "\1\42\1\36\1\47\1\44\1\35\1\46\1\3\1\34\1\43\1\40"+
    "\1\50\1\41\1\37\1\3\1\51\1\27\1\30\1\55\1\56\1\3"+
    "\1\54\1\57\1\60\1\20\1\0\1\21\7\0\1\62\252\0\2\45"+
    "\115\0\1\26\u1ea8\0\1\62\1\62\u0100\0\1\33\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\1\12\3"+
    "\1\1\4\3\1\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\1\0\12\3\1\0\2\3\1\0\1\32\1\0"+
    "\1\3\1\32\4\3\1\33\4\0\13\3\2\0\3\3"+
    "\2\0\5\3\1\0\1\25\2\0\2\3\1\34\2\3"+
    "\1\35\1\3\1\36\1\0\3\3\2\0\2\3\1\37"+
    "\2\0\5\3\1\40\1\0\1\40\4\3\1\0\3\3"+
    "\2\0\2\3\2\0\5\3\2\41\1\3\1\0\2\3"+
    "\1\0\1\3\1\42\1\3\2\0\2\3\2\0\5\3"+
    "\1\0\1\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\2\0\2\3\2\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\2\0\2\3\4\0\7\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\2\0\2\3\4\0\6\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\4\0\4\3\1\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\43\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\2\0\1\44\1\0"+
    "\2\3\1\44\1\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\2\0\1\45\2\3"+
    "\1\45\1\0\1\3\2\46\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\47\1\3\1\47"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\50\1\0\1\3\1\0\1\3\2\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\1\3\2\51"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\2\0\2\3\2\52\2\53\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\54\1\0"+
    "\1\54\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\2\55\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\56\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\57\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\2\60\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\61\1\0\1\3\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[691];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\63\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u01cb\0\u01fe"+
    "\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\63\0\63\0\63\0\63\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\63\0\u0891\0\u08c4\0\231"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u04fb\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\63\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\231\0\u1023"+
    "\0\u1056\0\231\0\u1089\0\231\0\u10bc\0\u10ef\0\u1122\0\u1155"+
    "\0\u1188\0\u11bb\0\u11ee\0\u1221\0\231\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\63\0\u13b9\0\231\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\63\0\231\0\u17b5\0\u17e8\0\u181b\0\u184e"+
    "\0\u1881\0\u18b4\0\231\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013"+
    "\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db"+
    "\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\u3036\0\u3069\0\u309c\0\u30cf\0\63\0\231\0\u3102\0\u3135"+
    "\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd"+
    "\0\63\0\u3300\0\u3333\0\u3366\0\231\0\u3399\0\u33cc\0\u33ff"+
    "\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe\0\u3531\0\u3564\0\u3597"+
    "\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f"+
    "\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e\0\63\0\u3861\0\u3894"+
    "\0\231\0\u38c7\0\u38fa\0\63\0\231\0\u392d\0\u3960\0\u3993"+
    "\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b"+
    "\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90\0\u3cc3"+
    "\0\63\0\u3cf6\0\231\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5"+
    "\0\u3e28\0\u3e5b\0\u3e8e\0\u3ec1\0\u3ef4\0\63\0\231\0\u3f27"+
    "\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u408c\0\u40bf"+
    "\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\63\0\231\0\u41f1"+
    "\0\u4224\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u4389"+
    "\0\u43bc\0\u43ef\0\u4422\0\63\0\231\0\63\0\231\0\u4455"+
    "\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554\0\u4587\0\u45ba\0\u45ed"+
    "\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec\0\u471f\0\u4752\0\u4785"+
    "\0\u47b8\0\u47eb\0\u481e\0\u4851\0\u4884\0\u48b7\0\u48ea\0\u491d"+
    "\0\u4950\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5"+
    "\0\u4ae8\0\u4b1b\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d"+
    "\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5"+
    "\0\u4e18\0\u4e4b\0\u4e7e\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d"+
    "\0\u4fb0\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115"+
    "\0\u5148\0\u517b\0\u51ae\0\u51e1\0\u5214\0\u5247\0\u527a\0\u52ad"+
    "\0\u52e0\0\u5313\0\u5346\0\u5379\0\u53ac\0\u53df\0\u5412\0\u5445"+
    "\0\u5478\0\u54ab\0\u54de\0\u5511\0\u5544\0\u5577\0\u55aa\0\u55dd"+
    "\0\u5610\0\u5643\0\u5676\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775"+
    "\0\u57a8\0\u57db\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d"+
    "\0\u5940\0\u5973\0\u59a6\0\u59d9\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5"+
    "\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71\0\u5ba4\0\u5bd7\0\u5c0a\0\u5c3d"+
    "\0\u5c70\0\u5ca3\0\u5cd6\0\u5d09\0\u5d3c\0\u5d6f\0\u5da2\0\u5dd5"+
    "\0\u5e08\0\u5e3b\0\u5e6e\0\u5ea1\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d"+
    "\0\u5fa0\0\u5fd3\0\u6006\0\u6039\0\u606c\0\u609f\0\u60d2\0\u6105"+
    "\0\u6138\0\u616b\0\u619e\0\u61d1\0\u6204\0\63\0\u6237\0\231"+
    "\0\u626a\0\u629d\0\u62d0\0\u6303\0\u6336\0\u6369\0\u639c\0\u63cf"+
    "\0\u6402\0\u6435\0\u6468\0\u649b\0\u64ce\0\u6501\0\u6534\0\u6567"+
    "\0\u659a\0\u65cd\0\u6600\0\u6633\0\u6666\0\u6699\0\u66cc\0\u66ff"+
    "\0\u6732\0\u6765\0\u6798\0\u67cb\0\u67fe\0\u6831\0\u6864\0\u6897"+
    "\0\u68ca\0\u68fd\0\u6930\0\u6963\0\u6996\0\u69c9\0\u69fc\0\u6a2f"+
    "\0\u6a62\0\u6a95\0\u6ac8\0\u6afb\0\u6b2e\0\u6b61\0\u6b94\0\u6bc7"+
    "\0\u6bfa\0\u6c2d\0\u6c60\0\u6c93\0\u6cc6\0\u6cf9\0\u6d2c\0\u6d5f"+
    "\0\u6d92\0\u6dc5\0\u6df8\0\u6e2b\0\u6e5e\0\u6e91\0\u6ec4\0\63"+
    "\0\231\0\u6ef7\0\u6f2a\0\u6f5d\0\u6f90\0\u6fc3\0\u6ff6\0\u7029"+
    "\0\u705c\0\u708f\0\u70c2\0\u70f5\0\u7128\0\u715b\0\u718e\0\u71c1"+
    "\0\u71f4\0\63\0\231\0\u7227\0\u725a\0\u728d\0\u72c0\0\u72f3"+
    "\0\u7326\0\u7359\0\u738c\0\u73bf\0\u73f2\0\u7425\0\u7458\0\u748b"+
    "\0\u74be\0\u74f1\0\u7524\0\u7557\0\u758a\0\u75bd\0\u75f0\0\u7623"+
    "\0\u7656\0\u7689\0\u76bc\0\u76ef\0\u7722\0\u7755\0\u7788\0\63"+
    "\0\231\0\u77bb\0\u77ee\0\u7821\0\u7854\0\u7887\0\u78ba\0\63"+
    "\0\231\0\u78ed\0\u7920\0\u7953\0\u7986\0\u79b9\0\u79ec\0\u7a1f"+
    "\0\u7a52\0\u7a85\0\u7ab8\0\u7aeb\0\u7b1e\0\u7b51\0\u7b84\0\u7bb7"+
    "\0\u7bea\0\u7c1d\0\u7c50\0\u7c83\0\u7cb6\0\63\0\231\0\u7ce9"+
    "\0\u7d1c\0\63\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[691];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\4\1\34\1\4\1\35"+
    "\1\36\1\37\1\4\1\40\1\41\1\42\1\43\1\44"+
    "\1\4\1\45\1\4\1\46\5\4\1\6\65\0\1\3"+
    "\1\47\61\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\13\4\6\0\1\50\1\0\1\51\63\0"+
    "\1\52\62\0\1\53\62\0\1\54\62\0\1\55\103\0"+
    "\1\56\33\0\1\4\1\0\1\4\23\0\1\4\1\57"+
    "\2\4\1\0\11\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\1\4\1\60\1\61\6\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\3\4\1\62\7\4\3\0\1\4"+
    "\1\0\1\4\23\0\2\4\1\63\1\4\1\0\1\4"+
    "\1\64\7\4\1\0\13\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\2\4\1\65\6\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\5\4"+
    "\1\66\3\4\1\0\13\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\2\4\1\67\6\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\10\4\1\70\2\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\71\1\72\12\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\73"+
    "\3\4\1\0\13\4\42\0\1\74\6\0\1\75\1\76"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\4\4"+
    "\1\77\4\4\1\0\1\4\1\100\1\101\10\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\7\4\1\102"+
    "\1\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\2\4\1\103\6\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\104"+
    "\3\4\1\0\13\4\3\0\1\105\61\0\5\50\1\0"+
    "\55\50\6\106\1\107\54\106\31\0\1\110\17\0\1\111"+
    "\12\0\1\4\1\0\1\4\23\0\2\4\1\112\1\4"+
    "\1\0\11\4\1\0\3\4\1\113\7\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\2\4\1\114\6\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\6\4\1\115\4\4\3\0\1\4"+
    "\1\0\1\4\23\0\3\4\1\116\1\0\11\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\7\4\1\117\1\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\2\4\1\120\1\4\1\0\11\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\2\4\1\121"+
    "\1\4\1\0\11\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\7\4\1\122\1\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\1\4\1\123"+
    "\2\4\1\0\11\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\2\4\1\124\1\4\1\0\11\4\1\0"+
    "\13\4\40\0\1\125\11\0\1\126\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\2\4\1\127\6\4\1\0"+
    "\2\4\1\130\10\4\3\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\131\2\4\1\0\11\4\1\0\13\4\41\0"+
    "\1\132\53\0\1\133\33\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\3\4\1\134\5\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\135\2\4\1\0"+
    "\11\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\5\4\1\136\3\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\3\4\1\137\1\0\11\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\5\4\1\140\3\4\1\0\13\4\2\0\6\106"+
    "\1\141\54\106\4\0\1\142\1\0\1\107\106\0\1\143"+
    "\62\0\1\144\31\0\1\4\1\0\1\4\23\0\3\4"+
    "\1\145\1\0\11\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\3\4\1\146\1\0\11\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\147\10\4\3\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\150\2\4\1\0\11\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\5\4"+
    "\1\151\3\4\1\0\13\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\7\4\1\152\1\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\3\4\1\153\7\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\3\4\1\154\5\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\155\1\156\12\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\1\4\1\157\7\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\7\4\1\160"+
    "\1\4\1\0\13\4\52\0\1\161\50\0\1\162\25\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\163\10\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\2\4\1\164\6\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\165"+
    "\3\4\1\0\13\4\53\0\1\166\63\0\1\167\11\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\3\4\1\170\7\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\171\6\4\3\0"+
    "\1\4\1\0\1\4\23\0\2\4\1\172\1\4\1\0"+
    "\11\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\173\2\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\7\4\1\174"+
    "\1\4\1\0\13\4\2\0\4\106\1\142\1\106\1\141"+
    "\54\106\33\0\2\175\57\0\1\176\32\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\175\1\177\10\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\2\4\1\200\1\4"+
    "\1\0\11\4\1\0\13\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\5\4\1\201\3\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\202\6\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\203\6\4"+
    "\46\0\1\204\17\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\10\4\1\205\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\5\4\1\206\3\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\5\4\1\207\3\4\1\0\13\4\62\0\1\210\33\0"+
    "\1\211\32\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\12\4\1\212\3\0\1\4\1\0\1\4"+
    "\23\0\2\4\1\213\1\4\1\0\11\4\1\0\13\4"+
    "\47\0\2\214\44\0\1\215\33\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\214\1\216\12\4\3\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\217\2\4\1\0"+
    "\11\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\220\2\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\2\4\1\221\1\4\1\0"+
    "\11\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\222\6\4\32\0"+
    "\1\223\33\0\1\4\1\0\1\4\23\0\1\4\1\224"+
    "\2\4\1\0\11\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\225"+
    "\6\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\226\1\227\12\4\3\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\230\2\4\1\0\11\4\1\0\13\4"+
    "\43\0\1\231\22\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\5\4\1\232\3\4\1\0\13\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\6\4\1\233\2\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\234\6\4\43\0\1\235"+
    "\73\0\1\236\11\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\5\4\1\237\3\4\1\0\13\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\240\6\4\42\0\1\241\63\0\1\242\22\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\4\4\1\243\4\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\5\4\1\244\3\4\1\0\13\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\245\6\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\246\10\4\3\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\247\2\4\1\0\11\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\22\0\1\250"+
    "\1\251\3\4\1\0\11\4\1\0\13\4\52\0\1\252"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\253\10\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\5\4\1\254\3\4\1\0\13\4"+
    "\52\0\1\255\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\256\10\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\257\1\260"+
    "\12\4\54\0\1\261\55\0\2\262\15\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\263"+
    "\6\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\262\1\264\12\4\47\0\2\265\66\0\1\266"+
    "\11\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\265\1\267\12\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\270\6\4\3\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\271\2\4\1\0"+
    "\11\4\1\0\13\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\10\4\1\272\1\0\13\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\5\4\1\273\3\4"+
    "\1\0\13\4\32\0\1\274\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\275\2\4\1\0\11\4\1\0\13\4"+
    "\32\0\1\276\33\0\1\4\1\0\1\4\23\0\1\4"+
    "\1\277\2\4\1\0\11\4\1\0\13\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\300\6\4\43\0\1\301\22\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\5\4\1\302\3\4\1\0\13\4"+
    "\52\0\1\303\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\304\10\4\47\0\2\305"+
    "\64\0\1\306\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\305\1\307\12\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\310"+
    "\10\4\53\0\1\311\37\0\2\312\2\0\1\313\14\0"+
    "\1\314\14\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\3\4\1\315\7\4\3\0\1\4\1\0"+
    "\1\4\22\0\1\312\1\316\2\4\1\317\1\0\11\4"+
    "\1\0\1\4\1\320\11\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\5\4\1\321\3\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\7\4\1\322\3\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\323\6\4"+
    "\53\0\1\324\12\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\3\4\1\325\7\4\54\0\1\326"+
    "\11\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\327\6\4\3\0\1\4\1\0\1\4"+
    "\22\0\1\330\1\331\3\4\1\0\11\4\1\332\1\333"+
    "\12\4\54\0\1\334\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\335\6\4\32\0"+
    "\1\336\33\0\1\4\1\0\1\4\23\0\1\4\1\337"+
    "\2\4\1\0\11\4\1\0\13\4\52\0\1\340\42\0"+
    "\1\341\33\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\342\10\4\3\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\343\2\4\1\0\11\4\1\0"+
    "\13\4\54\0\1\344\40\0\1\345\67\0\1\346\70\0"+
    "\1\347\20\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\350\6\4\3\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\351\2\4\1\0\11\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\1\4\1\352\7\4\1\0\13\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\7\4\1\353\1\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\354\6\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\7\4\1\355\1\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\22\0\1\356\1\357"+
    "\3\4\1\0\11\4\1\0\13\4\47\0\2\360\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\360"+
    "\1\361\12\4\47\0\2\362\15\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\362\1\363\12\4\32\0"+
    "\1\364\33\0\1\4\1\0\1\4\23\0\1\4\1\365"+
    "\2\4\1\0\11\4\1\0\13\4\52\0\1\366\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\367\10\4\33\0\1\370\32\0\1\4\1\0"+
    "\1\4\23\0\2\4\1\371\1\4\1\0\11\4\1\0"+
    "\13\4\54\0\1\372\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\373\6\4\32\0"+
    "\1\374\104\0\1\375\11\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\376\2\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\4\4\1\377\6\4\30\0\2\u0100\104\0\1\u0101\42\0"+
    "\1\u0102\72\0\1\u0103\22\0\1\4\1\0\1\4\22\0"+
    "\1\u0100\1\u0104\3\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\3\4\1\u0105\7\4\3\0\1\4\1\0\1\4\23\0"+
    "\2\4\1\u0106\1\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\u0107"+
    "\3\4\1\0\13\4\3\0\1\4\1\0\1\4\22\0"+
    "\1\u0108\1\u0109\3\4\1\0\11\4\1\u010a\1\u010b\12\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\5\4"+
    "\1\u010c\3\4\1\0\13\4\32\0\1\u010d\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u010e\2\4\1\0\11\4"+
    "\1\0\13\4\52\0\1\u010f\13\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\2\4\1\u0110\10\4"+
    "\52\0\1\u0111\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\u0112\10\4\53\0\1\u0113"+
    "\12\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\3\4\1\u0114\7\4\32\0\1\u0115\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u0116\2\4\1\0\11\4"+
    "\1\0\13\4\53\0\1\u0117\12\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\3\4\1\u0118\7\4"+
    "\47\0\2\u0119\15\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\u0119\1\u011a\12\4\54\0\1\u011b\55\0"+
    "\2\u011c\15\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u011d\6\4\3\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u011c\1\u011e\12\4"+
    "\32\0\1\u011f\77\0\2\u0120\65\0\1\u0121\42\0\1\u0122"+
    "\32\0\1\4\1\0\1\4\23\0\1\4\1\u0123\2\4"+
    "\1\0\11\4\1\0\13\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\u0120\1\u0124\12\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\3\4\1\u0125\7\4\3\0\1\4\1\0\1\4\23\0"+
    "\2\4\1\u0126\1\4\1\0\11\4\1\0\13\4\32\0"+
    "\1\u0127\33\0\1\4\1\0\1\4\23\0\1\4\1\u0128"+
    "\2\4\1\0\11\4\1\0\13\4\52\0\1\u0129\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\u012a\10\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u012b\6\4\53\0"+
    "\1\u012c\12\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\3\4\1\u012d\7\4\46\0\1\u012e\17\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\10\4\1\u012f"+
    "\1\0\13\4\32\0\1\u0130\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u0131\2\4\1\0\11\4\1\0\13\4"+
    "\47\0\2\u0132\15\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\u0132\1\u0133\12\4\53\0\1\u0134\12\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\3\4\1\u0135\7\4\52\0\1\u0136\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u0137"+
    "\10\4\47\0\2\u0138\64\0\1\u0139\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u0138\1\u013a\12\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u013b\10\4\53\0\1\u013c\61\0\1\u013d"+
    "\42\0\1\u013e\33\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\3\4\1\u013f\7\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\2\4"+
    "\1\u0140\10\4\3\0\1\4\1\0\1\4\23\0\1\4"+
    "\1\u0141\2\4\1\0\11\4\1\0\13\4\53\0\1\u0142"+
    "\12\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\3\4\1\u0143\7\4\32\0\1\u0144\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u0145\2\4\1\0\11\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\u0146\1\u0147\12\4\47\0\2\u0148\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\u0148"+
    "\1\u0149\12\4\54\0\1\u014a\11\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\u014b\6\4"+
    "\54\0\1\u014c\11\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\u014d\6\4\52\0\1\u014e"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u014f\10\4\33\0\1\u0150\32\0\1\4"+
    "\1\0\1\4\23\0\2\4\1\u0151\1\4\1\0\11\4"+
    "\1\0\13\4\32\0\1\u0152\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u0153\2\4\1\0\11\4\1\0\13\4"+
    "\52\0\1\u0154\42\0\1\u0155\33\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\2\4\1\u0156\10\4"+
    "\3\0\1\4\1\0\1\4\23\0\1\4\1\u0157\2\4"+
    "\1\0\11\4\1\0\13\4\47\0\2\u0158\60\0\1\u0159"+
    "\17\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u0158\1\u015a\12\4\3\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\10\4\1\u015b\1\0\13\4\47\0\2\u015c"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u015c\1\u015d\12\4\52\0\1\u015e\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u015f"+
    "\10\4\52\0\1\u0160\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u0161\10\4\47\0"+
    "\2\u0162\15\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\u0162\1\u0163\12\4\47\0\2\u0164\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u0164\1\u0165"+
    "\12\4\46\0\1\u0166\17\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\10\4\1\u0167\1\0\13\4\61\0\1\u0168"+
    "\4\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\11\4\1\u0169\1\4\54\0\1\u016a\11\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\u016b\6\4\32\0\1\u016c\104\0\1\u016d\11\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u016e\2\4\1\0\11\4"+
    "\1\0\13\4\3\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\u016f\6\4\52\0\1\u0170"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u0171\10\4\52\0\1\u0172\13\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\2\4"+
    "\1\u0173\10\4\32\0\1\u0174\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u0175\2\4\1\0\11\4\1\0\13\4"+
    "\46\0\1\u0176\17\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\10\4\1\u0177\1\0\13\4\52\0\1\u0178\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\u0179\10\4\52\0\1\u017a\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u017b"+
    "\10\4\54\0\1\u017c\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u017d\6\4\47\0"+
    "\2\u017e\15\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\u017e\1\u017f\12\4\54\0\1\u0180\55\0\2\u0181"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\u0182\6\4\3\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\u0181\1\u0183\12\4\46\0"+
    "\1\u0184\17\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\10\4\1\u0185\1\0\13\4\46\0\1\u0186\17\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\10\4\1\u0187\1\0"+
    "\13\4\54\0\1\u0188\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u0189\6\4\32\0"+
    "\1\u018a\33\0\1\4\1\0\1\4\23\0\1\4\1\u018b"+
    "\2\4\1\0\11\4\1\0\13\4\32\0\1\u018c\33\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\u018d\2\4\1\0"+
    "\11\4\1\0\13\4\33\0\1\u018e\32\0\1\4\1\0"+
    "\1\4\23\0\2\4\1\u018f\1\4\1\0\11\4\1\0"+
    "\13\4\52\0\1\u0190\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u0191\10\4\47\0"+
    "\2\u0192\64\0\1\u0193\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\u0192\1\u0194\12\4\3\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\2\4"+
    "\1\u0195\10\4\47\0\2\u0196\15\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\u0196\1\u0197\12\4\54\0"+
    "\1\u0198\11\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u0199\6\4\54\0\1\u019a\11\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\4\4\1\u019b\6\4\53\0\1\u019c\12\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\3\4\1\u019d"+
    "\7\4\32\0\1\u019e\33\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u019f\2\4\1\0\11\4\1\0\13\4\52\0"+
    "\1\u01a0\42\0\1\u01a1\33\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u01a2\10\4\3\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\u01a3\2\4\1\0"+
    "\11\4\1\0\13\4\52\0\1\u01a4\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u01a5"+
    "\10\4\47\0\2\u01a6\15\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\u01a6\1\u01a7\12\4\47\0\2\u01a8"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u01a8\1\u01a9\12\4\53\0\1\u01aa\12\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\3\4\1\u01ab"+
    "\7\4\54\0\1\u01ac\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u01ad\6\4\32\0"+
    "\1\u01ae\104\0\1\u01af\11\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u01b0\2\4\1\0\11\4\1\0\13\4\3\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\4\4\1\u01b1\6\4\32\0\1\u01b2\33\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u01b3\2\4\1\0\11\4\1\0"+
    "\13\4\52\0\1\u01b4\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u01b5\10\4\52\0"+
    "\1\u01b6\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u01b7\10\4\33\0\1\u01b8\32\0"+
    "\1\4\1\0\1\4\23\0\2\4\1\u01b9\1\4\1\0"+
    "\11\4\1\0\13\4\47\0\2\u01ba\15\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u01ba\1\u01bb\12\4"+
    "\54\0\1\u01bc\55\0\2\u01bd\15\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\u01be\6\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u01bd\1\u01bf\12\4\54\0\1\u01c0\11\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\u01c1"+
    "\6\4\32\0\1\u01c2\33\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u01c3\2\4\1\0\11\4\1\0\13\4\32\0"+
    "\1\u01c4\33\0\1\4\1\0\1\4\23\0\1\4\1\u01c5"+
    "\2\4\1\0\11\4\1\0\13\4\61\0\1\u01c6\4\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\11\4\1\u01c7\1\4\52\0\1\u01c8\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u01c9"+
    "\10\4\47\0\2\u01ca\64\0\1\u01cb\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u01ca\1\u01cc\12\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u01cd\10\4\47\0\2\u01ce\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u01ce\1\u01cf"+
    "\12\4\54\0\1\u01d0\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u01d1\6\4\54\0"+
    "\1\u01d2\11\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u01d3\6\4\54\0\1\u01d4\11\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\4\4\1\u01d5\6\4\32\0\1\u01d6\33\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u01d7\2\4\1\0\11\4\1\0"+
    "\13\4\52\0\1\u01d8\42\0\1\u01d9\33\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u01da"+
    "\10\4\3\0\1\4\1\0\1\4\23\0\1\4\1\u01db"+
    "\2\4\1\0\11\4\1\0\13\4\52\0\1\u01dc\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\u01dd\10\4\47\0\2\u01de\15\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u01de\1\u01df\12\4"+
    "\47\0\2\u01e0\15\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\u01e0\1\u01e1\12\4\47\0\2\u01e2\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\u01e2"+
    "\1\u01e3\12\4\54\0\1\u01e4\11\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\u01e5\6\4"+
    "\32\0\1\u01e6\104\0\1\u01e7\11\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u01e8\2\4\1\0\11\4\1\0\13\4"+
    "\3\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\u01e9\6\4\32\0\1\u01ea\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u01eb\2\4\1\0\11\4"+
    "\1\0\13\4\52\0\1\u01ec\13\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\2\4\1\u01ed\10\4"+
    "\52\0\1\u01ee\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\u01ef\10\4\52\0\1\u01f0"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u01f1\10\4\47\0\2\u01f2\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u01f2\1\u01f3"+
    "\12\4\54\0\1\u01f4\55\0\2\u01f5\15\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\u01f6"+
    "\6\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\u01f5\1\u01f7\12\4\54\0\1\u01f8\11\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\u01f9\6\4\32\0\1\u01fa\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u01fb\2\4\1\0\11\4\1\0\13\4"+
    "\32\0\1\u01fc\33\0\1\4\1\0\1\4\23\0\1\4"+
    "\1\u01fd\2\4\1\0\11\4\1\0\13\4\32\0\1\u01fe"+
    "\33\0\1\4\1\0\1\4\23\0\1\4\1\u01ff\2\4"+
    "\1\0\11\4\1\0\13\4\52\0\1\u0200\13\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\2\4"+
    "\1\u0201\10\4\47\0\2\u0202\64\0\1\u0203\13\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u0202\1\u0204"+
    "\12\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u0205\10\4\47\0\2\u0206\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\u0206"+
    "\1\u0207\12\4\54\0\1\u0208\11\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\u0209\6\4"+
    "\54\0\1\u020a\11\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\u020b\6\4\54\0\1\u020c"+
    "\11\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\u020d\6\4\32\0\1\u020e\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u020f\2\4\1\0\11\4"+
    "\1\0\13\4\52\0\1\u0210\42\0\1\u0211\33\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\2\4"+
    "\1\u0212\10\4\3\0\1\4\1\0\1\4\23\0\1\4"+
    "\1\u0213\2\4\1\0\11\4\1\0\13\4\52\0\1\u0214"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u0215\10\4\47\0\2\u0216\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u0216\1\u0217"+
    "\12\4\47\0\2\u0218\15\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\u0218\1\u0219\12\4\47\0\2\u021a"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u021a\1\u021b\12\4\54\0\1\u021c\11\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\u021d"+
    "\6\4\32\0\1\u021e\104\0\1\u021f\11\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u0220\2\4\1\0\11\4\1\0"+
    "\13\4\3\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u0221\6\4\32\0\1\u0222\33\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\u0223\2\4\1\0"+
    "\11\4\1\0\13\4\52\0\1\u0224\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u0225"+
    "\10\4\52\0\1\u0226\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u0227\10\4\52\0"+
    "\1\u0228\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u0229\10\4\47\0\2\u022a\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\u022a"+
    "\1\u022b\12\4\47\0\2\u022c\15\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\u022c\1\u022d\12\4\54\0"+
    "\1\u022e\11\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u022f\6\4\32\0\1\u0230\33\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\u0231\2\4\1\0"+
    "\11\4\1\0\13\4\32\0\1\u0232\33\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u0233\2\4\1\0\11\4\1\0"+
    "\13\4\32\0\1\u0234\33\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u0235\2\4\1\0\11\4\1\0\13\4\52\0"+
    "\1\u0236\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u0237\10\4\52\0\1\u0238\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\u0239\10\4\47\0\2\u023a\15\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\u023a\1\u023b\12\4"+
    "\54\0\1\u023c\11\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\u023d\6\4\54\0\1\u023e"+
    "\11\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\u023f\6\4\54\0\1\u0240\11\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\0\4\4"+
    "\1\u0241\6\4\32\0\1\u0242\33\0\1\4\1\0\1\4"+
    "\23\0\1\4\1\u0243\2\4\1\0\11\4\1\0\13\4"+
    "\32\0\1\u0244\33\0\1\4\1\0\1\4\23\0\1\4"+
    "\1\u0245\2\4\1\0\11\4\1\0\13\4\52\0\1\u0246"+
    "\13\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\2\4\1\u0247\10\4\47\0\2\u0248\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u0248\1\u0249"+
    "\12\4\47\0\2\u024a\15\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\u024a\1\u024b\12\4\47\0\2\u024c"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u024c\1\u024d\12\4\54\0\1\u024e\11\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\u024f"+
    "\6\4\54\0\1\u0250\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u0251\6\4\32\0"+
    "\1\u0252\33\0\1\4\1\0\1\4\23\0\1\4\1\u0253"+
    "\2\4\1\0\11\4\1\0\13\4\52\0\1\u0254\13\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\2\4\1\u0255\10\4\52\0\1\u0256\13\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\2\4\1\u0257"+
    "\10\4\52\0\1\u0258\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u0259\10\4\47\0"+
    "\2\u025a\15\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\u025a\1\u025b\12\4\47\0\2\u025c\15\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\11\4\1\u025c\1\u025d"+
    "\12\4\54\0\1\u025e\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u025f\6\4\32\0"+
    "\1\u0260\33\0\1\4\1\0\1\4\23\0\1\4\1\u0261"+
    "\2\4\1\0\11\4\1\0\13\4\32\0\1\u0262\33\0"+
    "\1\4\1\0\1\4\23\0\1\4\1\u0263\2\4\1\0"+
    "\11\4\1\0\13\4\32\0\1\u0264\33\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u0265\2\4\1\0\11\4\1\0"+
    "\13\4\52\0\1\u0266\13\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\2\4\1\u0267\10\4\52\0"+
    "\1\u0268\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u0269\10\4\47\0\2\u026a\15\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\u026a"+
    "\1\u026b\12\4\54\0\1\u026c\11\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\4\4\1\u026d\6\4"+
    "\54\0\1\u026e\11\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\4\4\1\u026f\6\4\32\0\1\u0270"+
    "\33\0\1\4\1\0\1\4\23\0\1\4\1\u0271\2\4"+
    "\1\0\11\4\1\0\13\4\32\0\1\u0272\33\0\1\4"+
    "\1\0\1\4\23\0\1\4\1\u0273\2\4\1\0\11\4"+
    "\1\0\13\4\52\0\1\u0274\13\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\11\4\1\0\2\4\1\u0275\10\4"+
    "\47\0\2\u0276\15\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\u0276\1\u0277\12\4\55\0\1\u0278\10\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\5\4\1\u0279\5\4\54\0\1\u027a\11\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\4\4\1\u027b"+
    "\6\4\32\0\1\u027c\33\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u027d\2\4\1\0\11\4\1\0\13\4\52\0"+
    "\1\u027e\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u027f\10\4\43\0\1\u0280\22\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\u0281"+
    "\3\4\1\0\13\4\55\0\1\u0282\10\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\5\4\1\u0283"+
    "\5\4\54\0\1\u0284\11\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\4\4\1\u0285\6\4\32\0"+
    "\1\u0286\33\0\1\4\1\0\1\4\23\0\1\4\1\u0287"+
    "\2\4\1\0\11\4\1\0\13\4\43\0\1\u0288\22\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\u0289"+
    "\3\4\1\0\13\4\43\0\1\u028a\22\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\5\4\1\u028b\3\4\1\0"+
    "\13\4\47\0\2\u028c\15\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\u028c\1\u028d\12\4\54\0\1\u028e"+
    "\11\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\0\4\4\1\u028f\6\4\45\0\1\u0290\20\0\1\4"+
    "\1\0\1\4\23\0\4\4\1\0\7\4\1\u0291\1\4"+
    "\1\0\13\4\43\0\1\u0292\22\0\1\4\1\0\1\4"+
    "\23\0\4\4\1\0\5\4\1\u0293\3\4\1\0\13\4"+
    "\52\0\1\u0294\13\0\1\4\1\0\1\4\23\0\4\4"+
    "\1\0\11\4\1\0\2\4\1\u0295\10\4\47\0\2\u0296"+
    "\15\0\1\4\1\0\1\4\23\0\4\4\1\0\11\4"+
    "\1\u0296\1\u0297\12\4\45\0\1\u0298\20\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\7\4\1\u0299\1\4\1\0"+
    "\13\4\32\0\1\u029a\33\0\1\4\1\0\1\4\23\0"+
    "\1\4\1\u029b\2\4\1\0\11\4\1\0\13\4\52\0"+
    "\1\u029c\13\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\2\4\1\u029d\10\4\54\0\1\u029e\11\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\11\4\1\0"+
    "\4\4\1\u029f\6\4\32\0\1\u02a0\33\0\1\4\1\0"+
    "\1\4\23\0\1\4\1\u02a1\2\4\1\0\11\4\1\0"+
    "\13\4\55\0\1\u02a2\10\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\11\4\1\0\5\4\1\u02a3\5\4\54\0"+
    "\1\u02a4\11\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\11\4\1\0\4\4\1\u02a5\6\4\43\0\1\u02a6\22\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\5\4\1\u02a7"+
    "\3\4\1\0\13\4\55\0\1\u02a8\10\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\11\4\1\0\5\4\1\u02a9"+
    "\5\4\43\0\1\u02aa\22\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\5\4\1\u02ab\3\4\1\0\13\4\43\0"+
    "\1\u02ac\22\0\1\4\1\0\1\4\23\0\4\4\1\0"+
    "\5\4\1\u02ad\3\4\1\0\13\4\45\0\1\u02ae\20\0"+
    "\1\4\1\0\1\4\23\0\4\4\1\0\7\4\1\u02af"+
    "\1\4\1\0\13\4\43\0\1\u02b0\22\0\1\4\1\0"+
    "\1\4\23\0\4\4\1\0\5\4\1\u02b1\3\4\1\0"+
    "\13\4\45\0\1\u02b2\20\0\1\4\1\0\1\4\23\0"+
    "\4\4\1\0\7\4\1\u02b3\1\4\1\0\13\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32079];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\4\1\13\11\20\1\1\0"+
    "\1\1\1\0\4\11\1\0\12\1\1\0\2\1\1\0"+
    "\1\11\1\0\7\1\4\0\13\1\2\0\3\1\2\0"+
    "\5\1\1\0\1\11\2\0\10\1\1\0\3\1\2\0"+
    "\3\1\2\0\5\1\1\11\1\0\5\1\1\0\3\1"+
    "\2\0\2\1\2\0\5\1\1\11\2\1\1\0\2\1"+
    "\1\0\3\1\2\0\2\1\2\0\5\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\2\0\5\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\4\0\7\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\4\0\6\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\4\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\2\0\1\11\1\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\11\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[691];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/*CODIGO USUARIO*/
/*CODIGO USUARIO*/ 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
  	/*INICIALIZAR ERRORES LEXICOS*/
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* LANZAR ERROR LEXICO*/
          }
        case 51: break;
        case 2: 
          { return new Symbol(sym.NUM,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 52: break;
        case 3: 
          { return new Symbol(sym.ID,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 53: break;
        case 4: 
          { return new Symbol(sym.DIV,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 54: break;
        case 5: 
          { 
          }
        case 55: break;
        case 6: 
          { return new Symbol(sym.TIMES,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 56: break;
        case 7: 
          { return new Symbol(sym.EQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 57: break;
        case 8: 
          { return new Symbol(sym.GREATER,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 58: break;
        case 9: 
          { return new Symbol(sym.LESS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 59: break;
        case 10: 
          { return new Symbol(sym.PLUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 60: break;
        case 11: 
          { return new Symbol(sym.MINUS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 61: break;
        case 12: 
          { return new Symbol(sym.POW,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 62: break;
        case 13: 
          { return new Symbol(sym.LPAREN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 63: break;
        case 14: 
          { return new Symbol(sym.RPAREN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 64: break;
        case 15: 
          { return new Symbol(sym.LBRACKET,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 65: break;
        case 16: 
          { return new Symbol(sym.RBRACKET,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 66: break;
        case 17: 
          { return new Symbol(sym.LHOOK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 67: break;
        case 18: 
          { return new Symbol(sym.RHOOK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 68: break;
        case 19: 
          { return new Symbol(sym.COLON,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 69: break;
        case 20: 
          { return new Symbol(sym.SEMI_COLON,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 70: break;
        case 21: 
          { /*comentarios se ignoran*/
          }
        case 71: break;
        case 22: 
          { return new Symbol(sym.EQUALS,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 72: break;
        case 23: 
          { return new Symbol(sym.NOTEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 73: break;
        case 24: 
          { return new Symbol(sym.GEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 74: break;
        case 25: 
          { return new Symbol(sym.LEQL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 75: break;
        case 26: 
          { return new Symbol(sym.IF,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 76: break;
        case 27: 
          { return new Symbol(sym.DEC,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 77: break;
        case 28: 
          { return new Symbol(sym.THEN,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 78: break;
        case 29: 
          { return new Symbol(sym.CALL,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 79: break;
        case 30: 
          { return new Symbol(sym.HEAP,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 80: break;
        case 31: 
          { return new Symbol(sym.GOTO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 81: break;
        case 32: 
          { return new Symbol(sym.STACK,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 82: break;
        case 33: 
          { return new Symbol(sym.STRCAT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 83: break;
        case 34: 
          { return new Symbol(sym.METHOD,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 84: break;
        case 35: 
          { return new Symbol(sym.CHAR_INT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 85: break;
        case 36: 
          { return new Symbol(sym.INT_CHAR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 86: break;
        case 37: 
          { return new Symbol(sym.INT_FLOAT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 87: break;
        case 38: 
          { return new Symbol(sym.FLOAT_INT,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 88: break;
        case 39: 
          { return new Symbol(sym.INT_STRING,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 89: break;
        case 40: 
          { return new Symbol(sym.CHAR_STRING,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 90: break;
        case 41: 
          { return new Symbol(sym.BOOL_STRING,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 91: break;
        case 42: 
          { return new Symbol(sym.IMPRIMIR,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 92: break;
        case 43: 
          { return new Symbol(sym.FLOAT_STRING,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 93: break;
        case 44: 
          { return new Symbol(sym.LIENZO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 94: break;
        case 45: 
          { return new Symbol(sym.TEXTO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 95: break;
        case 46: 
          { return new Symbol(sym.LINEA,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 96: break;
        case 47: 
          { return new Symbol(sym.POLIGONO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 97: break;
        case 48: 
          { return new Symbol(sym.OVALO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 98: break;
        case 49: 
          { return new Symbol(sym.RECTANGULO,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 99: break;
        case 50: 
          { return new Symbol(sym.ARC0,yycolumn+1,yyline+1,new String(yytext()));
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
